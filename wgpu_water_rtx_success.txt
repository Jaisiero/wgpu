Launching Vulkan Application:
- Layers overridden by "API dump" configuration.
- Application: vkcube
- Executable: C:\Users\gamer\RustroverProjects\wgpu\target\debug\deps\wgpu_examples.exe
- Working Directory: C:\VulkanSDK\1.3.275.0\Bin
- Command-line Arguments: water_rtx
- Log file: C:\Users\gamer\VulkanSDK\wgpu_water_rtx_success.txt
[2024-02-10T19:54:04Z INFO  wgpu_examples::framework] Initializing wgpu...
Thread 0, Frame 0:

vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):

    pCreateInfo:                    const VkInstanceCreateInfo* = 0000002FCC4F8E20:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)

        pNext:                          const void* = NULL

        flags:                          VkInstanceCreateFlags = 0

        pApplicationInfo:               const VkApplicationInfo* = 0000002FCC4F95E0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)

            pNext:                          const void* = NULL

            pApplicationName:               const char* = "wgpu"

            applicationVersion:             uint32_t = 1

            pEngineName:                    const char* = "wgpu-hal"

            engineVersion:                  uint32_t = 2

            apiVersion:                     uint32_t = 4206592

        enabledLayerCount:              uint32_t = 1

        ppEnabledLayerNames:            const char* const* = 0000022448E98590

            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_KHRONOS_validation"

        enabledExtensionCount:          uint32_t = 5

        ppEnabledExtensionNames:        const char* const* = 0000022448E98598

            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"

            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"

            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_debug_utils"

            ppEnabledExtensionNames[3]:     const char* const = "VK_EXT_swapchain_colorspace"

            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_get_physical_device_properties2"

        pNext:                          VkDebugUtilsMessengerCreateInfoEXT = 0000002FCC4F9930:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)

            pNext:                          const void* = NULL

            flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0

            messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)

            messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)

            pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF72745C980

            pUserData:                      void* = 0000022448EF1480

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pInstance:                      VkInstance* = 0000022448FE48D0



Thread 0, Frame 0:

vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 0000022448FE48D0

    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 0000002FCC4F8A68:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)

        pNext:                          const void* = NULL

        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0

        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)

        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)

        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF72745C980

        pUserData:                      void* = 0000022448EF1480

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMessenger:                     VkDebugUtilsMessengerEXT* = FD5B260000000001



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 0000022448FE48D0

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = NULL



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 0000022448FE48D0

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = 000002244B0516E0

        pPhysicalDevices[0]:            VkPhysicalDevice = 000002244A97E440

        pPhysicalDevices[1]:            VkPhysicalDevice = 000002244A97DEA0



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 0000022448FE48D0

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = NULL



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 0000022448FE48D0

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = 000002244B051AA0

        pPhysicalDevices[0]:            VkPhysicalDevice = 000002244A97E440

        pPhysicalDevices[1]:            VkPhysicalDevice = 000002244A97DEA0



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pProperties:                    VkPhysicalDeviceProperties* = 0000002FCC4E9AC8:

        apiVersion:                     uint32_t = 4206834

        driverVersion:                  uint32_t = 2252898304

        vendorID:                       uint32_t = 4318

        deviceID:                       uint32_t = 9479

        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)

        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"

        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000002FCC4E9BDC

            pipelineCacheUUID[0]:           uint8_t = 218

            pipelineCacheUUID[1]:           uint8_t = 176

            pipelineCacheUUID[2]:           uint8_t = 31

            pipelineCacheUUID[3]:           uint8_t = 61

            pipelineCacheUUID[4]:           uint8_t = 103

            pipelineCacheUUID[5]:           uint8_t = 121

            pipelineCacheUUID[6]:           uint8_t = 168

            pipelineCacheUUID[7]:           uint8_t = 246

            pipelineCacheUUID[8]:           uint8_t = 179

            pipelineCacheUUID[9]:           uint8_t = 114

            pipelineCacheUUID[10]:          uint8_t = 172

            pipelineCacheUUID[11]:          uint8_t = 249

            pipelineCacheUUID[12]:          uint8_t = 185

            pipelineCacheUUID[13]:          uint8_t = 210

            pipelineCacheUUID[14]:          uint8_t = 68

            pipelineCacheUUID[15]:          uint8_t = 21

        limits:                         VkPhysicalDeviceLimits = 0000002FCC4E9BF0:

            maxImageDimension1D:            uint32_t = 32768

            maxImageDimension2D:            uint32_t = 32768

            maxImageDimension3D:            uint32_t = 16384

            maxImageDimensionCube:          uint32_t = 32768

            maxImageArrayLayers:            uint32_t = 2048

            maxTexelBufferElements:         uint32_t = 134217728

            maxUniformBufferRange:          uint32_t = 65536

            maxStorageBufferRange:          uint32_t = 4294967295

            maxPushConstantsSize:           uint32_t = 256

            maxMemoryAllocationCount:       uint32_t = 4096

            maxSamplerAllocationCount:      uint32_t = 4000

            bufferImageGranularity:         VkDeviceSize = 1024

            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775

            maxBoundDescriptorSets:         uint32_t = 32

            maxPerStageDescriptorSamplers:  uint32_t = 1048576

            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorSampledImages: uint32_t = 1048576

            maxPerStageDescriptorStorageImages: uint32_t = 1048576

            maxPerStageDescriptorInputAttachments: uint32_t = 1048576

            maxPerStageResources:           uint32_t = 4294967295

            maxDescriptorSetSamplers:       uint32_t = 1048576

            maxDescriptorSetUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15

            maxDescriptorSetStorageBuffers: uint32_t = 1048576

            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetSampledImages:  uint32_t = 1048576

            maxDescriptorSetStorageImages:  uint32_t = 1048576

            maxDescriptorSetInputAttachments: uint32_t = 1048576

            maxVertexInputAttributes:       uint32_t = 32

            maxVertexInputBindings:         uint32_t = 32

            maxVertexInputAttributeOffset:  uint32_t = 2047

            maxVertexInputBindingStride:    uint32_t = 2048

            maxVertexOutputComponents:      uint32_t = 128

            maxTessellationGenerationLevel: uint32_t = 64

            maxTessellationPatchSize:       uint32_t = 32

            maxTessellationControlPerVertexInputComponents: uint32_t = 128

            maxTessellationControlPerVertexOutputComponents: uint32_t = 128

            maxTessellationControlPerPatchOutputComponents: uint32_t = 120

            maxTessellationControlTotalOutputComponents: uint32_t = 4216

            maxTessellationEvaluationInputComponents: uint32_t = 128

            maxTessellationEvaluationOutputComponents: uint32_t = 128

            maxGeometryShaderInvocations:   uint32_t = 32

            maxGeometryInputComponents:     uint32_t = 128

            maxGeometryOutputComponents:    uint32_t = 128

            maxGeometryOutputVertices:      uint32_t = 1024

            maxGeometryTotalOutputComponents: uint32_t = 1024

            maxFragmentInputComponents:     uint32_t = 128

            maxFragmentOutputAttachments:   uint32_t = 8

            maxFragmentDualSrcAttachments:  uint32_t = 1

            maxFragmentCombinedOutputResources: uint32_t = 4294967295

            maxComputeSharedMemorySize:     uint32_t = 49152

            maxComputeWorkGroupCount:       uint32_t[3] = 0000002FCC4E9CCC

                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647

                maxComputeWorkGroupCount[1]:    uint32_t = 65535

                maxComputeWorkGroupCount[2]:    uint32_t = 65535

            maxComputeWorkGroupInvocations: uint32_t = 1024

            maxComputeWorkGroupSize:        uint32_t[3] = 0000002FCC4E9CDC

                maxComputeWorkGroupSize[0]:     uint32_t = 1024

                maxComputeWorkGroupSize[1]:     uint32_t = 1024

                maxComputeWorkGroupSize[2]:     uint32_t = 64

            subPixelPrecisionBits:          uint32_t = 8

            subTexelPrecisionBits:          uint32_t = 8

            mipmapPrecisionBits:            uint32_t = 8

            maxDrawIndexedIndexValue:       uint32_t = 4294967295

            maxDrawIndirectCount:           uint32_t = 4294967295

            maxSamplerLodBias:              float = 15

            maxSamplerAnisotropy:           float = 16

            maxViewports:                   uint32_t = 16

            maxViewportDimensions:          uint32_t[2] = 0000002FCC4E9D08

                maxViewportDimensions[0]:       uint32_t = 32768

                maxViewportDimensions[1]:       uint32_t = 32768

            viewportBoundsRange:            float[2] = 0000002FCC4E9D10

                viewportBoundsRange[0]:         float = -65536

                viewportBoundsRange[1]:         float = 65536

            viewportSubPixelBits:           uint32_t = 8

            minMemoryMapAlignment:          size_t = 64

            minTexelBufferOffsetAlignment:  VkDeviceSize = 16

            minUniformBufferOffsetAlignment: VkDeviceSize = 64

            minStorageBufferOffsetAlignment: VkDeviceSize = 16

            minTexelOffset:                 int32_t = -8

            maxTexelOffset:                 uint32_t = 7

            minTexelGatherOffset:           int32_t = -32

            maxTexelGatherOffset:           uint32_t = 31

            minInterpolationOffset:         float = -0.5

            maxInterpolationOffset:         float = 0.4375

            subPixelInterpolationOffsetBits: uint32_t = 4

            maxFramebufferWidth:            uint32_t = 32768

            maxFramebufferHeight:           uint32_t = 32768

            maxFramebufferLayers:           uint32_t = 2048

            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxColorAttachments:            uint32_t = 8

            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            maxSampleMaskWords:             uint32_t = 1

            timestampComputeAndGraphics:    VkBool32 = 1

            timestampPeriod:                float = 1

            maxClipDistances:               uint32_t = 8

            maxCullDistances:               uint32_t = 8

            maxCombinedClipAndCullDistances: uint32_t = 8

            discreteQueuePriorities:        uint32_t = 2

            pointSizeRange:                 float[2] = 0000002FCC4E9DAC

                pointSizeRange[0]:              float = 1

                pointSizeRange[1]:              float = 2047.94

            lineWidthRange:                 float[2] = 0000002FCC4E9DB4

                lineWidthRange[0]:              float = 1

                lineWidthRange[1]:              float = 64

            pointSizeGranularity:           float = 0.0625

            lineWidthGranularity:           float = 0.0625

            strictLines:                    VkBool32 = 1

            standardSampleLocations:        VkBool32 = 1

            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1

            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1

            nonCoherentAtomSize:            VkDeviceSize = 64

        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000002FCC4E9DE8:

            residencyStandard2DBlockShape:  VkBool32 = 1

            residencyStandard2DMultisampleBlockShape: VkBool32 = 1

            residencyStandard3DBlockShape:  VkBool32 = 1

            residencyAlignedMipSize:        VkBool32 = 0

            residencyNonResidentStrict:     VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pProperties:                    VkPhysicalDeviceProperties2* = 0000002FCC4EDC30:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)

        pNext:                          void* = VkPhysicalDeviceDriverProperties

        properties:                     VkPhysicalDeviceProperties = 0000002FCC4EDC40:

            apiVersion:                     uint32_t = 4206834

            driverVersion:                  uint32_t = 2252898304

            vendorID:                       uint32_t = 4318

            deviceID:                       uint32_t = 9479

            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)

            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"

            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000002FCC4EDD54

                pipelineCacheUUID[0]:           uint8_t = 218

                pipelineCacheUUID[1]:           uint8_t = 176

                pipelineCacheUUID[2]:           uint8_t = 31

                pipelineCacheUUID[3]:           uint8_t = 61

                pipelineCacheUUID[4]:           uint8_t = 103

                pipelineCacheUUID[5]:           uint8_t = 121

                pipelineCacheUUID[6]:           uint8_t = 168

                pipelineCacheUUID[7]:           uint8_t = 246

                pipelineCacheUUID[8]:           uint8_t = 179

                pipelineCacheUUID[9]:           uint8_t = 114

                pipelineCacheUUID[10]:          uint8_t = 172

                pipelineCacheUUID[11]:          uint8_t = 249

                pipelineCacheUUID[12]:          uint8_t = 185

                pipelineCacheUUID[13]:          uint8_t = 210

                pipelineCacheUUID[14]:          uint8_t = 68

                pipelineCacheUUID[15]:          uint8_t = 21

            limits:                         VkPhysicalDeviceLimits = 0000002FCC4EDD68:

                maxImageDimension1D:            uint32_t = 32768

                maxImageDimension2D:            uint32_t = 32768

                maxImageDimension3D:            uint32_t = 16384

                maxImageDimensionCube:          uint32_t = 32768

                maxImageArrayLayers:            uint32_t = 2048

                maxTexelBufferElements:         uint32_t = 134217728

                maxUniformBufferRange:          uint32_t = 65536

                maxStorageBufferRange:          uint32_t = 4294967295

                maxPushConstantsSize:           uint32_t = 256

                maxMemoryAllocationCount:       uint32_t = 4096

                maxSamplerAllocationCount:      uint32_t = 4000

                bufferImageGranularity:         VkDeviceSize = 1024

                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775

                maxBoundDescriptorSets:         uint32_t = 32

                maxPerStageDescriptorSamplers:  uint32_t = 1048576

                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576

                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576

                maxPerStageDescriptorSampledImages: uint32_t = 1048576

                maxPerStageDescriptorStorageImages: uint32_t = 1048576

                maxPerStageDescriptorInputAttachments: uint32_t = 1048576

                maxPerStageResources:           uint32_t = 4294967295

                maxDescriptorSetSamplers:       uint32_t = 1048576

                maxDescriptorSetUniformBuffers: uint32_t = 1048576

                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15

                maxDescriptorSetStorageBuffers: uint32_t = 1048576

                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

                maxDescriptorSetSampledImages:  uint32_t = 1048576

                maxDescriptorSetStorageImages:  uint32_t = 1048576

                maxDescriptorSetInputAttachments: uint32_t = 1048576

                maxVertexInputAttributes:       uint32_t = 32

                maxVertexInputBindings:         uint32_t = 32

                maxVertexInputAttributeOffset:  uint32_t = 2047

                maxVertexInputBindingStride:    uint32_t = 2048

                maxVertexOutputComponents:      uint32_t = 128

                maxTessellationGenerationLevel: uint32_t = 64

                maxTessellationPatchSize:       uint32_t = 32

                maxTessellationControlPerVertexInputComponents: uint32_t = 128

                maxTessellationControlPerVertexOutputComponents: uint32_t = 128

                maxTessellationControlPerPatchOutputComponents: uint32_t = 120

                maxTessellationControlTotalOutputComponents: uint32_t = 4216

                maxTessellationEvaluationInputComponents: uint32_t = 128

                maxTessellationEvaluationOutputComponents: uint32_t = 128

                maxGeometryShaderInvocations:   uint32_t = 32

                maxGeometryInputComponents:     uint32_t = 128

                maxGeometryOutputComponents:    uint32_t = 128

                maxGeometryOutputVertices:      uint32_t = 1024

                maxGeometryTotalOutputComponents: uint32_t = 1024

                maxFragmentInputComponents:     uint32_t = 128

                maxFragmentOutputAttachments:   uint32_t = 8

                maxFragmentDualSrcAttachments:  uint32_t = 1

                maxFragmentCombinedOutputResources: uint32_t = 4294967295

                maxComputeSharedMemorySize:     uint32_t = 49152

                maxComputeWorkGroupCount:       uint32_t[3] = 0000002FCC4EDE44

                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647

                    maxComputeWorkGroupCount[1]:    uint32_t = 65535

                    maxComputeWorkGroupCount[2]:    uint32_t = 65535

                maxComputeWorkGroupInvocations: uint32_t = 1024

                maxComputeWorkGroupSize:        uint32_t[3] = 0000002FCC4EDE54

                    maxComputeWorkGroupSize[0]:     uint32_t = 1024

                    maxComputeWorkGroupSize[1]:     uint32_t = 1024

                    maxComputeWorkGroupSize[2]:     uint32_t = 64

                subPixelPrecisionBits:          uint32_t = 8

                subTexelPrecisionBits:          uint32_t = 8

                mipmapPrecisionBits:            uint32_t = 8

                maxDrawIndexedIndexValue:       uint32_t = 4294967295

                maxDrawIndirectCount:           uint32_t = 4294967295

                maxSamplerLodBias:              float = 15

                maxSamplerAnisotropy:           float = 16

                maxViewports:                   uint32_t = 16

                maxViewportDimensions:          uint32_t[2] = 0000002FCC4EDE80

                    maxViewportDimensions[0]:       uint32_t = 32768

                    maxViewportDimensions[1]:       uint32_t = 32768

                viewportBoundsRange:            float[2] = 0000002FCC4EDE88

                    viewportBoundsRange[0]:         float = -65536

                    viewportBoundsRange[1]:         float = 65536

                viewportSubPixelBits:           uint32_t = 8

                minMemoryMapAlignment:          size_t = 64

                minTexelBufferOffsetAlignment:  VkDeviceSize = 16

                minUniformBufferOffsetAlignment: VkDeviceSize = 64

                minStorageBufferOffsetAlignment: VkDeviceSize = 16

                minTexelOffset:                 int32_t = -8

                maxTexelOffset:                 uint32_t = 7

                minTexelGatherOffset:           int32_t = -32

                maxTexelGatherOffset:           uint32_t = 31

                minInterpolationOffset:         float = -0.5

                maxInterpolationOffset:         float = 0.4375

                subPixelInterpolationOffsetBits: uint32_t = 4

                maxFramebufferWidth:            uint32_t = 32768

                maxFramebufferHeight:           uint32_t = 32768

                maxFramebufferLayers:           uint32_t = 2048

                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                maxColorAttachments:            uint32_t = 8

                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                maxSampleMaskWords:             uint32_t = 1

                timestampComputeAndGraphics:    VkBool32 = 1

                timestampPeriod:                float = 1

                maxClipDistances:               uint32_t = 8

                maxCullDistances:               uint32_t = 8

                maxCombinedClipAndCullDistances: uint32_t = 8

                discreteQueuePriorities:        uint32_t = 2

                pointSizeRange:                 float[2] = 0000002FCC4EDF24

                    pointSizeRange[0]:              float = 1

                    pointSizeRange[1]:              float = 2047.94

                lineWidthRange:                 float[2] = 0000002FCC4EDF2C

                    lineWidthRange[0]:              float = 1

                    lineWidthRange[1]:              float = 64

                pointSizeGranularity:           float = 0.0625

                lineWidthGranularity:           float = 0.0625

                strictLines:                    VkBool32 = 1

                standardSampleLocations:        VkBool32 = 1

                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1

                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1

                nonCoherentAtomSize:            VkDeviceSize = 64

            sparseProperties:               VkPhysicalDeviceSparseProperties = 0000002FCC4EDF60:

                residencyStandard2DBlockShape:  VkBool32 = 1

                residencyStandard2DMultisampleBlockShape: VkBool32 = 1

                residencyStandard3DBlockShape:  VkBool32 = 1

                residencyAlignedMipSize:        VkBool32 = 0

                residencyNonResidentStrict:     VkBool32 = 1

        pNext:                          VkPhysicalDeviceDriverProperties = 0000002FCC4EB2B0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)

            pNext:                          void* = VkPhysicalDeviceAccelerationStructurePropertiesKHR

            driverID:                       VkDriverId = VK_DRIVER_ID_NVIDIA_PROPRIETARY (4)

            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "NVIDIA"

            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "537.34"

            conformanceVersion:             VkConformanceVersion = 0000002FCC4EB4C4:

                major:                          uint8_t = 1

                minor:                          uint8_t = 3

                subminor:                       uint8_t = 5

                patch:                          uint8_t = 0

        pNext:                          VkPhysicalDeviceAccelerationStructurePropertiesKHR = 0000002FCC4EB268:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR (1000150014)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties

            maxGeometryCount:               uint64_t = 16777215

            maxInstanceCount:               uint64_t = 16777215

            maxPrimitiveCount:              uint64_t = 536870911

            maxPerStageDescriptorAccelerationStructures: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32_t = 1048576

            maxDescriptorSetAccelerationStructures: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32_t = 1048576

            minAccelerationStructureScratchOffsetAlignment: uint32_t = 128

        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 0000002FCC4EB1F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)

            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties

            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 4294967295

            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 1

            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 1

            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 1

            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 1

            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 1

            robustBufferAccessUpdateAfterBind: VkBool32 = 1

            quadDivergentImplicitLod:       VkBool32 = 1

            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576

            maxPerStageUpdateAfterBindResources: uint32_t = 4294967295

            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 15

            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576

        pNext:                          VkPhysicalDeviceMaintenance3Properties = 0000002FCC4EB1C8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)

            pNext:                          void* = NULL

            maxPerSetDescriptors:           uint32_t = 4294967295

            maxMemoryAllocationSize:        VkDeviceSize = 4292870144



Thread 0, Frame 0:

vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pFeatures:                      VkPhysicalDeviceFeatures2* = 0000002FCC4F0810:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)

        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

        features:                       VkPhysicalDeviceFeatures = 0000002FCC4F0820:

            robustBufferAccess:             VkBool32 = 1

            fullDrawIndexUint32:            VkBool32 = 1

            imageCubeArray:                 VkBool32 = 1

            independentBlend:               VkBool32 = 1

            geometryShader:                 VkBool32 = 1

            tessellationShader:             VkBool32 = 1

            sampleRateShading:              VkBool32 = 1

            dualSrcBlend:                   VkBool32 = 1

            logicOp:                        VkBool32 = 1

            multiDrawIndirect:              VkBool32 = 1

            drawIndirectFirstInstance:      VkBool32 = 1

            depthClamp:                     VkBool32 = 1

            depthBiasClamp:                 VkBool32 = 1

            fillModeNonSolid:               VkBool32 = 1

            depthBounds:                    VkBool32 = 1

            wideLines:                      VkBool32 = 1

            largePoints:                    VkBool32 = 1

            alphaToOne:                     VkBool32 = 1

            multiViewport:                  VkBool32 = 1

            samplerAnisotropy:              VkBool32 = 1

            textureCompressionETC2:         VkBool32 = 0

            textureCompressionASTC_LDR:     VkBool32 = 0

            textureCompressionBC:           VkBool32 = 1

            occlusionQueryPrecise:          VkBool32 = 1

            pipelineStatisticsQuery:        VkBool32 = 1

            vertexPipelineStoresAndAtomics: VkBool32 = 1

            fragmentStoresAndAtomics:       VkBool32 = 1

            shaderTessellationAndGeometryPointSize: VkBool32 = 1

            shaderImageGatherExtended:      VkBool32 = 1

            shaderStorageImageExtendedFormats: VkBool32 = 1

            shaderStorageImageMultisample:  VkBool32 = 1

            shaderStorageImageReadWithoutFormat: VkBool32 = 1

            shaderStorageImageWriteWithoutFormat: VkBool32 = 1

            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1

            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1

            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1

            shaderClipDistance:             VkBool32 = 1

            shaderCullDistance:             VkBool32 = 1

            shaderFloat64:                  VkBool32 = 1

            shaderInt64:                    VkBool32 = 1

            shaderInt16:                    VkBool32 = 1

            shaderResourceResidency:        VkBool32 = 1

            shaderResourceMinLod:           VkBool32 = 1

            sparseBinding:                  VkBool32 = 1

            sparseResidencyBuffer:          VkBool32 = 1

            sparseResidencyImage2D:         VkBool32 = 1

            sparseResidencyImage3D:         VkBool32 = 1

            sparseResidency2Samples:        VkBool32 = 1

            sparseResidency4Samples:        VkBool32 = 1

            sparseResidency8Samples:        VkBool32 = 1

            sparseResidency16Samples:       VkBool32 = 1

            sparseResidencyAliased:         VkBool32 = 1

            variableMultisampleRate:        VkBool32 = 1

            inheritedQueries:               VkBool32 = 1

        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 0000002FCC4EEA30:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)

            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR

            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1

        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 0000002FCC4EE9B8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)

            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures

            accelerationStructure:          VkBool32 = 1

            accelerationStructureCaptureReplay: VkBool32 = 1

            accelerationStructureIndirectBuild: VkBool32 = 0

            accelerationStructureHostCommands: VkBool32 = 0

            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 1

        pNext:                          VkPhysicalDevice16BitStorageFeatures = 0000002FCC4EE990:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)

            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features

            storageBuffer16BitAccess:       VkBool32 = 1

            uniformAndStorageBuffer16BitAccess: VkBool32 = 1

            storagePushConstant16:          VkBool32 = 1

            storageInputOutput16:           VkBool32 = 0

        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 0000002FCC4EE978:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)

            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT

            shaderFloat16:                  VkBool32 = 1

            shaderInt8:                     VkBool32 = 1

        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 0000002FCC4EE8E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)

            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures

            robustBufferAccess2:            VkBool32 = 1

            robustImageAccess2:             VkBool32 = 1

            nullDescriptor:                 VkBool32 = 1

        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 0000002FCC4EE8C8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)

            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures

            robustImageAccess:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 0000002FCC4EE8A8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)

            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures

            timelineSemaphore:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 0000002FCC4EE888:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures

            imagelessFramebuffer:           VkBool32 = 1

        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 0000002FCC4EE820:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)

            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures

            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1

            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1

            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 1

            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1

            descriptorBindingPartiallyBound: VkBool32 = 1

            descriptorBindingVariableDescriptorCount: VkBool32 = 1

            runtimeDescriptorArray:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 0000002FCC4EE938:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)

            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures

            samplerYcbcrConversion:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceMultiviewFeatures = 0000002FCC4EE910:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)

            pNext:                          void* = NULL

            multiview:                      VkBool32 = 1

            multiviewGeometryShader:        VkBool32 = 1

            multiviewTessellationShader:    VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0EE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

    pFormatProperties:              VkFormatProperties2* = 0000002FCC4F0F68:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)

        pNext:                          void* = VkFormatProperties3

        formatProperties:               VkFormatProperties = 0000002FCC4F0F78:

            linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

        pNext:                          VkFormatProperties3 = 0000002FCC4F0F40:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)

            pNext:                          void* = NULL

            linearTilingFeatures:           VkFormatFeatureFlags2 = 281320477699 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)

            optimalTilingFeatures:          VkFormatFeatureFlags2 = 1105954200963 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV)

            bufferFeatures:                 VkFormatFeatureFlags2 = 6442451032 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 119815 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122247 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 120 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0E78:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F0EE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pQueueFamilyPropertyCount:      uint32_t* = 5

    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pQueueFamilyPropertyCount:      uint32_t* = 5

    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000002244A8CF9E0

        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000002244A8CF9E0:

            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 16

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000002244A8CF9EC:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000002244A8CF9F8:

            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 2

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000002244A8CFA04:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000002244A8CFA10:

            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 8

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000002244A8CFA1C:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000002244A8CFA28:

            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)

            queueCount:                     uint32_t = 1

            timestampValidBits:             uint32_t = 32

            minImageTransferGranularity:    VkExtent3D = 000002244A8CFA34:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000002244A8CFA40:

            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)

            queueCount:                     uint32_t = 1

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000002244A8CFA4C:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F1328:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F1328:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4F1328:

        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    pProperties:                    VkPhysicalDeviceProperties* = 0000002FCC4E82F8:

        apiVersion:                     uint32_t = 4206842

        driverVersion:                  uint32_t = 1659361

        vendorID:                       uint32_t = 32902

        deviceID:                       uint32_t = 18048

        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)

        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"

        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000002FCC4E840C

            pipelineCacheUUID[0]:           uint8_t = 208

            pipelineCacheUUID[1]:           uint8_t = 41

            pipelineCacheUUID[2]:           uint8_t = 212

            pipelineCacheUUID[3]:           uint8_t = 41

            pipelineCacheUUID[4]:           uint8_t = 214

            pipelineCacheUUID[5]:           uint8_t = 39

            pipelineCacheUUID[6]:           uint8_t = 231

            pipelineCacheUUID[7]:           uint8_t = 43

            pipelineCacheUUID[8]:           uint8_t = 216

            pipelineCacheUUID[9]:           uint8_t = 38

            pipelineCacheUUID[10]:          uint8_t = 219

            pipelineCacheUUID[11]:          uint8_t = 40

            pipelineCacheUUID[12]:          uint8_t = 220

            pipelineCacheUUID[13]:          uint8_t = 44

            pipelineCacheUUID[14]:          uint8_t = 222

            pipelineCacheUUID[15]:          uint8_t = 29

        limits:                         VkPhysicalDeviceLimits = 0000002FCC4E8420:

            maxImageDimension1D:            uint32_t = 16384

            maxImageDimension2D:            uint32_t = 16384

            maxImageDimension3D:            uint32_t = 2048

            maxImageDimensionCube:          uint32_t = 16384

            maxImageArrayLayers:            uint32_t = 2048

            maxTexelBufferElements:         uint32_t = 134217728

            maxUniformBufferRange:          uint32_t = 134217724

            maxStorageBufferRange:          uint32_t = 1073741820

            maxPushConstantsSize:           uint32_t = 256

            maxMemoryAllocationCount:       uint32_t = 4197384

            maxSamplerAllocationCount:      uint32_t = 4000

            bufferImageGranularity:         VkDeviceSize = 1

            sparseAddressSpaceSize:         VkDeviceSize = 17523466567680

            maxBoundDescriptorSets:         uint32_t = 32

            maxPerStageDescriptorSamplers:  uint32_t = 64

            maxPerStageDescriptorUniformBuffers: uint32_t = 200

            maxPerStageDescriptorStorageBuffers: uint32_t = 200

            maxPerStageDescriptorSampledImages: uint32_t = 200

            maxPerStageDescriptorStorageImages: uint32_t = 16

            maxPerStageDescriptorInputAttachments: uint32_t = 7

            maxPerStageResources:           uint32_t = 200

            maxDescriptorSetSamplers:       uint32_t = 576

            maxDescriptorSetUniformBuffers: uint32_t = 1800

            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16

            maxDescriptorSetStorageBuffers: uint32_t = 1800

            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetSampledImages:  uint32_t = 1800

            maxDescriptorSetStorageImages:  uint32_t = 144

            maxDescriptorSetInputAttachments: uint32_t = 7

            maxVertexInputAttributes:       uint32_t = 32

            maxVertexInputBindings:         uint32_t = 32

            maxVertexInputAttributeOffset:  uint32_t = 2047

            maxVertexInputBindingStride:    uint32_t = 4095

            maxVertexOutputComponents:      uint32_t = 128

            maxTessellationGenerationLevel: uint32_t = 64

            maxTessellationPatchSize:       uint32_t = 32

            maxTessellationControlPerVertexInputComponents: uint32_t = 128

            maxTessellationControlPerVertexOutputComponents: uint32_t = 128

            maxTessellationControlPerPatchOutputComponents: uint32_t = 120

            maxTessellationControlTotalOutputComponents: uint32_t = 4096

            maxTessellationEvaluationInputComponents: uint32_t = 128

            maxTessellationEvaluationOutputComponents: uint32_t = 128

            maxGeometryShaderInvocations:   uint32_t = 32

            maxGeometryInputComponents:     uint32_t = 128

            maxGeometryOutputComponents:    uint32_t = 128

            maxGeometryOutputVertices:      uint32_t = 256

            maxGeometryTotalOutputComponents: uint32_t = 1024

            maxFragmentInputComponents:     uint32_t = 128

            maxFragmentOutputAttachments:   uint32_t = 8

            maxFragmentDualSrcAttachments:  uint32_t = 1

            maxFragmentCombinedOutputResources: uint32_t = 208

            maxComputeSharedMemorySize:     uint32_t = 32768

            maxComputeWorkGroupCount:       uint32_t[3] = 0000002FCC4E84FC

                maxComputeWorkGroupCount[0]:    uint32_t = 65536

                maxComputeWorkGroupCount[1]:    uint32_t = 65536

                maxComputeWorkGroupCount[2]:    uint32_t = 65536

            maxComputeWorkGroupInvocations: uint32_t = 1024

            maxComputeWorkGroupSize:        uint32_t[3] = 0000002FCC4E850C

                maxComputeWorkGroupSize[0]:     uint32_t = 1024

                maxComputeWorkGroupSize[1]:     uint32_t = 1024

                maxComputeWorkGroupSize[2]:     uint32_t = 64

            subPixelPrecisionBits:          uint32_t = 8

            subTexelPrecisionBits:          uint32_t = 8

            mipmapPrecisionBits:            uint32_t = 8

            maxDrawIndexedIndexValue:       uint32_t = 4294967295

            maxDrawIndirectCount:           uint32_t = 4294967295

            maxSamplerLodBias:              float = 16

            maxSamplerAnisotropy:           float = 16

            maxViewports:                   uint32_t = 16

            maxViewportDimensions:          uint32_t[2] = 0000002FCC4E8538

                maxViewportDimensions[0]:       uint32_t = 32768

                maxViewportDimensions[1]:       uint32_t = 32768

            viewportBoundsRange:            float[2] = 0000002FCC4E8540

                viewportBoundsRange[0]:         float = -65536

                viewportBoundsRange[1]:         float = 65535

            viewportSubPixelBits:           uint32_t = 8

            minMemoryMapAlignment:          size_t = 64

            minTexelBufferOffsetAlignment:  VkDeviceSize = 64

            minUniformBufferOffsetAlignment: VkDeviceSize = 64

            minStorageBufferOffsetAlignment: VkDeviceSize = 64

            minTexelOffset:                 int32_t = -8

            maxTexelOffset:                 uint32_t = 7

            minTexelGatherOffset:           int32_t = -32

            maxTexelGatherOffset:           uint32_t = 31

            minInterpolationOffset:         float = -0.5

            maxInterpolationOffset:         float = 0.4375

            subPixelInterpolationOffsetBits: uint32_t = 4

            maxFramebufferWidth:            uint32_t = 16384

            maxFramebufferHeight:           uint32_t = 16384

            maxFramebufferLayers:           uint32_t = 2048

            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxColorAttachments:            uint32_t = 8

            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxSampleMaskWords:             uint32_t = 1

            timestampComputeAndGraphics:    VkBool32 = 1

            timestampPeriod:                float = 52.0833

            maxClipDistances:               uint32_t = 8

            maxCullDistances:               uint32_t = 8

            maxCombinedClipAndCullDistances: uint32_t = 8

            discreteQueuePriorities:        uint32_t = 2

            pointSizeRange:                 float[2] = 0000002FCC4E85DC

                pointSizeRange[0]:              float = 0.125

                pointSizeRange[1]:              float = 255.875

            lineWidthRange:                 float[2] = 0000002FCC4E85E4

                lineWidthRange[0]:              float = 0

                lineWidthRange[1]:              float = 7.99219

            pointSizeGranularity:           float = 0.125

            lineWidthGranularity:           float = 0.0078125

            strictLines:                    VkBool32 = 0

            standardSampleLocations:        VkBool32 = 1

            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64

            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64

            nonCoherentAtomSize:            VkDeviceSize = 1

        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000002FCC4E8618:

            residencyStandard2DBlockShape:  VkBool32 = 1

            residencyStandard2DMultisampleBlockShape: VkBool32 = 1

            residencyStandard3DBlockShape:  VkBool32 = 1

            residencyAlignedMipSize:        VkBool32 = 0

            residencyNonResidentStrict:     VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    pProperties:                    VkPhysicalDeviceProperties2* = 0000002FCC4EC460:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)

        pNext:                          void* = VkPhysicalDeviceDriverProperties

        properties:                     VkPhysicalDeviceProperties = 0000002FCC4EC470:

            apiVersion:                     uint32_t = 4206842

            driverVersion:                  uint32_t = 1659361

            vendorID:                       uint32_t = 32902

            deviceID:                       uint32_t = 18048

            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)

            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"

            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000002FCC4EC584

                pipelineCacheUUID[0]:           uint8_t = 208

                pipelineCacheUUID[1]:           uint8_t = 41

                pipelineCacheUUID[2]:           uint8_t = 212

                pipelineCacheUUID[3]:           uint8_t = 41

                pipelineCacheUUID[4]:           uint8_t = 214

                pipelineCacheUUID[5]:           uint8_t = 39

                pipelineCacheUUID[6]:           uint8_t = 231

                pipelineCacheUUID[7]:           uint8_t = 43

                pipelineCacheUUID[8]:           uint8_t = 216

                pipelineCacheUUID[9]:           uint8_t = 38

                pipelineCacheUUID[10]:          uint8_t = 219

                pipelineCacheUUID[11]:          uint8_t = 40

                pipelineCacheUUID[12]:          uint8_t = 220

                pipelineCacheUUID[13]:          uint8_t = 44

                pipelineCacheUUID[14]:          uint8_t = 222

                pipelineCacheUUID[15]:          uint8_t = 29

            limits:                         VkPhysicalDeviceLimits = 0000002FCC4EC598:

                maxImageDimension1D:            uint32_t = 16384

                maxImageDimension2D:            uint32_t = 16384

                maxImageDimension3D:            uint32_t = 2048

                maxImageDimensionCube:          uint32_t = 16384

                maxImageArrayLayers:            uint32_t = 2048

                maxTexelBufferElements:         uint32_t = 134217728

                maxUniformBufferRange:          uint32_t = 134217724

                maxStorageBufferRange:          uint32_t = 1073741820

                maxPushConstantsSize:           uint32_t = 256

                maxMemoryAllocationCount:       uint32_t = 4197384

                maxSamplerAllocationCount:      uint32_t = 4000

                bufferImageGranularity:         VkDeviceSize = 1

                sparseAddressSpaceSize:         VkDeviceSize = 17523466567680

                maxBoundDescriptorSets:         uint32_t = 32

                maxPerStageDescriptorSamplers:  uint32_t = 64

                maxPerStageDescriptorUniformBuffers: uint32_t = 200

                maxPerStageDescriptorStorageBuffers: uint32_t = 200

                maxPerStageDescriptorSampledImages: uint32_t = 200

                maxPerStageDescriptorStorageImages: uint32_t = 16

                maxPerStageDescriptorInputAttachments: uint32_t = 7

                maxPerStageResources:           uint32_t = 200

                maxDescriptorSetSamplers:       uint32_t = 576

                maxDescriptorSetUniformBuffers: uint32_t = 1800

                maxDescriptorSetUniformBuffersDynamic: uint32_t = 16

                maxDescriptorSetStorageBuffers: uint32_t = 1800

                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

                maxDescriptorSetSampledImages:  uint32_t = 1800

                maxDescriptorSetStorageImages:  uint32_t = 144

                maxDescriptorSetInputAttachments: uint32_t = 7

                maxVertexInputAttributes:       uint32_t = 32

                maxVertexInputBindings:         uint32_t = 32

                maxVertexInputAttributeOffset:  uint32_t = 2047

                maxVertexInputBindingStride:    uint32_t = 4095

                maxVertexOutputComponents:      uint32_t = 128

                maxTessellationGenerationLevel: uint32_t = 64

                maxTessellationPatchSize:       uint32_t = 32

                maxTessellationControlPerVertexInputComponents: uint32_t = 128

                maxTessellationControlPerVertexOutputComponents: uint32_t = 128

                maxTessellationControlPerPatchOutputComponents: uint32_t = 120

                maxTessellationControlTotalOutputComponents: uint32_t = 4096

                maxTessellationEvaluationInputComponents: uint32_t = 128

                maxTessellationEvaluationOutputComponents: uint32_t = 128

                maxGeometryShaderInvocations:   uint32_t = 32

                maxGeometryInputComponents:     uint32_t = 128

                maxGeometryOutputComponents:    uint32_t = 128

                maxGeometryOutputVertices:      uint32_t = 256

                maxGeometryTotalOutputComponents: uint32_t = 1024

                maxFragmentInputComponents:     uint32_t = 128

                maxFragmentOutputAttachments:   uint32_t = 8

                maxFragmentDualSrcAttachments:  uint32_t = 1

                maxFragmentCombinedOutputResources: uint32_t = 208

                maxComputeSharedMemorySize:     uint32_t = 32768

                maxComputeWorkGroupCount:       uint32_t[3] = 0000002FCC4EC674

                    maxComputeWorkGroupCount[0]:    uint32_t = 65536

                    maxComputeWorkGroupCount[1]:    uint32_t = 65536

                    maxComputeWorkGroupCount[2]:    uint32_t = 65536

                maxComputeWorkGroupInvocations: uint32_t = 1024

                maxComputeWorkGroupSize:        uint32_t[3] = 0000002FCC4EC684

                    maxComputeWorkGroupSize[0]:     uint32_t = 1024

                    maxComputeWorkGroupSize[1]:     uint32_t = 1024

                    maxComputeWorkGroupSize[2]:     uint32_t = 64

                subPixelPrecisionBits:          uint32_t = 8

                subTexelPrecisionBits:          uint32_t = 8

                mipmapPrecisionBits:            uint32_t = 8

                maxDrawIndexedIndexValue:       uint32_t = 4294967295

                maxDrawIndirectCount:           uint32_t = 4294967295

                maxSamplerLodBias:              float = 16

                maxSamplerAnisotropy:           float = 16

                maxViewports:                   uint32_t = 16

                maxViewportDimensions:          uint32_t[2] = 0000002FCC4EC6B0

                    maxViewportDimensions[0]:       uint32_t = 32768

                    maxViewportDimensions[1]:       uint32_t = 32768

                viewportBoundsRange:            float[2] = 0000002FCC4EC6B8

                    viewportBoundsRange[0]:         float = -65536

                    viewportBoundsRange[1]:         float = 65535

                viewportSubPixelBits:           uint32_t = 8

                minMemoryMapAlignment:          size_t = 64

                minTexelBufferOffsetAlignment:  VkDeviceSize = 64

                minUniformBufferOffsetAlignment: VkDeviceSize = 64

                minStorageBufferOffsetAlignment: VkDeviceSize = 64

                minTexelOffset:                 int32_t = -8

                maxTexelOffset:                 uint32_t = 7

                minTexelGatherOffset:           int32_t = -32

                maxTexelGatherOffset:           uint32_t = 31

                minInterpolationOffset:         float = -0.5

                maxInterpolationOffset:         float = 0.4375

                subPixelInterpolationOffsetBits: uint32_t = 4

                maxFramebufferWidth:            uint32_t = 16384

                maxFramebufferHeight:           uint32_t = 16384

                maxFramebufferLayers:           uint32_t = 2048

                framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                maxColorAttachments:            uint32_t = 8

                sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                maxSampleMaskWords:             uint32_t = 1

                timestampComputeAndGraphics:    VkBool32 = 1

                timestampPeriod:                float = 52.0833

                maxClipDistances:               uint32_t = 8

                maxCullDistances:               uint32_t = 8

                maxCombinedClipAndCullDistances: uint32_t = 8

                discreteQueuePriorities:        uint32_t = 2

                pointSizeRange:                 float[2] = 0000002FCC4EC754

                    pointSizeRange[0]:              float = 0.125

                    pointSizeRange[1]:              float = 255.875

                lineWidthRange:                 float[2] = 0000002FCC4EC75C

                    lineWidthRange[0]:              float = 0

                    lineWidthRange[1]:              float = 7.99219

                pointSizeGranularity:           float = 0.125

                lineWidthGranularity:           float = 0.0078125

                strictLines:                    VkBool32 = 0

                standardSampleLocations:        VkBool32 = 1

                optimalBufferCopyOffsetAlignment: VkDeviceSize = 64

                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64

                nonCoherentAtomSize:            VkDeviceSize = 1

            sparseProperties:               VkPhysicalDeviceSparseProperties = 0000002FCC4EC790:

                residencyStandard2DBlockShape:  VkBool32 = 1

                residencyStandard2DMultisampleBlockShape: VkBool32 = 1

                residencyStandard3DBlockShape:  VkBool32 = 1

                residencyAlignedMipSize:        VkBool32 = 0

                residencyNonResidentStrict:     VkBool32 = 1

        pNext:                          VkPhysicalDeviceDriverProperties = 0000002FCC4E9AE0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties

            driverID:                       VkDriverId = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS (5)

            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "Intel Corporation"

            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "Intel driver"

            conformanceVersion:             VkConformanceVersion = 0000002FCC4E9CF4:

                major:                          uint8_t = 1

                minor:                          uint8_t = 3

                subminor:                       uint8_t = 5

                patch:                          uint8_t = 0

        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 0000002FCC4E9A20:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)

            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties

            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 1048576

            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 0

            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 0

            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 0

            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 0

            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 0

            robustBufferAccessUpdateAfterBind: VkBool32 = 1

            quadDivergentImplicitLod:       VkBool32 = 1

            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576

            maxPerStageUpdateAfterBindResources: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 16

            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576

        pNext:                          VkPhysicalDeviceMaintenance3Properties = 0000002FCC4E99F8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)

            pNext:                          void* = NULL

            maxPerSetDescriptors:           uint32_t = 6159

            maxMemoryAllocationSize:        VkDeviceSize = 17058269184



Thread 0, Frame 0:

vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    pFeatures:                      VkPhysicalDeviceFeatures2* = 0000002FCC4EF040:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)

        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

        features:                       VkPhysicalDeviceFeatures = 0000002FCC4EF050:

            robustBufferAccess:             VkBool32 = 1

            fullDrawIndexUint32:            VkBool32 = 1

            imageCubeArray:                 VkBool32 = 1

            independentBlend:               VkBool32 = 1

            geometryShader:                 VkBool32 = 1

            tessellationShader:             VkBool32 = 1

            sampleRateShading:              VkBool32 = 1

            dualSrcBlend:                   VkBool32 = 1

            logicOp:                        VkBool32 = 1

            multiDrawIndirect:              VkBool32 = 1

            drawIndirectFirstInstance:      VkBool32 = 1

            depthClamp:                     VkBool32 = 1

            depthBiasClamp:                 VkBool32 = 1

            fillModeNonSolid:               VkBool32 = 1

            depthBounds:                    VkBool32 = 1

            wideLines:                      VkBool32 = 1

            largePoints:                    VkBool32 = 1

            alphaToOne:                     VkBool32 = 1

            multiViewport:                  VkBool32 = 1

            samplerAnisotropy:              VkBool32 = 1

            textureCompressionETC2:         VkBool32 = 1

            textureCompressionASTC_LDR:     VkBool32 = 1

            textureCompressionBC:           VkBool32 = 1

            occlusionQueryPrecise:          VkBool32 = 1

            pipelineStatisticsQuery:        VkBool32 = 1

            vertexPipelineStoresAndAtomics: VkBool32 = 1

            fragmentStoresAndAtomics:       VkBool32 = 1

            shaderTessellationAndGeometryPointSize: VkBool32 = 1

            shaderImageGatherExtended:      VkBool32 = 1

            shaderStorageImageExtendedFormats: VkBool32 = 1

            shaderStorageImageMultisample:  VkBool32 = 1

            shaderStorageImageReadWithoutFormat: VkBool32 = 0

            shaderStorageImageWriteWithoutFormat: VkBool32 = 1

            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1

            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1

            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1

            shaderClipDistance:             VkBool32 = 1

            shaderCullDistance:             VkBool32 = 1

            shaderFloat64:                  VkBool32 = 0

            shaderInt64:                    VkBool32 = 1

            shaderInt16:                    VkBool32 = 1

            shaderResourceResidency:        VkBool32 = 1

            shaderResourceMinLod:           VkBool32 = 0

            sparseBinding:                  VkBool32 = 1

            sparseResidencyBuffer:          VkBool32 = 1

            sparseResidencyImage2D:         VkBool32 = 1

            sparseResidencyImage3D:         VkBool32 = 1

            sparseResidency2Samples:        VkBool32 = 1

            sparseResidency4Samples:        VkBool32 = 1

            sparseResidency8Samples:        VkBool32 = 1

            sparseResidency16Samples:       VkBool32 = 1

            sparseResidencyAliased:         VkBool32 = 1

            variableMultisampleRate:        VkBool32 = 1

            inheritedQueries:               VkBool32 = 1

        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 0000002FCC4ED260:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)

            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures

            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1

        pNext:                          VkPhysicalDevice16BitStorageFeatures = 0000002FCC4ED1C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)

            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features

            storageBuffer16BitAccess:       VkBool32 = 1

            uniformAndStorageBuffer16BitAccess: VkBool32 = 1

            storagePushConstant16:          VkBool32 = 1

            storageInputOutput16:           VkBool32 = 1

        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 0000002FCC4ED1A8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)

            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT

            shaderFloat16:                  VkBool32 = 1

            shaderInt8:                     VkBool32 = 1

        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 0000002FCC4ED118:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)

            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures

            robustBufferAccess2:            VkBool32 = 1

            robustImageAccess2:             VkBool32 = 1

            nullDescriptor:                 VkBool32 = 1

        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 0000002FCC4ED0F8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)

            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures

            robustImageAccess:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 0000002FCC4ED0D8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)

            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures

            timelineSemaphore:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 0000002FCC4ED0B8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures

            imagelessFramebuffer:           VkBool32 = 1

        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 0000002FCC4ED050:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)

            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures

            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1

            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1

            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 0

            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1

            descriptorBindingPartiallyBound: VkBool32 = 1

            descriptorBindingVariableDescriptorCount: VkBool32 = 1

            runtimeDescriptorArray:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 0000002FCC4ED168:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)

            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures

            samplerYcbcrConversion:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceMultiviewFeatures = 0000002FCC4ED140:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)

            pNext:                          void* = NULL

            multiview:                      VkBool32 = 1

            multiviewGeometryShader:        VkBool32 = 1

            multiviewTessellationShader:    VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 0

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF718:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 24 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

    pFormatProperties:              VkFormatProperties2* = 0000002FCC4EF798:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)

        pNext:                          void* = VkFormatProperties3

        formatProperties:               VkFormatProperties = 0000002FCC4EF7A8:

            linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

        pNext:                          VkFormatProperties3 = 0000002FCC4EF770:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)

            pNext:                          void* = NULL

            linearTilingFeatures:           VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)

            optimalTilingFeatures:          VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)

            bufferFeatures:                 VkFormatFeatureFlags2 = 88 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF6A8:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EF718:

        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    pQueueFamilyPropertyCount:      uint32_t* = 2

    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    pQueueFamilyPropertyCount:      uint32_t* = 2

    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000002244ACED4C0

        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000002244ACED4C0:

            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 1

            timestampValidBits:             uint32_t = 36

            minImageTransferGranularity:    VkExtent3D = 000002244ACED4CC:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000002244ACED4D8:

            queueFlags:                     VkQueueFlags = 32 (VK_QUEUE_VIDEO_DECODE_BIT_KHR)

            queueCount:                     uint32_t = 2

            timestampValidBits:             uint32_t = 36

            minImageTransferGranularity:    VkExtent3D = 000002244ACED4E4:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EFB58:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EFB58:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97DEA0

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000002FCC4EFB58:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 0

        bufferFeatures:                 VkFormatFeatureFlags = 0



[2024-02-10T19:54:04Z INFO  wgpu_core::instance] Adapter Vulkan AdapterInfo { name: "NVIDIA GeForce RTX 3050", vendor: 4318, device: 9479, device_type: DiscreteGpu, driver: "NVIDIA", driver_info: "537.34", backend: Vulkan }
[2024-02-10T19:54:04Z INFO  wgpu_examples::framework] Using NVIDIA GeForce RTX 3050 (Vulkan)
Thread 0, Frame 0:

vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pCreateInfo:                    const VkDeviceCreateInfo* = 0000002FCC4DCC40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)

        pNext:                          const void* = NULL

        flags:                          VkDeviceCreateFlags = 0

        queueCreateInfoCount:           uint32_t = 1

        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 0000002FCC4DD920

            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 0000002FCC4DD920:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)

                pNext:                          const void* = NULL

                flags:                          VkDeviceQueueCreateFlags = 0

                queueFamilyIndex:               uint32_t = 0

                queueCount:                     uint32_t = 1

                pQueuePriorities:               const float* = 00007FF727D545C8

                    pQueuePriorities[0]:            const float = 1

        enabledLayerCount:              uint32_t = 0

        ppEnabledLayerNames:            const char* const* = NULL

        enabledExtensionCount:          uint32_t = 7

        ppEnabledExtensionNames:        const char* const* = 0000022451ECEBD0

            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"

            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"

            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"

            ppEnabledExtensionNames[3]:     const char* const = "VK_KHR_deferred_host_operations"

            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_acceleration_structure"

            ppEnabledExtensionNames[5]:     const char* const = "VK_KHR_buffer_device_address"

            ppEnabledExtensionNames[6]:     const char* const = "VK_KHR_ray_query"

        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 0000002FCC4DD7A0:

            robustBufferAccess:             VkBool32 = 1

            fullDrawIndexUint32:            VkBool32 = 0

            imageCubeArray:                 VkBool32 = 1

            independentBlend:               VkBool32 = 1

            geometryShader:                 VkBool32 = 0

            tessellationShader:             VkBool32 = 0

            sampleRateShading:              VkBool32 = 1

            dualSrcBlend:                   VkBool32 = 0

            logicOp:                        VkBool32 = 0

            multiDrawIndirect:              VkBool32 = 0

            drawIndirectFirstInstance:      VkBool32 = 0

            depthClamp:                     VkBool32 = 0

            depthBiasClamp:                 VkBool32 = 0

            fillModeNonSolid:               VkBool32 = 0

            depthBounds:                    VkBool32 = 0

            wideLines:                      VkBool32 = 0

            largePoints:                    VkBool32 = 0

            alphaToOne:                     VkBool32 = 0

            multiViewport:                  VkBool32 = 0

            samplerAnisotropy:              VkBool32 = 1

            textureCompressionETC2:         VkBool32 = 0

            textureCompressionASTC_LDR:     VkBool32 = 0

            textureCompressionBC:           VkBool32 = 0

            occlusionQueryPrecise:          VkBool32 = 0

            pipelineStatisticsQuery:        VkBool32 = 0

            vertexPipelineStoresAndAtomics: VkBool32 = 0

            fragmentStoresAndAtomics:       VkBool32 = 1

            shaderTessellationAndGeometryPointSize: VkBool32 = 0

            shaderImageGatherExtended:      VkBool32 = 0

            shaderStorageImageExtendedFormats: VkBool32 = 0

            shaderStorageImageMultisample:  VkBool32 = 0

            shaderStorageImageReadWithoutFormat: VkBool32 = 0

            shaderStorageImageWriteWithoutFormat: VkBool32 = 0

            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0

            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0

            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0

            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0

            shaderClipDistance:             VkBool32 = 0

            shaderCullDistance:             VkBool32 = 0

            shaderFloat64:                  VkBool32 = 0

            shaderInt64:                    VkBool32 = 0

            shaderInt16:                    VkBool32 = 0

            shaderResourceResidency:        VkBool32 = 0

            shaderResourceMinLod:           VkBool32 = 0

            sparseBinding:                  VkBool32 = 0

            sparseResidencyBuffer:          VkBool32 = 0

            sparseResidencyImage2D:         VkBool32 = 0

            sparseResidencyImage3D:         VkBool32 = 0

            sparseResidency2Samples:        VkBool32 = 0

            sparseResidency4Samples:        VkBool32 = 0

            sparseResidency8Samples:        VkBool32 = 0

            sparseResidency16Samples:       VkBool32 = 0

            sparseResidencyAliased:         VkBool32 = 0

            variableMultisampleRate:        VkBool32 = 0

            inheritedQueries:               VkBool32 = 0

        pNext:                          VkPhysicalDeviceRayQueryFeaturesKHR = 0000002FCC4DD768:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR (1000348013)

            pNext:                          void* = VkPhysicalDeviceBufferDeviceAddressFeatures

            rayQuery:                       VkBool32 = 1

        pNext:                          VkPhysicalDeviceBufferDeviceAddressFeatures = 0000002FCC4DD740:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES (1000257000)

            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR

            bufferDeviceAddress:            VkBool32 = 1

            bufferDeviceAddressCaptureReplay: VkBool32 = 0

            bufferDeviceAddressMultiDevice: VkBool32 = 0

        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 0000002FCC4DD710:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)

            pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

            accelerationStructure:          VkBool32 = 1

            accelerationStructureCaptureReplay: VkBool32 = 0

            accelerationStructureIndirectBuild: VkBool32 = 0

            accelerationStructureHostCommands: VkBool32 = 0

            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 0

        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 0000002FCC4DD788:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)

            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT

            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1

        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 0000002FCC4DD640:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)

            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures

            robustBufferAccess2:            VkBool32 = 1

            robustImageAccess2:             VkBool32 = 1

            nullDescriptor:                 VkBool32 = 0

        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 0000002FCC4DD620:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)

            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures

            robustImageAccess:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 0000002FCC4DD600:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)

            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures

            timelineSemaphore:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 0000002FCC4DD5E0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)

            pNext:                          void* = NULL

            imagelessFramebuffer:           VkBool32 = 1

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pDevice:                        VkDevice* = 0000022451C15B50



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pProperties:                    VkPhysicalDeviceProperties* = 0000002FCC4DC748:

        apiVersion:                     uint32_t = 4206834

        driverVersion:                  uint32_t = 2252898304

        vendorID:                       uint32_t = 4318

        deviceID:                       uint32_t = 9479

        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)

        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"

        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000002FCC4DC85C

            pipelineCacheUUID[0]:           uint8_t = 218

            pipelineCacheUUID[1]:           uint8_t = 176

            pipelineCacheUUID[2]:           uint8_t = 31

            pipelineCacheUUID[3]:           uint8_t = 61

            pipelineCacheUUID[4]:           uint8_t = 103

            pipelineCacheUUID[5]:           uint8_t = 121

            pipelineCacheUUID[6]:           uint8_t = 168

            pipelineCacheUUID[7]:           uint8_t = 246

            pipelineCacheUUID[8]:           uint8_t = 179

            pipelineCacheUUID[9]:           uint8_t = 114

            pipelineCacheUUID[10]:          uint8_t = 172

            pipelineCacheUUID[11]:          uint8_t = 249

            pipelineCacheUUID[12]:          uint8_t = 185

            pipelineCacheUUID[13]:          uint8_t = 210

            pipelineCacheUUID[14]:          uint8_t = 68

            pipelineCacheUUID[15]:          uint8_t = 21

        limits:                         VkPhysicalDeviceLimits = 0000002FCC4DC870:

            maxImageDimension1D:            uint32_t = 32768

            maxImageDimension2D:            uint32_t = 32768

            maxImageDimension3D:            uint32_t = 16384

            maxImageDimensionCube:          uint32_t = 32768

            maxImageArrayLayers:            uint32_t = 2048

            maxTexelBufferElements:         uint32_t = 134217728

            maxUniformBufferRange:          uint32_t = 65536

            maxStorageBufferRange:          uint32_t = 4294967295

            maxPushConstantsSize:           uint32_t = 256

            maxMemoryAllocationCount:       uint32_t = 4096

            maxSamplerAllocationCount:      uint32_t = 4000

            bufferImageGranularity:         VkDeviceSize = 1024

            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775

            maxBoundDescriptorSets:         uint32_t = 32

            maxPerStageDescriptorSamplers:  uint32_t = 1048576

            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorSampledImages: uint32_t = 1048576

            maxPerStageDescriptorStorageImages: uint32_t = 1048576

            maxPerStageDescriptorInputAttachments: uint32_t = 1048576

            maxPerStageResources:           uint32_t = 4294967295

            maxDescriptorSetSamplers:       uint32_t = 1048576

            maxDescriptorSetUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15

            maxDescriptorSetStorageBuffers: uint32_t = 1048576

            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetSampledImages:  uint32_t = 1048576

            maxDescriptorSetStorageImages:  uint32_t = 1048576

            maxDescriptorSetInputAttachments: uint32_t = 1048576

            maxVertexInputAttributes:       uint32_t = 32

            maxVertexInputBindings:         uint32_t = 32

            maxVertexInputAttributeOffset:  uint32_t = 2047

            maxVertexInputBindingStride:    uint32_t = 2048

            maxVertexOutputComponents:      uint32_t = 128

            maxTessellationGenerationLevel: uint32_t = 64

            maxTessellationPatchSize:       uint32_t = 32

            maxTessellationControlPerVertexInputComponents: uint32_t = 128

            maxTessellationControlPerVertexOutputComponents: uint32_t = 128

            maxTessellationControlPerPatchOutputComponents: uint32_t = 120

            maxTessellationControlTotalOutputComponents: uint32_t = 4216

            maxTessellationEvaluationInputComponents: uint32_t = 128

            maxTessellationEvaluationOutputComponents: uint32_t = 128

            maxGeometryShaderInvocations:   uint32_t = 32

            maxGeometryInputComponents:     uint32_t = 128

            maxGeometryOutputComponents:    uint32_t = 128

            maxGeometryOutputVertices:      uint32_t = 1024

            maxGeometryTotalOutputComponents: uint32_t = 1024

            maxFragmentInputComponents:     uint32_t = 128

            maxFragmentOutputAttachments:   uint32_t = 8

            maxFragmentDualSrcAttachments:  uint32_t = 1

            maxFragmentCombinedOutputResources: uint32_t = 4294967295

            maxComputeSharedMemorySize:     uint32_t = 49152

            maxComputeWorkGroupCount:       uint32_t[3] = 0000002FCC4DC94C

                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647

                maxComputeWorkGroupCount[1]:    uint32_t = 65535

                maxComputeWorkGroupCount[2]:    uint32_t = 65535

            maxComputeWorkGroupInvocations: uint32_t = 1024

            maxComputeWorkGroupSize:        uint32_t[3] = 0000002FCC4DC95C

                maxComputeWorkGroupSize[0]:     uint32_t = 1024

                maxComputeWorkGroupSize[1]:     uint32_t = 1024

                maxComputeWorkGroupSize[2]:     uint32_t = 64

            subPixelPrecisionBits:          uint32_t = 8

            subTexelPrecisionBits:          uint32_t = 8

            mipmapPrecisionBits:            uint32_t = 8

            maxDrawIndexedIndexValue:       uint32_t = 4294967295

            maxDrawIndirectCount:           uint32_t = 4294967295

            maxSamplerLodBias:              float = 15

            maxSamplerAnisotropy:           float = 16

            maxViewports:                   uint32_t = 16

            maxViewportDimensions:          uint32_t[2] = 0000002FCC4DC988

                maxViewportDimensions[0]:       uint32_t = 32768

                maxViewportDimensions[1]:       uint32_t = 32768

            viewportBoundsRange:            float[2] = 0000002FCC4DC990

                viewportBoundsRange[0]:         float = -65536

                viewportBoundsRange[1]:         float = 65536

            viewportSubPixelBits:           uint32_t = 8

            minMemoryMapAlignment:          size_t = 64

            minTexelBufferOffsetAlignment:  VkDeviceSize = 16

            minUniformBufferOffsetAlignment: VkDeviceSize = 64

            minStorageBufferOffsetAlignment: VkDeviceSize = 16

            minTexelOffset:                 int32_t = -8

            maxTexelOffset:                 uint32_t = 7

            minTexelGatherOffset:           int32_t = -32

            maxTexelGatherOffset:           uint32_t = 31

            minInterpolationOffset:         float = -0.5

            maxInterpolationOffset:         float = 0.4375

            subPixelInterpolationOffsetBits: uint32_t = 4

            maxFramebufferWidth:            uint32_t = 32768

            maxFramebufferHeight:           uint32_t = 32768

            maxFramebufferLayers:           uint32_t = 2048

            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxColorAttachments:            uint32_t = 8

            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            maxSampleMaskWords:             uint32_t = 1

            timestampComputeAndGraphics:    VkBool32 = 1

            timestampPeriod:                float = 1

            maxClipDistances:               uint32_t = 8

            maxCullDistances:               uint32_t = 8

            maxCombinedClipAndCullDistances: uint32_t = 8

            discreteQueuePriorities:        uint32_t = 2

            pointSizeRange:                 float[2] = 0000002FCC4DCA2C

                pointSizeRange[0]:              float = 1

                pointSizeRange[1]:              float = 2047.94

            lineWidthRange:                 float[2] = 0000002FCC4DCA34

                lineWidthRange[0]:              float = 1

                lineWidthRange[1]:              float = 64

            pointSizeGranularity:           float = 0.0625

            lineWidthGranularity:           float = 0.0625

            strictLines:                    VkBool32 = 1

            standardSampleLocations:        VkBool32 = 1

            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1

            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1

            nonCoherentAtomSize:            VkDeviceSize = 64

        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000002FCC4DCA68:

            residencyStandard2DBlockShape:  VkBool32 = 1

            residencyStandard2DMultisampleBlockShape: VkBool32 = 1

            residencyStandard3DBlockShape:  VkBool32 = 1

            residencyAlignedMipSize:        VkBool32 = 0

            residencyNonResidentStrict:     VkBool32 = 1



max_vertex_input_binding_stride: 2048
Thread 0, Frame 0:

vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0000002FCC4CF9D8:

        memoryTypeCount:                uint32_t = 5

        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0000002FCC4CF9DC

            memoryTypes[0]:                 VkMemoryType = 0000002FCC4CF9DC:

                propertyFlags:                  VkMemoryPropertyFlags = 0

                heapIndex:                      uint32_t = 1

            memoryTypes[1]:                 VkMemoryType = 0000002FCC4CF9E4:

                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)

                heapIndex:                      uint32_t = 0

            memoryTypes[2]:                 VkMemoryType = 0000002FCC4CF9EC:

                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)

                heapIndex:                      uint32_t = 1

            memoryTypes[3]:                 VkMemoryType = 0000002FCC4CF9F4:

                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)

                heapIndex:                      uint32_t = 1

            memoryTypes[4]:                 VkMemoryType = 0000002FCC4CF9FC:

                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)

                heapIndex:                      uint32_t = 2

        memoryHeapCount:                uint32_t = 3

        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0000002FCC4CFAE0

            memoryHeaps[0]:                 VkMemoryHeap = 0000002FCC4CFAE0:

                size:                           VkDeviceSize = 8447328256

                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

            memoryHeaps[1]:                 VkMemoryHeap = 0000002FCC4CFAF0:

                size:                           VkDeviceSize = 17058267136

                flags:                          VkMemoryHeapFlags = 0

            memoryHeaps[2]:                 VkMemoryHeap = 0000002FCC4CFB00:

                size:                           VkDeviceSize = 224395264

                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)



Thread 0, Frame 0:

vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:

    device:                         VkDevice = 0000022451C15B50

    queueFamilyIndex:               uint32_t = 0

    queueIndex:                     uint32_t = 0

    pQueue:                         VkQueue* = 000002244FE9B8A0



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4D1B40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = FAB64D0000000002



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4D1B40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = FA21A40000000003



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4C6928:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = VkSemaphoreTypeCreateInfo

        flags:                          VkSemaphoreCreateFlags = 0

        pNext:                          VkSemaphoreTypeCreateInfo = 0000002FCC4C68E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)

            pNext:                          const void* = NULL

            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)

            initialValue:                   uint64_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = F56C9B0000000004



Thread 0, Frame 0:

vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0000002FCC4C65E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)

        pNext:                          const void* = NULL

        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)

        queueFamilyIndex:               uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pCommandPool:                   VkCommandPool* = E7F79A0000000005



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4C6570:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 524288

        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = F443490000000006



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = F443490000000006

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4C63F8:

        size:                           VkDeviceSize = 524288

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000002FCC4C58A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 8388608

        memoryTypeIndex:                uint32_t = 1

        pNext:                          VkMemoryAllocateFlagsInfo = 0000002FCC4C5908:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = CB3EE80000000007



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = F443490000000006

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4C6100:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 17600992033042857990

        pObjectName:                    const char* = "(wgpu internal) zero init buffer"



Thread 0, Frame 0:

vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000002FCC4C67D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)

        pNext:                          const void* = NULL

        commandPool:                    VkCommandPool = E7F79A0000000005

        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)

        commandBufferCount:             uint32_t = 16

    pCommandBuffers:                VkCommandBuffer* = 000002244B0D6420

        pCommandBuffers[0]:             VkCommandBuffer = 000002244FEC1950

        pCommandBuffers[1]:             VkCommandBuffer = 000002244FEC3950

        pCommandBuffers[2]:             VkCommandBuffer = 000002244FEC5950

        pCommandBuffers[3]:             VkCommandBuffer = 000002244FEC7950

        pCommandBuffers[4]:             VkCommandBuffer = 0000022451C023C0

        pCommandBuffers[5]:             VkCommandBuffer = 0000022451C03AB0

        pCommandBuffers[6]:             VkCommandBuffer = 0000022451C05AB0

        pCommandBuffers[7]:             VkCommandBuffer = 0000022451C07AB0

        pCommandBuffers[8]:             VkCommandBuffer = 0000022451C09AB0

        pCommandBuffers[9]:             VkCommandBuffer = 0000022451C0BAB0

        pCommandBuffers[10]:            VkCommandBuffer = 000002245D558080

        pCommandBuffers[11]:            VkCommandBuffer = 000002245D55A080

        pCommandBuffers[12]:            VkCommandBuffer = 000002245D55B770

        pCommandBuffers[13]:            VkCommandBuffer = 000002245D55CE60

        pCommandBuffers[14]:            VkCommandBuffer = 000002245D55E840

        pCommandBuffers[15]:            VkCommandBuffer = 000002245D55FF30



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4C63B0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355207995184

        pObjectName:                    const char* = "(wgpu internal) PendingWrites"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4C68D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    dstBuffer:                      VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]

    dstOffset:                      VkDeviceSize = 0

    size:                           VkDeviceSize = 524288

    data:                           uint32_t = 0



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 0000022448FE48D0

    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 0000002FCC4F93B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)

        pNext:                          const void* = NULL

        flags:                          VkWin32SurfaceCreateFlagsKHR = 0

        hinstance:                      HINSTANCE = 00007FF7265F0000

        hwnd:                           HWND = 0000000000F509CA

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSurface:                       VkSurfaceKHR* = EAD9370000000008



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000002FCC4F9A98:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000002FCC4F9AA0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000002FCC4F9AA8:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000002FCC4F9AB0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000002244FE92970

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000002244FE92AF0

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000002244FE92AF0:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000002244FE92AF8:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000002244FE92B00:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000002FCC4F96B8:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000002FCC4F96C0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000002FCC4F96C8:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000002FCC4F96D0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000002244FE92AF0

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult[2024-02-10T19:54:05Z INFO  wgpu_examples::framework] Entering event loop...
[2024-02-10T19:54:05Z INFO  wgpu_examples::framework] Surface resume PhysicalSize { width: 800, height: 600 }
 VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000002244FE92970

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000002244FE92970:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000002244FE92978:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000002244FE92980:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000002FCC4F8EE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000002FCC4F8ED0

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000002FCC4F8ED8

            pValues[0]:                     const uint64_t = 0

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0000002FCC4F8920:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)

        pNext:                          const void* = NULL

        flags:                          VkSwapchainCreateFlagsKHR = 0

        surface:                        VkSurfaceKHR = EAD9370000000008

        minImageCount:                  uint32_t = 3

        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        imageExtent:                    VkExtent2D = 0000002FCC4F894C:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        imageArrayLayers:               uint32_t = 1

        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        clipped:                        VkBool32 = 1

        oldSwapchain:                   VkSwapchainKHR = 0000000000000000

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSwapchain:                     VkSwapchainKHR* = EE647E0000000009



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = EE647E0000000009

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = EE647E0000000009

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = 000002244FE93050

        pSwapchainImages[0]:            VkImage = CFEF35000000000A

        pSwapchainImages[1]:            VkImage = EC4BEC000000000B

        pSwapchainImages[2]:            VkImage = E88693000000000C



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7EA0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = CAD092000000000D



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7D50:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 967DD1000000000E



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7D50:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = E7E6D0000000000F



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7D50:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = D5B26F0000000010



hi
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F6100:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 212764

        usage:                          VkBufferUsageFlags = 655506 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 980F360000000011



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 980F360000000011

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F5F88:

        size:                           VkDeviceSize = 212992

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 980F360000000011

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 524288



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5C90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 10957035792043606033

        pObjectName:                    const char* = "Water vertices"



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F6100:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 212760

        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = DCC8FD0000000012



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = DCC8FD0000000012

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F5F88:

        size:                           VkDeviceSize = 212760

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000002FCC4F55D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 8388608

        memoryTypeIndex:                uint32_t = 2

        pNext:                          VkMemoryAllocateFlagsInfo = 0000002FCC4F5638:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = D175B40000000013



Thread 0, Frame 0:

vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    memory:                         VkDeviceMemory = D175B40000000013

    offset:                         VkDeviceSize = 0

    size:                           VkDeviceSize = 8388608

    flags:                          VkMemoryMapFlags = 0

    ppData:                         void** = 0000022460E00000



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = DCC8FD0000000012

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 8175848



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5C90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 15909243860128104466

        pObjectName:                    const char* = "(wgpu internal) initializing unmappable buffer"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0AB8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 980F360000000011 [Water vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]

    dstBuffer:                      VkBuffer = 980F360000000011 [Water vertices]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F87E8

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F87E8:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 212760



Thread 0, Frame 0:

vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:

    device:                         VkDevice = 0000022451C15B50

    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)

    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 0000002FCC4F8260:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

        pNext:                          const void* = NULL

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        geometryCount:                  uint32_t = 1

        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000002FCC4F5FA0

            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000002FCC4F5FA0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                pNext:                          const void* = NULL

                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                geometry:                       VkAccelerationStructureGeometryDataKHR = 0000002FCC4F5FB8 (Union):

                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000002FCC4F5FB8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                        vertexData:                     VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FD0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        vertexStride:                   VkDeviceSize = 0

                        maxVertex:                      uint32_t = 17730

                        indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                        indexData:                      VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FE8 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        transformData:                  VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FF0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000002FCC4F5FB8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FC8 (Union):

                            deviceAddress:                  VkDeviceAddress = 2353642078314

                            hostAddress:                    const void* = 000002240000006A

                        stride:                         VkDeviceSize = 0

                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000002FCC4F5FB8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        arrayOfPointers:                VkBool32 = 106

                        data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FD0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

        scratchData:                    VkDeviceOrHostAddressKHR = 0000002FCC4F82A8 (Union):

            deviceAddress:                  VkDeviceAddress = 0

            hostAddress:                    void* = NULL

    pMaxPrimitiveCounts:            const uint32_t* = 0000002FCC4F62A8

        pMaxPrimitiveCounts[0]:         const uint32_t = 17730

    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 0000002FCC4F5DB8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)

        pNext:                          const void* = NULL

        accelerationStructureSize:      VkDeviceSize = 1031680

        updateScratchSize:              VkDeviceSize = 0

        buildScratchSize:               VkDeviceSize = 145664



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F7EB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 1031680

        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 9FDE6B0000000014



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 9FDE6B0000000014

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F7D08:

        size:                           VkDeviceSize = 1031680

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 9FDE6B0000000014

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 1048576



Thread 0, Frame 0:

vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 0000002FCC4F8128:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)

        pNext:                          const void* = NULL

        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0

        buffer:                         VkBuffer = 9FDE6B0000000014

        offset:                         VkDeviceSize = 0

        size:                           VkDeviceSize = 1031680

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        deviceAddress:                  VkDeviceAddress = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pAccelerationStructure:         VkAccelerationStructureKHR* = DD3A8A0000000015



Thread 0, Frame 0:

vkGetAccelerationStructureDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 273481728:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkAccelerationStructureDeviceAddressInfoKHR* = 0000002FCC4F83F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR (1000150002)

        pNext:                          const void* = NULL

        accelerationStructure:          VkAccelerationStructureKHR = DD3A8A0000000015



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F6100:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 1702084

        usage:                          VkBufferUsageFlags = 655506 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = D897D90000000016



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = D897D90000000016

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F5F88:

        size:                           VkDeviceSize = 1702144

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = D897D90000000016

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 2097152



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5C90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 15607181627698970646

        pObjectName:                    const char* = "Terrain vertices"



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F6100:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 1702080

        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 84C0580000000017



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 84C0580000000017

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F5F88:

        size:                           VkDeviceSize = 1702080

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 84C0580000000017

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 6473768



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5C90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 9565742365558177815

        pObjectName:                    const char* = "(wgpu internal) initializing unmappable buffer"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0AB8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]

    dstBuffer:                      VkBuffer = D897D90000000016 [Terrain vertices]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F87E8

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F87E8:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 1702080



17730, 106380
Thread 0, Frame 0:

vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:

    device:                         VkDevice = 0000022451C15B50

    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)

    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 0000002FCC4F8260:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

        pNext:                          const void* = NULL

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        geometryCount:                  uint32_t = 1

        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000002FCC4F5FA0

            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000002FCC4F5FA0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                pNext:                          const void* = NULL

                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                geometry:                       VkAccelerationStructureGeometryDataKHR = 0000002FCC4F5FB8 (Union):

                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000002FCC4F5FB8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                        vertexData:                     VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FD0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        vertexStride:                   VkDeviceSize = 0

                        maxVertex:                      uint32_t = 106380

                        indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                        indexData:                      VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FE8 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        transformData:                  VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FF0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000002FCC4F5FB8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FC8 (Union):

                            deviceAddress:                  VkDeviceAddress = 2353642078314

                            hostAddress:                    const void* = 000002240000006A

                        stride:                         VkDeviceSize = 0

                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000002FCC4F5FB8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        arrayOfPointers:                VkBool32 = 106

                        data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F5FD0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

        scratchData:                    VkDeviceOrHostAddressKHR = 0000002FCC4F82A8 (Union):

            deviceAddress:                  VkDeviceAddress = 0

            hostAddress:                    void* = NULL

    pMaxPrimitiveCounts:            const uint32_t* = 0000002FCC4F62A8

        pMaxPrimitiveCounts[0]:         const uint32_t = 106380

    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 0000002FCC4F5DB8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)

        pNext:                          const void* = NULL

        accelerationStructureSize:      VkDeviceSize = 6177152

        updateScratchSize:              VkDeviceSize = 0

        buildScratchSize:               VkDeviceSize = 865792



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F7EB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 6177152

        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = D10D270000000018



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = D10D270000000018

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F7D08:

        size:                           VkDeviceSize = 6177280

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult[2024-02-10T19:54:05Z INFO  wgpu_core::device::ray_tracing] Created blas Id(0,1,vk) with CreateBlasDescriptor { label: None, flags: AccelerationStructureFlags(PREFER_FAST_BUILD), update_mode: Build }
 VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000002FCC4F71B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 16777216

        memoryTypeIndex:                uint32_t = 1

        pNext:                          VkMemoryAllocateFlagsInfo = 0000002FCC4F7218:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = 27D60E0000000019



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = D10D270000000018

    memory:                         VkDeviceMemory = 27D60E0000000019

    memoryOffset:                   VkDeviceSize = 0



Thread 0, Frame 0:

vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 0000002FCC4F8128:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)

        pNext:                          const void* = NULL

        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0

        buffer:                         VkBuffer = D10D270000000018

        offset:                         VkDeviceSize = 0

        size:                           VkDeviceSize = 6177152

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        deviceAddress:                  VkDeviceAddress = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pAccelerationStructure:         VkAccelerationStructureKHR* = 95A125000000001A



Thread 0, Frame 0:

vkGetAccelerationStructureDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 297795584:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkAccelerationStructureDeviceAddressInfoKHR* = 0000002FCC4F83F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR (1000150002)

        pNext:                          const void* = NULL

        accelerationStructure:          VkAccelerationStructureKHR = 95A125000000001A



Thread 0, Frame 0:

vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:

    device:                         VkDevice = 0000022451C15B50

    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)

    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 0000002FCC4F8070:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

        pNext:                          const void* = NULL

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)

        flags:                          VkBuildAccelerationStructureFlagsKHR = 4 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR)

        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        geometryCount:                  uint32_t = 1

        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000002FCC4F5DB0

            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000002FCC4F5DB0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                pNext:                          const void* = NULL

                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_INSTANCES_KHR (2)

                geometry:                       VkAccelerationStructureGeometryDataKHR = 0000002FCC4F5DC8 (Union):

                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000002FCC4F5DC8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                        pNext:                          const void* = NULL

                        vertexFormat:                   VkFormat = VK_FORMAT_UNDEFINED (0)

                        vertexData:                     VkDeviceOrHostAddressConstKHR = 0000002FCC4F5DE0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        vertexStride:                   VkDeviceSize = 7305999817851800077

                        maxVertex:                      uint32_t = 1701013878

                        indexType:                      VkIndexType = UNKNOWN (538976314)

                        indexData:                      VkDeviceOrHostAddressConstKHR = 0000002FCC4F5DF8 (Union):

                            deviceAddress:                  VkDeviceAddress = 2314885530818453536

                            hostAddress:                    const void* = 2020202020202020

                        transformData:                  VkDeviceOrHostAddressConstKHR = 0000002FCC4F5E00 (Union):

                            deviceAddress:                  VkDeviceAddress = 2314885530818453536

                            hostAddress:                    const void* = 2020202020202020

                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000002FCC4F5DC8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                        pNext:                          const void* = NULL

                        data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F5DD8 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        stride:                         VkDeviceSize = 0

                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000002FCC4F5DC8:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                        pNext:                          const void* = NULL

                        arrayOfPointers:                VkBool32 = 0

                        data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F5DE0 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                flags:                          VkGeometryFlagsKHR = 0

        scratchData:                    VkDeviceOrHostAddressKHR = 0000002FCC4F80B8 (Union):

            deviceAddress:                  VkDeviceAddress = 0

            hostAddress:                    void* = NULL

    pMaxPrimitiveCounts:            const uint32_t* = 0000002FCC4F60B8

        pMaxPrimitiveCounts[0]:         const uint32_t = 2

    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 0000002FCC4F5BC8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)

        pNext:                          const void* = NULL

        accelerationStructureSize:      VkDeviceSize = 2048

        updateScratchSize:              VkDeviceSize = 0

        buildScratchSize:               VkDeviceSize = 2176



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F7CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 2048

        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = CB1C7C000000001B



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = CB1C7C000000001B

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F7B18:

        size:                           VkDeviceSize = 2048

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = CB1C7C000000001B

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 786432



Thread 0, Frame 0:

vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 0000002FCC4F7F38:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)

        pNext:                          const void* = NULL

        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0

        buffer:                         VkBuffer = CB1C7C000000001B

        offset:                         VkDeviceSize = 0

        size:                           VkDeviceSize = 2048

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)

        deviceAddress:                  VkDeviceAddress = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pAccelerationStructure:         VkAccelerationStructureKHR* = 2CFBA2000000001C



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F7DE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 655362 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 908683000000001D



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 908683000000001D

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F7C68:

        size:                           VkDeviceSize = 256

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 908683000000001D

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 788480



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F7970:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 10414155224364089373

        pObjectName:                    const char* = "(wgpu-core) instances_buffer"



Thread 0, Frame 0:

vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0000002FCC4F72A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorSetLayoutCreateFlags = 0

        bindingCount:                   uint32_t = 1

        pBindings:                      const VkDescriptorSetLayoutBinding* = 000002244FE93070

            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000002244FE93070:

                binding:                        uint32_t = 0

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR (1000150000)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSetLayout:                     VkDescriptorSetLayout* = CFCDA0000000001E



Thread 0, Frame 0:

vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0000002FCC4F55A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)

        maxSets:                        uint32_t = 64

        poolSizeCount:                  uint32_t = 0

        pPoolSizes:                     const VkDescriptorPoolSize* = 0000002FCC4F5560

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pDescriptorPool:                VkDescriptorPool* = 2E2941000000001F



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000002FCC4F54A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = 2E2941000000001F

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000002FCC4F5548

            pSetLayouts[0]:                 const VkDescriptorSetLayout = CFCDA0000000001E

    pDescriptorSets:                VkDescriptorSet* = 000002245D578D80

        pDescriptorSets[0]:             VkDescriptorSet = AB64DE0000000020



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 0000022451C15B50

    descriptorWriteCount:           uint32_t = 1

    pDescriptorWrites:              const VkWriteDescriptorSet* = 0000022450924E20

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0000022450924E20:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = VkWriteDescriptorSetAccelerationStructureKHR

            dstSet:                         VkDescriptorSet = AB64DE0000000020

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR (1000150000)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pNext:                          VkWriteDescriptorSetAccelerationStructureKHR = 000002244FEB3D70:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR (1000150007)

            pNext:                          const void* = NULL

            accelerationStructureCount:     uint32_t = 1

            pAccelerationStructures:        const VkAccelerationStructureKHR* = 000002245D578CD0

                pAccelerationStructures[0]:     const VkAccelerationStructureKHR = 2CFBA2000000001C

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF727D54920



Thread 0, Frame 0:

vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0000002FCC4F7F88:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)

        pNext:                          const void* = NULL

        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)

        queueFamilyIndex:               uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pCommandPool:                   VkCommandPool* = C4F3070000000021



212760
1031680, 145664, false
1702080
6177152, 865792, false
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F62E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 1011456

        usage:                          VkBufferUsageFlags = 131104 (VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 301E6C0000000022



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 301E6C0000000022

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F6168:

        size:                           VkDeviceSize = 1011456

        alignment:                      VkDeviceSize = 16

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000002FCC4F5618:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 8388608

        memoryTypeIndex:                uint32_t = 2

        pNext:                          VkMemoryAllocateFlagsInfo = 0000002FCC4F5678:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = A7C5450000000023



Thread 0, Frame 0:

vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    memory:                         VkDeviceMemory = A7C5450000000023

    offset:                         VkDeviceSize = 0

    size:                           VkDeviceSize = 8388608

    flags:                          VkMemoryMapFlags = 0

    ppData:                         void** = 0000022462CC0000



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 301E6C0000000022

    memory:                         VkDeviceMemory = A7C5450000000023

    memoryOffset:                   VkDeviceSize = 0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5E70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 3467327510377660450

        pObjectName:                    const char* = "(wgpu) scratch buffer"



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F62E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = B991FA0000000024



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = B991FA0000000024

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F6168:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = B991FA0000000024

    memory:                         VkDeviceMemory = A7C5450000000023

    memoryOffset:                   VkDeviceSize = 1048576



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5E70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 13371743646546657316

        pObjectName:                    const char* = "(wgpu) instance staging buffer"



Thread 0, Frame 0:

vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000002FCC4F6520:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)

        pNext:                          const void* = NULL

        commandPool:                    VkCommandPool = C4F3070000000021

        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)

        commandBufferCount:             uint32_t = 16

    pCommandBuffers:                VkCommandBuffer* = 000002244ACE2120

        pCommandBuffers[0]:             VkCommandBuffer = 000002245D773D30

        pCommandBuffers[1]:             VkCommandBuffer = 000002245D77DED0

        pCommandBuffers[2]:             VkCommandBuffer = 000002245D778290

        pCommandBuffers[3]:             VkCommandBuffer = 000002245D77F5E0

        pCommandBuffers[4]:             VkCommandBuffer = 000002245D77B0B0

        pCommandBuffers[5]:             VkCommandBuffer = 000002245D7799A0

        pCommandBuffers[6]:             VkCommandBuffer = 000002245D77C7C0

        pCommandBuffers[7]:             VkCommandBuffer = 000002245D775470

        pCommandBuffers[8]:             VkCommandBuffer = 000002245D780CF0

        pCommandBuffers[9]:             VkCommandBuffer = 000002245D776B80

        pCommandBuffers[10]:            VkCommandBuffer = 000002245D783B10

        pCommandBuffers[11]:            VkCommandBuffer = 000002245D782400

        pCommandBuffers[12]:            VkCommandBuffer = 000002245D5F8090

        pCommandBuffers[13]:            VkCommandBuffer = 000002245D5F97A0

        pCommandBuffers[14]:            VkCommandBuffer = 000002245D5F6980

        pCommandBuffers[15]:            VkCommandBuffer = 000002245D5FC5C0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6100:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F6628:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



2
Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 1

    pMemoryBarriers:                const VkMemoryBarrier* = 0000002FCC4F66A8

        pMemoryBarriers[0]:             const VkMemoryBarrier = 0000002FCC4F66A8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 2097152 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 4194304 (VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D54920

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D54920



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 272957440:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000002FCC4F4780:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 980F360000000011 [Water vertices]



alignment: 16
Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 316735488:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000002FCC4F63B0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 274530304:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000002FCC4F4780:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]



alignment: 16
Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 316735488:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000002FCC4F63B0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]



Thread 0, Frame 0:

vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    infoCount:                      uint32_t = 2

    pInfos:                         const VkAccelerationStructureBuildGeometryInfoKHR* = 0000002FCC4F4ED8

        pInfos[0]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 0000002FCC4F4ED8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

            pNext:                          const void* = NULL

            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

            flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

            dstAccelerationStructure:       VkAccelerationStructureKHR = DD3A8A0000000015

            geometryCount:                  uint32_t = 1

            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000002FCC4F4B90

                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000002FCC4F4B90:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                    pNext:                          const void* = NULL

                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                    geometry:                       VkAccelerationStructureGeometryDataKHR = 0000002FCC4F4BA8 (Union):

                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000002FCC4F4BA8:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                            vertexData:                     VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BC0 (Union):

                                deviceAddress:                  VkDeviceAddress = 272957440

                                hostAddress:                    const void* = 0000000010450000

                            vertexStride:                   VkDeviceSize = 12

                            maxVertex:                      uint32_t = 17730

                            indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                            indexData:                      VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BD8 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                            transformData:                  VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BE0 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000002FCC4F4BA8:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BB8 (Union):

                                deviceAddress:                  VkDeviceAddress = 2353642078314

                                hostAddress:                    const void* = 000002240000006A

                            stride:                         VkDeviceSize = 272957440

                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000002FCC4F4BA8:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            arrayOfPointers:                VkBool32 = 106

                            data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BC0 (Union):

                                deviceAddress:                  VkDeviceAddress = 272957440

                                hostAddress:                    const void* = 0000000010450000

                    flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

            scratchData:                    VkDeviceOrHostAddressKHR = 0000002FCC4F4F20 (Union):

                deviceAddress:                  VkDeviceAddress = 316735488

                hostAddress:                    void* = 0000000012E10000

        pInfos[1]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 0000002FCC4F4F28:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

            pNext:                          const void* = NULL

            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

            flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

            dstAccelerationStructure:       VkAccelerationStructureKHR = 95A125000000001A

            geometryCount:                  uint32_t = 1

            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000002FCC4F4BF8

                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000002FCC4F4BF8:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                    pNext:                          const void* = NULL

                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                    geometry:                       VkAccelerationStructureGeometryDataKHR = 0000002FCC4F4C10 (Union):

                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000002FCC4F4C10:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                            vertexData:                     VkDeviceOrHostAddressConstKHR = 0000002FCC4F4C28 (Union):

                                deviceAddress:                  VkDeviceAddress = 274530304

                                hostAddress:                    const void* = 00000000105D0000

                            vertexStride:                   VkDeviceSize = 16

                            maxVertex:                      uint32_t = 106380

                            indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                            indexData:                      VkDeviceOrHostAddressConstKHR = 0000002FCC4F4C40 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                            transformData:                  VkDeviceOrHostAddressConstKHR = 0000002FCC4F4C48 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000002FCC4F4C10:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F4C20 (Union):

                                deviceAddress:                  VkDeviceAddress = 2353642078314

                                hostAddress:                    const void* = 000002240000006A

                            stride:                         VkDeviceSize = 274530304

                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000002FCC4F4C10:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            arrayOfPointers:                VkBool32 = 106

                            data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F4C28 (Union):

                                deviceAddress:                  VkDeviceAddress = 274530304

                                hostAddress:                    const void* = 00000000105D0000

                    flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

            scratchData:                    VkDeviceOrHostAddressKHR = 0000002FCC4F4F70 (Union):

                deviceAddress:                  VkDeviceAddress = 316881152

                hostAddress:                    void* = 0000000012E33900



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0300

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0300:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcStageMask:                   VkPipelineStageFlags = 33556617 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 1

    pMemoryBarriers:                const VkMemoryBarrier* = 0000002FCC4F66A8

        pMemoryBarriers[0]:             const VkMemoryBarrier = 0000002FCC4F66A8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D54920

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D54920



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0300

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0300:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcBuffer:                      VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]

    dstBuffer:                      VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F63F8

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F63F8:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0300

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0300:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 273221632:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000002FCC4F4780:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 316735488:

    device:                         VkDevice = 0000022451C15B50

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000002FCC4F63B0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]



Thread 0, Frame 0:

vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    infoCount:                      uint32_t = 1

    pInfos:                         const VkAccelerationStructureBuildGeometryInfoKHR* = 0000002FCC4F4ED8

        pInfos[0]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 0000002FCC4F4ED8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

            pNext:                          const void* = NULL

            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)

            flags:                          VkBuildAccelerationStructureFlagsKHR = 4 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR)

            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

            dstAccelerationStructure:       VkAccelerationStructureKHR = 2CFBA2000000001C

            geometryCount:                  uint32_t = 1

            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000002FCC4F4B90

                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000002FCC4F4B90:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                    pNext:                          const void* = NULL

                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_INSTANCES_KHR (2)

                    geometry:                       VkAccelerationStructureGeometryDataKHR = 0000002FCC4F4BA8 (Union):

                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000002FCC4F4BA8:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                            pNext:                          const void* = NULL

                            vertexFormat:                   VkFormat = VK_FORMAT_UNDEFINED (0)

                            vertexData:                     VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BC0 (Union):

                                deviceAddress:                  VkDeviceAddress = 273221632

                                hostAddress:                    const void* = 0000000010490800

                            vertexStride:                   VkDeviceSize = 148

                            maxVertex:                      uint32_t = 0

                            indexType:                      VkIndexType = UNKNOWN (51016)

                            indexData:                      VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BD8 (Union):

                                deviceAddress:                  VkDeviceAddress = 2354866758288

                                hostAddress:                    const void* = 0000022448FF2290

                            transformData:                  VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BE0 (Union):

                                deviceAddress:                  VkDeviceAddress = 140735965800766

                                hostAddress:                    const void* = 00007FFFA53FA93E

                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000002FCC4F4BA8:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                            pNext:                          const void* = NULL

                            data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BB8 (Union):

                                deviceAddress:                  VkDeviceAddress = 201863462912

                                hostAddress:                    const void* = 0000002F00000000

                            stride:                         VkDeviceSize = 273221632

                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000002FCC4F4BA8:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                            pNext:                          const void* = NULL

                            arrayOfPointers:                VkBool32 = 0

                            data:                           VkDeviceOrHostAddressConstKHR = 0000002FCC4F4BC0 (Union):

                                deviceAddress:                  VkDeviceAddress = 273221632

                                hostAddress:                    const void* = 0000000010490800

                    flags:                          VkGeometryFlagsKHR = 0

            scratchData:                    VkDeviceOrHostAddressKHR = 0000002FCC4F4F20 (Union):

                deviceAddress:                  VkDeviceAddress = 316735488

                hostAddress:                    void* = 0000000012E10000



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 10376 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 1

    pMemoryBarriers:                const VkMemoryBarrier* = 0000002FCC4F66A8

        pMemoryBarriers[0]:             const VkMemoryBarrier = 0000002FCC4F66A8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4194304 (VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 2097152 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR)

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D54920

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D54920



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F4540:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F4A68:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0300

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0300:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 980F360000000011 [Water vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0338:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]



Thread 0, Frame 0:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F49A0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F49A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 0

            pWaitSemaphores:                const VkSemaphore* = 0000000000000008

            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004

            commandBufferCount:             uint32_t = 3

            pCommandBuffers:                const VkCommandBuffer* = 000002244FE94F50

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D55FF30 [(wgpu internal) PendingWrites]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F45D0

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F4870:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F45E8

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 1

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 0:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 0



Thread 0, Frame 0:

vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0000002FCC4F72A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorSetLayoutCreateFlags = 0

        bindingCount:                   uint32_t = 3

        pBindings:                      const VkDescriptorSetLayoutBinding* = 0000022450924FB0

            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0000022450924FB0:

                binding:                        uint32_t = 0

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = UNUSED

            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 0000022450924FC8:

                binding:                        uint32_t = 1

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = UNUSED

            pBindings[2]:                   const VkDescriptorSetLayoutBinding = 0000022450924FE0:

                binding:                        uint32_t = 2

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = NULL

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSetLayout:                     VkDescriptorSetLayout* = 3A6CBB0000000025



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F62D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 18 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = A2EB680000000026



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = A2EB680000000026

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F6158:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 64

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = A2EB680000000026

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 789504



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 11739591202880618534

        pObjectName:                    const char* = "Water Uniforms"



elapsed before init 42ms
RTUniforms { view_inverse: [[0.08838836, -0.0, 0.08838836, -0.0], [0.02123436, 0.64714247, -0.02123436, 0.0], [-0.085799776, 0.16015957, 0.085799776, -0.0], [-24.999998, 46.666664, 25.000002, 1.0000001]], proj_inverse: [[0.7543638, 0.0, -0.0, 0.0], [0.0, 0.56577283, 0.0, -0.0], [-0.0, 0.0, -0.0, -999.9991], [0.0, -0.0, -1.0, 1000.0]] }
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F7CA0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = B097C90000000027



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = B097C90000000027

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F7B28:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = B097C90000000027

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 6473640



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F7830:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 12724860273995808807

        pObjectName:                    const char* = "(wgpu internal) Staging"



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F7AC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355207989312

        pObjectName:                    const char* = "(wgpu internal) PendingWrites"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F7FE8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = B097C90000000027 [(wgpu internal) Staging]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0AB8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = B097C90000000027 [(wgpu internal) Staging]

    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F7D98

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F7D98:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageCreateInfo* = 0000002FCC4F55B0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)

        pNext:                          const void* = NULL

        flags:                          VkImageCreateFlags = 0

        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        extent:                         VkExtent3D = 0000002FCC4F55CC:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

            depth:                          uint32_t = 1

        mipLevels:                      uint32_t = 1

        arrayLayers:                    uint32_t = 1

        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)

        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pImage:                         VkImage* = 3FBCD60000000028



Thread 0, Frame 0:

vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 3FBCD60000000028

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F52F8:

        size:                           VkDeviceSize = 2048000

        alignment:                      VkDeviceSize = 1024

        memoryTypeBits:                 uint32_t = 3



Thread 0, Frame 0:

vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 3FBCD60000000028

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 4194304



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F5000:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)

        objectHandle:                   uint64_t = 4592781015499407400

        pObjectName:                    const char* = "Depth Buffer"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F5A38:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 3FBCD60000000028 [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F5A60:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F5A70:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F5C40:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B9181F0000000029



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F55E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13337444381318185001

        pObjectName:                    const char* = "(wgpu internal) clear texture view"



Thread 0, Frame 0:

vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSamplerCreateInfo* = 0000002FCC4F81A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)

        pNext:                          const void* = NULL

        flags:                          VkSamplerCreateFlags = 0

        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)

        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        mipLodBias:                     float = 0

        anisotropyEnable:               VkBool32 = 0

        maxAnisotropy:                  float = 0

        compareEnable:                  VkBool32 = 0

        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

        minLod:                         float = 0

        maxLod:                         float = 32

        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)

        unnormalizedCoordinates:        VkBool32 = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSampler:                       VkSampler* = BA7514000000002A



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F7D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)

        objectHandle:                   uint64_t = 13435667053562298410

        pObjectName:                    const char* = "Depth Sampler"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F75D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 3FBCD60000000028 [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F7600:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F7610:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F77E0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 02E2CD000000002B



Thread 0, Frame 0:

vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0000002FCC4F4EB8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)

        maxSets:                        uint32_t = 64

        poolSizeCount:                  uint32_t = 3

        pPoolSizes:                     const VkDescriptorPoolSize* = 0000002FCC4F4E70

            pPoolSizes[0]:                  const VkDescriptorPoolSize = 0000002FCC4F4E70:

                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

                descriptorCount:                uint32_t = 64

            pPoolSizes[1]:                  const VkDescriptorPoolSize = 0000002FCC4F4E78:

                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

                descriptorCount:                uint32_t = 64

            pPoolSizes[2]:                  const VkDescriptorPoolSize = 0000002FCC4F4E80:

                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

                descriptorCount:                uint32_t = 64

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pDescriptorPool:                VkDescriptorPool* = B12FB2000000002C



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000002FCC4F4DB8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = B12FB2000000002C

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000002FCC4F4E58

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

    pDescriptorSets:                VkDescriptorSet* = 000002245D578EC0

        pDescriptorSets[0]:             VkDescriptorSet = A43473000000002D



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F54E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)

        objectHandle:                   uint64_t = 11832208564846329901

        pObjectName:                    const char* = "Water Bind Group"



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 0000022451C15B50

    descriptorWriteCount:           uint32_t = 3

    pDescriptorWrites:              const VkWriteDescriptorSet* = 000002245CF13A20

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000002245CF13A20:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = 000002244FE93610

                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000002244FE93610:

                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

                    offset:                         VkDeviceSize = 0

                    range:                          VkDeviceSize = 18446744073709551615

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000002245CF13A60:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]

            dstBinding:                     uint32_t = 1

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FE937F0

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FE937F0:

                    sampler:                        VkSampler = 0000000000000000

                    imageView:                      VkImageView = 02E2CD000000002B

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 000002245CF13AA0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]

            dstBinding:                     uint32_t = 2

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FE93810

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FE93810:

                    sampler:                        VkSampler = BA7514000000002A [Depth Sampler]

                    imageView:                      VkImageView = 0000000000000000

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF727D54920



elapsed after init 44ms
Thread 0, Frame 0:

vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0000002FCC4F8388:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)

        pNext:                          const void* = NULL

        flags:                          VkPipelineLayoutCreateFlags = 0

        setLayoutCount:                 uint32_t = 2

        pSetLayouts:                    const VkDescriptorSetLayout* = 000002244FE93710

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

            pSetLayouts[1]:                 const VkDescriptorSetLayout = CFCDA0000000001E

        pushConstantRangeCount:         uint32_t = 0

        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pPipelineLayout:                VkPipelineLayout* = 0980B0000000002E



elapsed targets 0ms
elapsed before loop 0ms
elapsed before frag 0ms
elapsed before raw 0ms
Thread 0, Frame 0:

vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0000002FCC4F19C0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)

        pNext:                          const void* = NULL

        flags:                          VkShaderModuleCreateFlags = 0

        codeSize:                       size_t = 8464

        pCode:                          const uint32_t* = SHADER DATA

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pShaderModule:                  VkShaderModule* = 4B7DF1000000002F



Thread 0, Frame 0:

vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0000002FCC4F19C0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)

        pNext:                          const void* = NULL

        flags:                          VkShaderModuleCreateFlags = 0

        codeSize:                       size_t = 11436

        pCode:                          const uint32_t* = SHADER DATA

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pShaderModule:                  VkShaderModule* = A21A4E0000000030



Thread 0, Frame 0:

vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkRenderPassCreateInfo* = 0000002FCC4F1BA0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)

        pNext:                          const void* = NULL

        flags:                          VkRenderPassCreateFlags = 0

        attachmentCount:                uint32_t = 1

        pAttachments:                   const VkAttachmentDescription* = 000002245CF9F8A0

            pAttachments[0]:                const VkAttachmentDescription = 000002245CF9F8A0:

                flags:                          VkAttachmentDescriptionFlags = 0

                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)

                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)

                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

        subpassCount:                   uint32_t = 1

        pSubpasses:                     const VkSubpassDescription* = 0000002FCC4F1900

            pSubpasses[0]:                  const VkSubpassDescription = 0000002FCC4F1900:

                flags:                          VkSubpassDescriptionFlags = 0

                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

                inputAttachmentCount:           uint32_t = 0

                pInputAttachments:              const VkAttachmentReference* = NULL

                colorAttachmentCount:           uint32_t = 1

                pColorAttachments:              const VkAttachmentReference* = 000002245D579010

                    pColorAttachments[0]:           const VkAttachmentReference = 000002245D579010:

                        attachment:                     uint32_t = 0

                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

                pResolveAttachments:            const VkAttachmentReference* = 000002245D579020

                    pResolveAttachments[0]:         const VkAttachmentReference = 000002245D579020:

                        attachment:                     uint32_t = 4294967295

                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

                pDepthStencilAttachment:        const VkAttachmentReference* = NULL

                preserveAttachmentCount:        uint32_t = 0

                pPreserveAttachments:           const uint32_t* = NULL

        dependencyCount:                uint32_t = 0

        pDependencies:                  const VkSubpassDependency* = NULL

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pRenderPass:                    VkRenderPass* = 0EA7170000000031



Thread 0, Frame 0:

vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pipelineCache:                  VkPipelineCache = 0000000000000000

    createInfoCount:                uint32_t = 1

    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0000002FCC4F3B30

        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0000002FCC4F3B30:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)

            pNext:                          const void* = NULL

            flags:                          VkPipelineCreateFlags = 0

            stageCount:                     uint32_t = 2

            pStages:                        const VkPipelineShaderStageCreateInfo* = 0000002FCC4F24D8

                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0000002FCC4F24D8:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)

                    pNext:                          const void* = NULL

                    flags:                          VkPipelineShaderStageCreateFlags = 0

                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)

                    module:                         VkShaderModule = 4B7DF1000000002F

                    pName:                          const char* = "vs_main"

                    pSpecializationInfo:            const VkSpecializationInfo* = NULL

                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0000002FCC4F2508:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)

                    pNext:                          const void* = NULL

                    flags:                          VkPipelineShaderStageCreateFlags = 0

                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                    module:                         VkShaderModule = A21A4E0000000030

                    pName:                          const char* = "fs_main"

                    pSpecializationInfo:            const VkSpecializationInfo* = NULL

            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0000002FCC4F2600:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)

                pNext:                          const void* = NULL

                flags:                          VkPipelineVertexInputStateCreateFlags = 0

                vertexBindingDescriptionCount:  uint32_t = 0

                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0000000000000004

                vertexAttributeDescriptionCount: uint32_t = 0

                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0000000000000004

            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0000002FCC4F26C0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)

                pNext:                          const void* = NULL

                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0

                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)

                primitiveRestartEnable:         VkBool32 = 0

            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL

            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0000002FCC4F33F8:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)

                pNext:                          const void* = NULL

                flags:                          VkPipelineViewportStateCreateFlags = 0

                viewportCount:                  uint32_t = 1

                pViewports:                     const VkViewport* = UNUSED

                scissorCount:                   uint32_t = 1

                pScissors:                      const VkRect2D* = UNUSED

            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0000002FCC4F2B20:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)

                pNext:                          const void* = NULL

                flags:                          VkPipelineRasterizationStateCreateFlags = 0

                depthClampEnable:               VkBool32 = 0

                rasterizerDiscardEnable:        VkBool32 = 0

                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)

                cullMode:                       VkCullModeFlags = 0 (VK_CULL_MODE_NONE)

                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)

                depthBiasEnable:                VkBool32 = 0

                depthBiasConstantFactor:        float = 0

                depthBiasClamp:                 float = 0

                depthBiasSlopeFactor:           float = 0

                lineWidth:                      float = 1

            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0000002FCC4F34F0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)

                pNext:                          const void* = NULL

                flags:                          VkPipelineMultisampleStateCreateFlags = 0

                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

                sampleShadingEnable:            VkBool32 = 0

                minSampleShading:               float = 0

                pSampleMask:                    const VkSampleMask* = 0000002FCC4F34E8

                    pSampleMask[0]:                 const VkSampleMask = 4294967295

                alphaToCoverageEnable:          VkBool32 = 0

                alphaToOneEnable:               VkBool32 = 0

            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0000002FCC4F2DD8:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)

                pNext:                          const void* = NULL

                flags:                          VkPipelineDepthStencilStateCreateFlags = 0

                depthTestEnable:                VkBool32 = 0

                depthWriteEnable:               VkBool32 = 0

                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_NEVER (0)

                depthBoundsTestEnable:          VkBool32 = 0

                stencilTestEnable:              VkBool32 = 0

                front:                          VkStencilOpState = 0000002FCC4F2E00:

                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

                    compareMask:                    uint32_t = 0

                    writeMask:                      uint32_t = 0

                    reference:                      uint32_t = 0

                back:                           VkStencilOpState = 0000002FCC4F2E1C:

                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

                    compareMask:                    uint32_t = 0

                    writeMask:                      uint32_t = 0

                    reference:                      uint32_t = 0

                minDepthBounds:                 float = 0

                maxDepthBounds:                 float = 0

            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0000002FCC4F38F8:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)

                pNext:                          const void* = NULL

                flags:                          VkPipelineColorBlendStateCreateFlags = 0

                logicOpEnable:                  VkBool32 = 0

                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)

                attachmentCount:                uint32_t = 1

                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 000002244FEB5A20

                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 000002244FEB5A20:

                        blendEnable:                    VkBool32 = 0

                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)

                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)

                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)

                blendConstants:                 float[4] = 0000002FCC4F3920

                    blendConstants[0]:              float = 0

                    blendConstants[1]:              float = 0

                    blendConstants[2]:              float = 0

                    blendConstants[3]:              float = 0

            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 0000002FCC4F39A0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)

                pNext:                          const void* = NULL

                flags:                          VkPipelineDynamicStateCreateFlags = 0

                dynamicStateCount:              uint32_t = 4

                pDynamicStates:                 const VkDynamicState* = 0000002FCC4F22C0

                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)

                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)

                    pDynamicStates[2]:              const VkDynamicState = VK_DYNAMIC_STATE_BLEND_CONSTANTS (4)

                    pDynamicStates[3]:              const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)

            layout:                         VkPipelineLayout = 0980B0000000002E

            renderPass:                     VkRenderPass = 0EA7170000000031

            subpass:                        uint32_t = 0

            basePipelineHandle:             VkPipeline = 0000000000000000

            basePipelineIndex:              int32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pPipelines:                     VkPipeline* = 000002245D5792B0

        pPipelines[0]:                  VkPipeline = 4FAC1C0000000032



Thread 0, Frame 0:

vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    shaderModule:                   VkShaderModule = 4B7DF1000000002F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    shaderModule:                   VkShaderModule = A21A4E0000000030

    pAllocator:                     const VkAllocationCallbacks* = NULL



elapsed end 0ms
elapsed after raw 3ms
Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000002FCC4F93D8:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000002FCC4F93E0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000002FCC4F93E8:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000002FCC4F93F0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000002244FBA3360

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000002244FBA3440

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000002244FBA3440:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000002244FBA3448:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000002244FBA3450:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000002FCC4F8C00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000002FCC4F8BF0

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000002FCC4F8BF8

            pValues[0]:                     const uint64_t = 1

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkFreeMemory(device, memory, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    memory:                         VkDeviceMemory = A7C5450000000023

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDeviceWaitIdle(device) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = CAD092000000000D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 967DD1000000000E

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = E7E6D0000000000F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = D5B26F0000000010

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult[2024-02-10T19:54:05Z INFO  wgpu_core::device::ray_tracing] Created blas Id(1,1,vk) with CreateBlasDescriptor { label: None, flags: AccelerationStructureFlags(PREFER_FAST_BUILD), update_mode: Build }
[2024-02-10T19:54:05Z INFO  wgpu_core::device::ray_tracing] Created tlas Id(0,1,vk) with CreateTlasDescriptor { label: None, max_instances: 2, flags: AccelerationStructureFlags(PREFER_FAST_TRACE), update_mode: Build }
[2024-02-10T19:54:05Z INFO  wgpu_examples::framework] Surface resize PhysicalSize { width: 1424, height: 714 }
 VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0000002FCC4F8640:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)

        pNext:                          const void* = NULL

        flags:                          VkSwapchainCreateFlagsKHR = 0

        surface:                        VkSurfaceKHR = EAD9370000000008

        minImageCount:                  uint32_t = 3

        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        imageExtent:                    VkExtent2D = 0000002FCC4F866C:

            width:                          uint32_t = 1424

            height:                         uint32_t = 714

        imageArrayLayers:               uint32_t = 1

        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        clipped:                        VkBool32 = 1

        oldSwapchain:                   VkSwapchainKHR = EE647E0000000009

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSwapchain:                     VkSwapchainKHR* = A808D50000000033



Thread 0, Frame 0:

vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = EE647E0000000009

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = A808D50000000033

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = A808D50000000033

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = 000002244FBA3000

        pSwapchainImages[0]:            VkImage = 2B424A0000000034

        pSwapchainImages[1]:            VkImage = 4295AB0000000035

        pSwapchainImages[2]:            VkImage = 9638F80000000036



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7BC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 2723BA0000000037



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 59F7450000000038



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 944A2C0000000039



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 210D07000000003A



RTUniforms { view_inverse: [[0.08838836, -0.0, 0.08838836, -0.0], [0.02123436, 0.64714247, -0.02123436, 0.0], [-0.085799776, 0.16015957, 0.085799776, -0.0], [-24.999998, 46.666664, 25.000002, 1.0000001]], proj_inverse: [[1.128376, 0.0, -0.0, 0.0], [0.0, 0.56577283, 0.0, -0.0], [-0.0, 0.0, -0.0, -999.999], [0.0, -0.0, -1.0, 1000.00006]] }
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F8D40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 5EB05E000000003B



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 5EB05E000000003B

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F8BC8:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 5EB05E000000003B

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 8388480



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F88D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 6823056789559312443

        pObjectName:                    const char* = "(wgpu internal) Staging"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 20481 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 5EB05E000000003B [(wgpu internal) Staging]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0AB8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = 5EB05E000000003B [(wgpu internal) Staging]

    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F8E38

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F8E38:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageCreateInfo* = 0000002FCC4F6650:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)

        pNext:                          const void* = NULL

        flags:                          VkImageCreateFlags = 0

        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        extent:                         VkExtent3D = 0000002FCC4F666C:

            width:                          uint32_t = 1424

            height:                         uint32_t = 714

            depth:                          uint32_t = 1

        mipLevels:                      uint32_t = 1

        arrayLayers:                    uint32_t = 1

        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)

        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pImage:                         VkImage* = 9F9B41000000003C



Thread 0, Frame 0:

vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 9F9B41000000003C

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F6398:

        size:                           VkDeviceSize = 4374528

        alignment:                      VkDeviceSize = 1024

        memoryTypeBits:                 uint32_t = 3



Thread 0, Frame 0:

vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 9F9B41000000003C

    memory:                         VkDeviceMemory = 27D60E0000000019

    memoryOffset:                   VkDeviceSize = 8388608



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F60A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)

        objectHandle:                   uint64_t = 11500857541676499004

        pObjectName:                    const char* = "Depth Buffer"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F6AD8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 9F9B41000000003C [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F6B00:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F6B10:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F6CE0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 59FFE0000000003D



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6680:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 6485148279041425469

        pObjectName:                    const char* = "(wgpu internal) clear texture view"



Thread 0, Frame 0:

vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSamplerCreateInfo* = 0000002FCC4F9240:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)

        pNext:                          const void* = NULL

        flags:                          VkSamplerCreateFlags = 0

        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)

        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        mipLodBias:                     float = 0

        anisotropyEnable:               VkBool32 = 0

        maxAnisotropy:                  float = 0

        compareEnable:                  VkBool32 = 0

        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

        minLod:                         float = 0

        maxLod:                         float = 32

        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)

        unnormalizedCoordinates:        VkBool32 = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSampler:                       VkSampler* = 5C5283000000003E



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F8E30:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)

        objectHandle:                   uint64_t = 6652523635602882622

        pObjectName:                    const char* = "Depth Sampler"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F8678:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 9F9B41000000003C [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F86A0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F86B0:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F8880:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 808562000000003F



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000002FCC4F5E58:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = B12FB2000000002C

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000002FCC4F5EF8

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

    pDescriptorSets:                VkDescriptorSet* = 000002245D578D70

        pDescriptorSets[0]:             VkDescriptorSet = 56C9BD0000000040



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6580:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)

        objectHandle:                   uint64_t = 6253737365278294080

        pObjectName:                    const char* = "Water Bind Group"



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 0000022451C15B50

    descriptorWriteCount:           uint32_t = 3

    pDescriptorWrites:              const VkWriteDescriptorSet* = 000002245CF13C90

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000002245CF13C90:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = 000002244FBA30A0

                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000002244FBA30A0:

                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

                    offset:                         VkDeviceSize = 0

                    range:                          VkDeviceSize = 18446744073709551615

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000002245CF13CD0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]

            dstBinding:                     uint32_t = 1

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FBA34A0

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FBA34A0:

                    sampler:                        VkSampler = 0000000000000000

                    imageView:                      VkImageView = 808562000000003F

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 000002245CF13D10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]

            dstBinding:                     uint32_t = 2

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FBA30E0

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FBA30E0:

                    sampler:                        VkSampler = 5C5283000000003E [Depth Sampler]

                    imageView:                      VkImageView = 0000000000000000

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF727D54920



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000002FCC4F93D8:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000002FCC4F93E0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000002FCC4F93E8:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000002FCC4F93F0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000002244FBA3280

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000002244FBA3580

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000002244FBA3580:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000002244FBA3588:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000002244FBA3590:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000002FCC4F8C00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000002FCC4F8BF0

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000002FCC4F8BF8

            pValues[0]:                     const uint64_t = 1

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    descriptorPool:                 VkDescriptorPool = B12FB2000000002C

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4F7A88

        pDescriptorSets[0]:             const VkDescriptorSet = A43473000000002D [Water Bind Group]



Thread 0, Frame 0:

vkDestroySampler(device, sampler, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    sampler:                        VkSampler = BA7514000000002A [Depth Sampler]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 02E2CD000000002B

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B9181F0000000029 [(wgpu internal) clear texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImage(device, image, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 3FBCD60000000028 [Depth Buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDeviceWaitIdle(device) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 2723BA0000000037

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 59F7450000000038

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 944A2C0000000039

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 210D07000000003A

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0000002FCC4F8640:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)

        pNext:                          const void* = NULL

        flags:                          VkSwapchainCreateFlagsKHR = 0

        surface:                        VkSurfaceKHR = EAD9370000000008

        minImageCount:                  uint32_t = 3

        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        imageExtent:                    VkExtent2D = 0000002FCC4F866C:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        imageArrayLayers:               uint32_t = 1

        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        clipped:                        VkBool32 = 1

        oldSwapchain:                   VkSwapchainKHR = A808D50000000033

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSwapchain:                     VkSwapchainKHR* = 6612E40000000041



Thread 0, Frame 0:

vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = A808D50000000033

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 6612E40000000041

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 6612E40000000041

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = 000002244FBA3160

        pSwapchainImages[0]:            VkImage = 89E60F0000000042

        pSwapchainImages[1]:            VkImage = 535B660000000043

        pSwapchainImages[2]:            VkImage = 603CD90000000044



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7BC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 8CC1D80000000045



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 4F8A8B0000000046



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 69EEAA0000000047



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 7323F50000000048



RTUniforms { view_inverse: [[0.08838836, -0.0, 0.08838836, -0.0], [0.02123436, 0.64714247, -0.02123436, 0.0], [-0.085799776, 0.16015957, 0.085799776, -0.0], [-24.999998, 46.666664, 25.000002, 1.0000001]], proj_inverse: [[0.7543638, 0.0, -0.0, 0.0], [0.0, 0.56577283, 0.0, -0.0], [-0.0, 0.0, -0.0, -999.9991], [0.0, -0.0, -1.0, 1000.0]] }
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F8D40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 40B43C0000000049



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 40B43C0000000049

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F8BC8:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 40B43C0000000049

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 8388352



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F88D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 4662417484932972617

        pObjectName:                    const char* = "(wgpu internal) Staging"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 20481 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 40B43C0000000049 [(wgpu internal) Staging]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0AB8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = 40B43C0000000049 [(wgpu internal) Staging]

    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F8E38

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F8E38:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageCreateInfo* = 0000002FCC4F6650:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)

        pNext:                          const void* = NULL

        flags:                          VkImageCreateFlags = 0

        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        extent:                         VkExtent3D = 0000002FCC4F666C:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

            depth:                          uint32_t = 1

        mipLevels:                      uint32_t = 1

        arrayLayers:                    uint32_t = 1

        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)

        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pImage:                         VkImage* = 74D977000000004A



Thread 0, Frame 0:

vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 74D977000000004A

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F6398:

        size:                           VkDeviceSize = 2048000

        alignment:                      VkDeviceSize = 1024

        memoryTypeBits:                 uint32_t = 3



Thread 0, Frame 0:

vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 74D977000000004A

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 4194304



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F60A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)

        objectHandle:                   uint64_t = 8419891820229558346

        pObjectName:                    const char* = "Depth Buffer"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F6AD8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 74D977000000004A [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F6B00:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F6B10:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F6CE0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 67022E000000004B



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6680:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 7422545713394876491

        pObjectName:                    const char* = "(wgpu internal) clear texture view"



Thread 0, Frame 0:

vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSamplerCreateInfo* = 0000002FCC4F9240:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)

        pNext:                          const void* = NULL

        flags:                          VkSamplerCreateFlags = 0

        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)

        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        mipLodBias:                     float = 0

        anisotropyEnable:               VkBool32 = 0

        maxAnisotropy:                  float = 0

        compareEnable:                  VkBool32 = 0

        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

        minLod:                         float = 0

        maxLod:                         float = 32

        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)

        unnormalizedCoordinates:        VkBool32 = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSampler:                       VkSampler* = 45D6D1000000004C



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F8E30:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)

        objectHandle:                   uint64_t = 5032439431563313228

        pObjectName:                    const char* = "Depth Sampler"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F8678:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 74D977000000004A [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F86A0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F86B0:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F8880:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 73A850000000004D



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000002FCC4F5E58:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = B12FB2000000002C

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000002FCC4F5EF8

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

    pDescriptorSets:                VkDescriptorSet* = 000002245D578D70

        pDescriptorSets[0]:             VkDescriptorSet = 612F93000000004E



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6580:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)

        objectHandle:                   uint64_t = 7002977573793693774

        pObjectName:                    const char* = "Water Bind Group"



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 0000022451C15B50

    descriptorWriteCount:           uint32_t = 3

    pDescriptorWrites:              const VkWriteDescriptorSet* = 000002245CF13D60

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000002245CF13D60:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 612F93000000004E [Water Bind Group]

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = 000002244FBA3220

                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000002244FBA3220:

                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

                    offset:                         VkDeviceSize = 0

                    range:                          VkDeviceSize = 18446744073709551615

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000002245CF13DA0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 612F93000000004E [Water Bind Group]

            dstBinding:                     uint32_t = 1

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FBA3280

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FBA3280:

                    sampler:                        VkSampler = 0000000000000000

                    imageView:                      VkImageView = 73A850000000004D

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 000002245CF13DE0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 612F93000000004E [Water Bind Group]

            dstBinding:                     uint32_t = 2

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FBA30C0

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FBA30C0:

                    sampler:                        VkSampler = 45D6D1000000004C [Depth Sampler]

                    imageView:                      VkImageView = 0000000000000000

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF727D54920



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000002FCC4F93D8:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000002FCC4F93E0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000002FCC4F93E8:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000002FCC4F93F0:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000002244FBA3280

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000002244A97E440

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000002244FBA30C0

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000002244FBA30C0:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000002244FBA30C8:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000002244FBA30D0:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000002FCC4F8C00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000002FCC4F8BF0

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000002FCC4F8BF8

            pValues[0]:                     const uint64_t = 1

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    descriptorPool:                 VkDescriptorPool = B12FB2000000002C

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4F7A88

        pDescriptorSets[0]:             const VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]



Thread 0, Frame 0:

vkDestroySampler(device, sampler, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    sampler:                        VkSampler = 5C5283000000003E [Depth Sampler]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 808562000000003F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 59FFE0000000003D [(wgpu internal) clear texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImage(device, image, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 9F9B41000000003C [Depth Buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDeviceWaitIdle(device) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 8CC1D80000000045

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 4F8A8B0000000046

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 69EEAA0000000047

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 7323F50000000048

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0000002FCC4F8640:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)

        pNext:                          const void* = NULL

        flags:                          VkSwapchainCreateFlagsKHR = 0

        surface:                        VkSurfaceKHR = EAD9370000000008

        minImageCount:                  uint32_t = 3

        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        imageExtent:                    VkExtent2D = 0000002FCC4F866C:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        imageArrayLayers:               uint32_t = 1

        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        clipped:                        VkBool32 = 1

        oldSwapchain:                   VkSwapchainKHR = 6612E40000000041

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSwapchain:                     VkSwapchainKHR* = 7CD292000000004F



Thread 0, Frame 0:

vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 6612E40000000041

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = 000002244FBA3440

        pSwapchainImages[0]:            VkImage = 7F79AD0000000050

        pSwapchainImages[1]:            VkImage = 7DDD740000000051

        pSwapchainImages[2]:            VkImage = 72303F0000000052



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7BC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 02A7F70000000053



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 74EA280000000054



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 6871490000000055



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000002FCC4F7A70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 05C59A0000000056



RTUniforms { view_inverse: [[0.08838836, -0.0, 0.08838836, -0.0], [0.02123436, 0.64714247, -0.02123436, 0.0], [-0.085799776, 0.16015957, 0.085799776, -0.0], [-24.999998, 46.666664, 25.000002, 1.0000001]], proj_inverse: [[0.7543638, 0.0, -0.0, 0.0], [0.0, 0.56577283, 0.0, -0.0], [-0.0, 0.0, -0.0, -999.9991], [0.0, -0.0, -1.0, 1000.0]] }
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkBufferCreateInfo* = 0000002FCC4F8D40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 73B89B0000000057



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 73B89B0000000057

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F8BC8:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 73B89B0000000057

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 8388224



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F88D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 8338585134378778711

        pObjectName:                    const char* = "(wgpu internal) Staging"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 20481 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0A80

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0A80:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 73B89B0000000057 [(wgpu internal) Staging]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000002245B5B0AB8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = 73B89B0000000057 [(wgpu internal) Staging]

    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000002FCC4F8E38

        pRegions[0]:                    const VkBufferCopy = 0000002FCC4F8E38:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageCreateInfo* = 0000002FCC4F6650:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)

        pNext:                          const void* = NULL

        flags:                          VkImageCreateFlags = 0

        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        extent:                         VkExtent3D = 0000002FCC4F666C:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

            depth:                          uint32_t = 1

        mipLevels:                      uint32_t = 1

        arrayLayers:                    uint32_t = 1

        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)

        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pImage:                         VkImage* = 625F640000000058



Thread 0, Frame 0:

vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 625F640000000058

    pMemoryRequirements:            VkMemoryRequirements* = 0000002FCC4F6398:

        size:                           VkDeviceSize = 2048000

        alignment:                      VkDeviceSize = 1024

        memoryTypeBits:                 uint32_t = 3



Thread 0, Frame 0:

vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 625F640000000058

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 6291456



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F60A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)

        objectHandle:                   uint64_t = 7088494289667227736

        pObjectName:                    const char* = "Depth Buffer"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F6AD8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 625F640000000058 [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F6B00:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F6B10:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F6CE0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0EE24D0000000059



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6680:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 1072504323662938201

        pObjectName:                    const char* = "(wgpu internal) clear texture view"



Thread 0, Frame 0:

vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkSamplerCreateInfo* = 0000002FCC4F9240:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)

        pNext:                          const void* = NULL

        flags:                          VkSamplerCreateFlags = 0

        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)

        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        mipLodBias:                     float = 0

        anisotropyEnable:               VkBool32 = 0

        maxAnisotropy:                  float = 0

        compareEnable:                  VkBool32 = 0

        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

        minLod:                         float = 0

        maxLod:                         float = 32

        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)

        unnormalizedCoordinates:        VkBool32 = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSampler:                       VkSampler* = 4868E6000000005A



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F8E30:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)

        objectHandle:                   uint64_t = 5217673055983108186

        pObjectName:                    const char* = "Depth Sampler"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F8678:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 625F640000000058 [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000002FCC4F86A0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F86B0:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F8880:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 6DCC3F000000005B



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000002FCC4F5E58:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = B12FB2000000002C

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000002FCC4F5EF8

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

    pDescriptorSets:                VkDescriptorSet* = 000002245D579280

        pDescriptorSets[0]:             VkDescriptorSet = 130160000000005C



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F6580:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)

        objectHandle:                   uint64_t = 1369481314813608028

        pObjectName:                    const char* = "Water Bind Group"



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 0000022451C15B50

    descriptorWriteCount:           uint32_t = 3

    pDescriptorWrites:              const VkWriteDescriptorSet* = 000002245CF12D20

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000002245CF12D20:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 130160000000005C [Water Bind Group]

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = 000002244FBA31A0

                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000002244FBA31A0:

                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

                    offset:                         VkDeviceSize = 0

                    range:                          VkDeviceSize = 18446744073709551615

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000002245CF12D60:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 130160000000005C [Water Bind Group]

            dstBinding:                     uint32_t = 1

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FBA35A0

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FBA35A0:

                    sampler:                        VkSampler = 0000000000000000

                    imageView:                      VkImageView = 6DCC3F000000005B

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 000002245CF12DA0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = 130160000000005C [Water Bind Group]

            dstBinding:                     uint32_t = 2

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

            pImageInfo:                     const VkDescriptorImageInfo* = 000002244FBA3540

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000002244FBA3540:

                    sampler:                        VkSampler = 4868E6000000005A [Depth Sampler]

                    imageView:                      VkImageView = 0000000000000000

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF727D54920



Thread 0, Frame 0:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 4256C1000000005D



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 4780220260244521053

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 96FBE2000000005E



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkRenderPassCreateInfo* = 0000002FCC4E5920:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)

        pNext:                          const void* = NULL

        flags:                          VkRenderPassCreateFlags = 0

        attachmentCount:                uint32_t = 1

        pAttachments:                   const VkAttachmentDescription* = 000002245CF9F8A0

            pAttachments[0]:                const VkAttachmentDescription = 000002245CF9F8A0:

                flags:                          VkAttachmentDescriptionFlags = 0

                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)

                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)

                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

        subpassCount:                   uint32_t = 1

        pSubpasses:                     const VkSubpassDescription* = 0000002FCC4E5680

            pSubpasses[0]:                  const VkSubpassDescription = 0000002FCC4E5680:

                flags:                          VkSubpassDescriptionFlags = 0

                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

                inputAttachmentCount:           uint32_t = 0

                pInputAttachments:              const VkAttachmentReference* = NULL

                colorAttachmentCount:           uint32_t = 1

                pColorAttachments:              const VkAttachmentReference* = 000002245D578D70

                    pColorAttachments[0]:           const VkAttachmentReference = 000002245D578D70:

                        attachment:                     uint32_t = 0

                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

                pResolveAttachments:            const VkAttachmentReference* = 000002245D579020

                    pResolveAttachments[0]:         const VkAttachmentReference = 000002245D579020:

                        attachment:                     uint32_t = 4294967295

                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

                pDepthStencilAttachment:        const VkAttachmentReference* = NULL

                preserveAttachmentCount:        uint32_t = 0

                pPreserveAttachments:           const uint32_t* = NULL

        dependencyCount:                uint32_t = 0

        pDependencies:                  const VkSubpassDependency* = NULL

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pRenderPass:                    VkRenderPass* = 176083000000005F



Thread 0, Frame 0:

vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkFramebufferCreateInfo* = 0000002FCC4E56E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)

        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo

        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)

        renderPass:                     VkRenderPass = 176083000000005F

        attachmentCount:                uint32_t = 1

        pAttachments:                   const VkImageView* = NULL

        width:                          uint32_t = 800

        height:                         uint32_t = 600

        layers:                         uint32_t = 1

        pNext:                          VkFramebufferAttachmentsCreateInfo = 0000002FCC4E5680:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)

            pNext:                          const void* = NULL

            attachmentImageInfoCount:       uint32_t = 1

            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 0000002FCC4E52E8

                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 0000002FCC4E52E8:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)

                    pNext:                          const void* = NULL

                    flags:                          VkImageCreateFlags = 0

                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

                    width:                          uint32_t = 800

                    height:                         uint32_t = 600

                    layerCount:                     uint32_t = 1

                    viewFormatCount:                uint32_t = 1

                    pViewFormats:                   const VkFormat* = 0000002FCC4E50E0

                        pViewFormats[0]:                const VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pFramebuffer:                   VkFramebuffer* = 44349C0000000060



Thread 0, Frame 0:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 0:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 0:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 96FBE2000000005E

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 0:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 0:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 0:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 0:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 0:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 768 (VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 1536 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 625F640000000058 [Depth Buffer]

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 0:

vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkRenderPassCreateInfo* = 0000002FCC4EE810:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)

        pNext:                          const void* = NULL

        flags:                          VkRenderPassCreateFlags = 0

        attachmentCount:                uint32_t = 1

        pAttachments:                   const VkAttachmentDescription* = 000002245CF9FDA0

            pAttachments[0]:                const VkAttachmentDescription = 000002245CF9FDA0:

                flags:                          VkAttachmentDescriptionFlags = 0

                format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)

                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)

                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)

                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)

        subpassCount:                   uint32_t = 1

        pSubpasses:                     const VkSubpassDescription* = 0000002FCC4EE570

            pSubpasses[0]:                  const VkSubpassDescription = 0000002FCC4EE570:

                flags:                          VkSubpassDescriptionFlags = 0

                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

                inputAttachmentCount:           uint32_t = 0

                pInputAttachments:              const VkAttachmentReference* = NULL

                colorAttachmentCount:           uint32_t = 0

                pColorAttachments:              const VkAttachmentReference* = 0000000000000004

                pResolveAttachments:            const VkAttachmentReference* = 0000000000000004

                pDepthStencilAttachment:        const VkAttachmentReference* = 0000002FCC4EE09C:

                    attachment:                     uint32_t = 0

                    layout:                         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)

                preserveAttachmentCount:        uint32_t = 0

                pPreserveAttachments:           const uint32_t* = NULL

        dependencyCount:                uint32_t = 0

        pDependencies:                  const VkSubpassDependency* = NULL

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pRenderPass:                    VkRenderPass* = 9389C50000000061



Thread 0, Frame 0:

vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkFramebufferCreateInfo* = 0000002FCC4EE5D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)

        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo

        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)

        renderPass:                     VkRenderPass = 9389C50000000061

        attachmentCount:                uint32_t = 1

        pAttachments:                   const VkImageView* = NULL

        width:                          uint32_t = 800

        height:                         uint32_t = 600

        layers:                         uint32_t = 1

        pNext:                          VkFramebufferAttachmentsCreateInfo = 0000002FCC4EE570:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)

            pNext:                          const void* = NULL

            attachmentImageInfoCount:       uint32_t = 1

            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 0000002FCC4EE1D8

                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 0000002FCC4EE1D8:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)

                    pNext:                          const void* = NULL

                    flags:                          VkImageCreateFlags = 0

                    usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

                    width:                          uint32_t = 800

                    height:                         uint32_t = 600

                    layerCount:                     uint32_t = 1

                    viewFormatCount:                uint32_t = 1

                    pViewFormats:                   const VkFormat* = 0000002FCC4EDFD0

                        pViewFormats[0]:                const VkFormat = VK_FORMAT_D32_SFLOAT (126)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pFramebuffer:                   VkFramebuffer* = 1D4E2E0000000062



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4ECA50:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_FRAMEBUFFER (24)

        objectHandle:                   uint64_t = 2111675852818219106

        pObjectName:                    const char* = "(wgpu internal) clear_texture clear pass"



Thread 0, Frame 0:

vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pLabelInfo:                     const VkDebugUtilsLabelEXT* = 0000002FCC4EEBF0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (1000128002)

        pNext:                          const void* = NULL

        pLabelName:                     const char* = "(wgpu internal) clear_texture clear pass"

        color:                          float[4] = 0000002FCC4EEC08

            color[0]:                       float = 0

            color[1]:                       float = 0

            color[2]:                       float = 0

            color[3]:                       float = 0



Thread 0, Frame 0:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4EFB60

        pViewports[0]:                  const VkViewport = 0000002FCC4EFB60:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 0:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4F0310

        pScissors[0]:                   const VkRect2D = 0000002FCC4F0310:

            offset:                         VkOffset2D = 0000002FCC4F0310:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4F0318:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 0:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4F0090:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 9389C50000000061

        framebuffer:                    VkFramebuffer = 1D4E2E0000000062 [(wgpu internal) clear_texture clear pass]

        renderArea:                     VkRect2D = 0000002FCC4F00B0:

            offset:                         VkOffset2D = 0000002FCC4F00B0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4F00B8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4EEE28

            pClearValues[0]:                const VkClearValue = 0000002FCC4EEE28 (Union):

                color:                          VkClearColorValue = 0000002FCC4EEE28 (Union):

                    float32:                        float[4] = 0000002FCC4EEE28

                        float32[0]:                     float = 0

                        float32[1]:                     float = 0

                        float32[2]:                     float = 5.04467e-44

                        float32[3]:                     float = 0

                    int32:                          int32_t[4] = 0000002FCC4EEE28

                        int32[0]:                       int32_t = 0

                        int32[1]:                       int32_t = 0

                        int32[2]:                       int32_t = 36

                        int32[3]:                       int32_t = 0

                    uint32:                         uint32_t[4] = 0000002FCC4EEE28

                        uint32[0]:                      uint32_t = 0

                        uint32[1]:                      uint32_t = 0

                        uint32[2]:                      uint32_t = 36

                        uint32[3]:                      uint32_t = 0

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4EEE28:

                    depth:                          float = 0

                    stencil:                        uint32_t = 0

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4F01D8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4EEF40

                pAttachments[0]:                const VkImageView = 0EE24D0000000059 [(wgpu internal) clear texture view]

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 0:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 0:

vkCmdEndDebugUtilsLabelEXT(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 10376 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000002245B5B0300

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000002245B5B0300:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 8 (VK_ACCESS_UNIFORM_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF727D283E8



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 769 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT)

    dstStageMask:                   VkPipelineStageFlags = 3208 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 2

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 1536 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 625F640000000058 [Depth Buffer]

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1

        pImageMemoryBarriers[1]:        const VkImageMemoryBarrier = 000002245D562838:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562868:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]



Thread 0, Frame 0:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 2

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

                pWaitSemaphores[1]:             const VkSemaphore = FAB64D0000000002

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA30A0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

                pWaitDstStageMask[1]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 5

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB53F0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D55E840 [(wgpu internal) PendingWrites]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[4]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FA21A40000000003

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 2

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 0:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 1



Thread 0, Frame 0:

vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    descriptorPool:                 VkDescriptorPool = B12FB2000000002C

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EF2C8

        pDescriptorSets[0]:             const VkDescriptorSet = 612F93000000004E [Water Bind Group]



Thread 0, Frame 0:

vkDestroySampler(device, sampler, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    sampler:                        VkSampler = 45D6D1000000004C [Depth Sampler]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 73A850000000004D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 67022E000000004B [(wgpu internal) clear texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyImage(device, image, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    image:                          VkImage = 74D977000000004A [Depth Buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13380

            pWaitSemaphores[0]:             const VkSemaphore = FA21A40000000003

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 1:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 1:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5EF3070000000063



Thread 0, Frame 1:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 6841819955487309923

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 1:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 9F58380000000064



Thread 0, Frame 1:

vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0000002FCC4F47B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)

        pNext:                          const void* = NULL

        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)

        queueFamilyIndex:               uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pCommandPool:                   VkCommandPool* = 5DBCF90000000065



Thread 0, Frame 1:

vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000002FCC4EA1D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)

        pNext:                          const void* = NULL

        commandPool:                    VkCommandPool = 5DBCF90000000065

        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)

        commandBufferCount:             uint32_t = 16

    pCommandBuffers:                VkCommandBuffer* = 000002245D5E06D0

        pCommandBuffers[0]:             VkCommandBuffer = 000002245D5F5270

        pCommandBuffers[1]:             VkCommandBuffer = 000002245D5FAEB0

        pCommandBuffers[2]:             VkCommandBuffer = 000002245D5FDCD0

        pCommandBuffers[3]:             VkCommandBuffer = 000002245D5F3B60

        pCommandBuffers[4]:             VkCommandBuffer = 000002245D603910

        pCommandBuffers[5]:             VkCommandBuffer = 000002245D602200

        pCommandBuffers[6]:             VkCommandBuffer = 000002245D606730

        pCommandBuffers[7]:             VkCommandBuffer = 000002245D607E40

        pCommandBuffers[8]:             VkCommandBuffer = 000002245D5FF3E0

        pCommandBuffers[9]:             VkCommandBuffer = 000002245D605020

        pCommandBuffers[10]:            VkCommandBuffer = 000002245D60AC60

        pCommandBuffers[11]:            VkCommandBuffer = 000002245D609550

        pCommandBuffers[12]:            VkCommandBuffer = 000002245D600AF0

        pCommandBuffers[13]:            VkCommandBuffer = 000002245D60F190

        pCommandBuffers[14]:            VkCommandBuffer = 000002245D611FB0

        pCommandBuffers[15]:            VkCommandBuffer = 000002245D60C370



Thread 0, Frame 1:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 1:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 1:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 1:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 1:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 9F58380000000064

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 1:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 1:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 1:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 1:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 1:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 1:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 1:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 1:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 1:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 1:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 1:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 1:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 1:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 1:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 1:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 1:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 1:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 1:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5150

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2FC0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB51E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 3

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 1:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 2



Thread 0, Frame 1:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 1:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 40B43C0000000049 [(wgpu internal) Staging]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 1:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = B097C90000000027 [(wgpu internal) Staging]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 1:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 5EB05E000000003B [(wgpu internal) Staging]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 1:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    buffer:                         VkBuffer = 73B89B0000000057 [(wgpu internal) Staging]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 1:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 96FBE2000000005E

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 1:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 4256C1000000005D [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 1:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 2:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 2:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5011AA0000000066



Thread 0, Frame 2:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 5769579514615038054

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 2:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 85798B0000000067



Thread 0, Frame 2:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 2:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 2:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 2:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 2:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 85798B0000000067

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 2:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 2:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 2:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 2:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 2:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 2:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 2:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 2:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 2:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 2:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 2:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 2:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 2:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 2:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 2:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 2:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 2:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 2:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3020

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 4

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 2:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 3



Thread 0, Frame 2:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 2:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 9F58380000000064

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 2:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5EF3070000000063 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 2:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 3:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 3:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5684940000000068



Thread 0, Frame 3:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 6234270511908520040

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 3:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 564FDD0000000069



Thread 0, Frame 3:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 3:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 3:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 3:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 3:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 564FDD0000000069

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 3:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 3:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 3:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 3:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 3:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 3:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 3:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 3:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 3:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 3:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 3:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 3:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 3:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 3:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 3:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 3:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 3:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 3:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3220

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5540

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 5

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 3:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 4



Thread 0, Frame 3:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 3:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 85798B0000000067

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 3:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5011AA0000000066 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



[2024-02-10T19:54:05Z INFO  wgpu_examples::framework] Surface resize PhysicalSize { width: 800, height: 600 }
[2024-02-10T19:54:05Z INFO  wgpu_examples::framework] Surface resize PhysicalSize { width: 800, height: 600 }
Thread 0, Frame 3:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 4:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 4:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 852B56000000006A



Thread 0, Frame 4:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 9595857989042962538

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 4:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 53E60F000000006B



Thread 0, Frame 4:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 4:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 4:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 4:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 4:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 53E60F000000006B

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 4:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 4:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 4:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 4:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 4:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 4:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 4:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 4:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 4:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 4:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 4:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 4:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 4:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 4:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 4:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 4:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 4:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 4:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5300

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 6

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 4:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 5



Thread 0, Frame 4:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 4:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 564FDD0000000069

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 4:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5684940000000068 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 4:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 5:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 5:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2C71F0000000006C



Thread 0, Frame 5:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 3202604692827799660

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 5:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 8F1C31000000006D



Thread 0, Frame 5:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 5:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 5:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 5:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 5:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 8F1C31000000006D

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 5:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 5:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 5:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 5:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 5:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 5:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 5:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 5:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 5:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 5:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 5:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 5:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 5:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 5:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 5:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 5:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 5:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 5:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5000

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA32E0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 7

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 5:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 6



Thread 0, Frame 5:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 5:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 53E60F000000006B

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 5:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 852B56000000006A [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 5:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 6:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 6:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 4E4775000000006E



Thread 0, Frame 6:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 5640605701165285486

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 6:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2D93AC000000006F



Thread 0, Frame 6:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 6:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 6:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 6:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 6:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 2D93AC000000006F

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 6:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 6:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 6:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 6:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 6:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 6:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 6:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 6:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 6:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 6:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 6:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 6:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 6:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 6:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 6:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 6:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 6:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 6:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54E0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3200

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5510

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 8

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 6:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 7



Thread 0, Frame 6:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 6:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 8F1C31000000006D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 6:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2C71F0000000006C [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 6:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 7:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 7:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B3EE8B0000000070



Thread 0, Frame 7:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12965453209362497648

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 7:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 44695A0000000071



Thread 0, Frame 7:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 7:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 7:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 7:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 7:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 44695A0000000071

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 7:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 7:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 7:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 7:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 7:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 7:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 7:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 7:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 7:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 7:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 7:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 7:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 7:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 7:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 7:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 7:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 7:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 7:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2F80

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB59C0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 9

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 7:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 8



Thread 0, Frame 7:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 7:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2D93AC000000006F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 7:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 4E4775000000006E [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 7:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 8:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 8:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2894590000000072



Thread 0, Frame 8:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 2924059914605166706

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 8:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B6BEE80000000073



Thread 0, Frame 8:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 8:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 8:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 8:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 8:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = B6BEE80000000073

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 8:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 8:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 8:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 8:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 8:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 8:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 8:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 8:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 8:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 8:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 8:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 8:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 8:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 8:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 8:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 8:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 8:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 8:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB51E0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3020

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB4F40

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 10

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 8:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 9



Thread 0, Frame 8:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 8:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 44695A0000000071

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 8:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B3EE8B0000000070 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 8:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 9:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 9:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 421A0F0000000074



Thread 0, Frame 9:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 4763136048572137588

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 9:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 33F7660000000075



Thread 0, Frame 9:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 9:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 9:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 9:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 9:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 33F7660000000075

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 9:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 9:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 9:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 9:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 9:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 9:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 9:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 9:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 9:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 9:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 9:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 9:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 9:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 9:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 9:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 9:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 9:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 9:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5150

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 11

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 9:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 10



Thread 0, Frame 9:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 9:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B6BEE80000000073

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 9:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2894590000000072 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 9:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 10:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 10:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = BD60BD0000000076



Thread 0, Frame 10:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13646114678630252662

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 10:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B82DE40000000077



Thread 0, Frame 10:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 10:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 10:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 10:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 10:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = B82DE40000000077

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 10:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 10:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 10:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 10:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 10:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 10:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 10:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 10:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 10:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 10:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 10:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 10:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 10:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 10:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 10:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 10:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 10:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 10:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5A20

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3200

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5510

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 12

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 10:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 11



Thread 0, Frame 10:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 10:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 33F7660000000075

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 10:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 421A0F0000000074 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 10:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 11:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 11:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 3F36830000000078



Thread 0, Frame 11:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 4554972109155074168

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 11:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = A182620000000079



Thread 0, Frame 11:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 11:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 11:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 11:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 11:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = A182620000000079

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 11:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 11:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 11:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 11:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 11:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 11:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 11:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 11:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 11:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 11:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 11:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 11:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 11:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 11:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 11:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 11:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 11:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 11:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5930

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB59F0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 13

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 11:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 12



Thread 0, Frame 11:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 11:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B82DE40000000077

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 11:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = BD60BD0000000076 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 11:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 12:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 12:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B3FFC1000000007A



Thread 0, Frame 12:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12970297657594478714

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 12:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 051820000000007B



Thread 0, Frame 12:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 12:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 12:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 12:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 12:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 051820000000007B

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 12:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 12:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 12:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 12:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 12:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 12:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 12:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 12:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 12:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 12:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 12:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 12:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 12:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 12:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 12:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 12:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 12:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 12:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3DA0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB51E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 14

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 12:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 13



Thread 0, Frame 12:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 12:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = A182620000000079

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 12:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 3F36830000000078 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 12:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 13:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 13:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B8A507000000007C



Thread 0, Frame 13:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13305048370717393020

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 13:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B4AE2E000000007D



Thread 0, Frame 13:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 13:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 13:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 13:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 13:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = B4AE2E000000007D

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 13:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 13:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 13:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 13:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 13:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 13:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 13:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 13:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 13:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 13:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 13:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 13:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 13:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 13:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 13:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 13:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 13:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 13:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3120

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB4EE0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 15

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 13:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 14



Thread 0, Frame 13:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 13:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 051820000000007B

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 13:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B3FFC1000000007A [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 13:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 14:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 14:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 010AC5000000007E



Thread 0, Frame 14:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 75088947595706494

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 14:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B3C7BC000000007F



Thread 0, Frame 14:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 14:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 14:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 14:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 14:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = B3C7BC000000007F

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 14:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 14:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 14:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 14:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 14:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 14:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 14:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 14:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 14:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 14:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 14:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 14:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 14:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 14:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 14:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 14:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 14:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 14:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54B0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3200

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB50C0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 16

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 14:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 15



Thread 0, Frame 14:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 14:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B4AE2E000000007D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 14:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B8A507000000007C [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 14:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 15:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 15:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = AD937B0000000080



Thread 0, Frame 15:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12507475830068215936

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 15:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0F3EAA0000000081



Thread 0, Frame 15:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 15:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 15:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 15:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 15:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 0F3EAA0000000081

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 15:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 15:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 15:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 15:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 15:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 15:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 15:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 15:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 15:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 15:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 15:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 15:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 15:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 15:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 15:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 15:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 15:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 15:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3300

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5510

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 17

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 15:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 16



Thread 0, Frame 15:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 15:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B3C7BC000000007F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 15:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 010AC5000000007E [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 15:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 16:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 16:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = CC25C90000000082



Thread 0, Frame 16:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 14710384759712776322

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 16:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = A171580000000083



Thread 0, Frame 16:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 16:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 16:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 16:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 16:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = A171580000000083

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 16:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 16:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 16:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 16:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 16:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 16:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 16:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 16:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 16:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 16:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 16:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 16:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 16:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 16:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 16:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 16:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 16:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 16:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3000

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 18

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 16:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 17



Thread 0, Frame 16:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 16:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 0F3EAA0000000081

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 16:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = AD937B0000000080 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 16:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 17:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 17:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 13CC1F0000000084



Thread 0, Frame 17:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 1426549266830065796

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 17:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = CA0B160000000085



Thread 0, Frame 17:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 17:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 17:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 17:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 17:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = CA0B160000000085

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 17:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 17:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 17:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 17:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 17:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 17:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 17:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 17:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 17:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 17:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 17:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 17:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 17:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 17:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 17:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 17:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 17:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 17:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB4F40

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3040

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB57E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 19

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 17:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 18



Thread 0, Frame 17:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 17:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = A171580000000083

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 17:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = CC25C90000000082 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 17:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 18:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 18:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = A6B6CD0000000086



Thread 0, Frame 18:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12013014455941070982

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 18:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 149D740000000087



Thread 0, Frame 18:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 18:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 18:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 18:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 18:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 149D740000000087

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 18:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 18:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 18:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 18:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 18:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 18:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 18:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 18:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 18:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 18:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 18:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 18:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 18:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 18:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 18:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 18:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 18:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 18:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5000

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3BA0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5390

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 20

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 18:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 19



Thread 0, Frame 18:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 18:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = CA0B160000000085

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 18:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 13CC1F0000000084 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 18:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 19:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 19:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = C079B30000000088



Thread 0, Frame 19:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13869313340045525128

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 19:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 93D4F20000000089



Thread 0, Frame 19:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 19:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 19:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 19:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 19:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 93D4F20000000089

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 19:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 19:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 19:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 19:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 19:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 19:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 19:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 19:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 19:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 19:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 19:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 19:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 19:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 19:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 19:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 19:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 19:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 19:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5930

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3300

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5510

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 21

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 19:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 20



Thread 0, Frame 19:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 19:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 149D740000000087

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 19:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = A6B6CD0000000086 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 19:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 20:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 20:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 1983B0000000008A



Thread 0, Frame 20:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 1838506586943783050

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 20:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = DE4E51000000008B



Thread 0, Frame 20:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 20:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 20:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 20:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 20:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = DE4E51000000008B

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 20:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 20:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 20:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 20:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 20:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 20:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 20:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 20:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 20:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 20:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 20:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 20:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 20:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 20:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 20:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 20:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 20:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 20:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5390

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3300

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5180

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 22

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 20:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 21



Thread 0, Frame 20:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 20:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 93D4F20000000089

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 20:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = C079B30000000088 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 20:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 21:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 21:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 9F1516000000008C



Thread 0, Frame 21:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 11463092615797276812

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 21:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E0601F000000008D



Thread 0, Frame 21:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 21:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 21:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 21:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 21:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = E0601F000000008D

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 21:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 21:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 21:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 21:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 21:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 21:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 21:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 21:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 21:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 21:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 21:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 21:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 21:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 21:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 21:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 21:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 21:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 21:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3300

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 23

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 21:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 22



Thread 0, Frame 21:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 21:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = DE4E51000000008B

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 21:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 1983B0000000008A [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 21:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 22:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 22:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = D3DD54000000008E



Thread 0, Frame 22:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 15266450670832582798

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 22:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 993A4D000000008F



Thread 0, Frame 22:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 22:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 22:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 22:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 22:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 993A4D000000008F

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 22:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 22:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 22:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 22:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 22:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 22:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 22:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 22:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 22:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 22:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 22:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 22:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 22:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 22:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 22:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 22:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 22:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 22:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5930

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3120

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB59C0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 24

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 22:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 23



Thread 0, Frame 22:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 22:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E0601F000000008D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 22:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 9F1516000000008C [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 22:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 23:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 23:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E647EA0000000090



Thread 0, Frame 23:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 16593488637790781584

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 23:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = D68CBB0000000091



Thread 0, Frame 23:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 23:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 23:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 23:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 23:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = D68CBB0000000091

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 23:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 23:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 23:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 23:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 23:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 23:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 23:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 23:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 23:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 23:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 23:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 23:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 23:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 23:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 23:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 23:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 23:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 23:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5000

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5390

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 25

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 23:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 24



Thread 0, Frame 23:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 23:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 993A4D000000008F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 23:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = D3DD54000000008E [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 23:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 24:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 24:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 8168780000000092



Thread 0, Frame 24:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 9324834969865945234

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 24:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = EC25C90000000093



Thread 0, Frame 24:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 24:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 24:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 24:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 24:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = EC25C90000000093

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 24:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 24:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 24:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 24:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 24:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 24:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 24:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 24:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 24:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 24:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 24:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 24:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 24:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 24:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 24:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 24:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 24:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 24:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3700

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB4EE0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 26

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 24:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 25



Thread 0, Frame 24:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 24:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = D68CBB0000000091

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 24:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E647EA0000000090 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 24:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 25:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 25:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E9B2EE0000000094



Thread 0, Frame 25:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 16839783640459116692

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 25:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 8F5F070000000095



Thread 0, Frame 25:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 25:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 25:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 25:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 25:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 8F5F070000000095

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 25:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 25:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 25:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 25:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 25:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 25:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 25:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 25:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 25:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 25:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 25:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 25:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 25:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 25:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 25:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 25:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 25:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 25:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5930

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3020

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 27

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 25:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 26



Thread 0, Frame 25:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 25:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = EC25C90000000093

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 25:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 8168780000000092 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 25:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 26:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 26:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = CE045C0000000096



Thread 0, Frame 26:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 14845091426789752982

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 26:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E150C50000000097



Thread 0, Frame 26:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 26:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 26:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 26:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 26:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = E150C50000000097

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 26:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 26:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 26:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 26:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 26:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 26:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 26:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 26:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 26:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 26:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 26:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 26:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 26:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 26:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 26:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 26:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 26:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 26:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5930

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5390

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 28

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 26:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 27



Thread 0, Frame 26:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 26:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 8F5F070000000095

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 26:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E9B2EE0000000094 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 26:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 27:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 27:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 8BADA20000000098



Thread 0, Frame 27:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 10064878863126626456

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 27:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = C82A830000000099



Thread 0, Frame 27:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 27:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 27:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 27:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 27:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = C82A830000000099

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 27:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 27:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 27:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 27:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 27:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 27:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 27:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 27:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 27:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 27:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 27:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 27:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 27:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 27:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 27:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 27:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 27:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 27:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB53C0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 29

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 27:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 28



Thread 0, Frame 27:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 27:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E150C50000000097

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 27:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = CE045C0000000096 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 27:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 28:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 28:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E750A0000000009A



Thread 0, Frame 28:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 16667998142758650010

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 28:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = F6FBC1000000009B



Thread 0, Frame 28:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 28:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 28:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 28:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 28:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = F6FBC1000000009B

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 28:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 28:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 28:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 28:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 28:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 28:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 28:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 28:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 28:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 28:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 28:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 28:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 28:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 28:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 28:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 28:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 28:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 28:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54E0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB51E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 30

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 28:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 29



Thread 0, Frame 28:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 28:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = C82A830000000099

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 28:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 8BADA20000000098 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 28:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 29:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 29:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = C25F26000000009C



Thread 0, Frame 29:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 14005955147587387548

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 29:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = FB320F000000009D



Thread 0, Frame 29:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 29:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 29:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 29:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 29:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = FB320F000000009D

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 29:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 29:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 29:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 29:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 29:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 29:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 29:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 29:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 29:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 29:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 29:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 29:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 29:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 29:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 29:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 29:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 29:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 29:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA32C0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB59F0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 31

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 29:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 30



Thread 0, Frame 29:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 29:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = F6FBC1000000009B

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 29:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E750A0000000009A [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 29:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 30:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 30:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = F9A524000000009E



Thread 0, Frame 30:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 17988823869019914398

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 30:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = FC68DD000000009F



Thread 0, Frame 30:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 30:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 30:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 30:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 30:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = FC68DD000000009F

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 30:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 30:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 30:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 30:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 30:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 30:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 30:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 30:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 30:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 30:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 30:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 30:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 30:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 30:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 30:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 30:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 30:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 30:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB53C0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3C40

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 32

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 30:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 31



Thread 0, Frame 30:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 30:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = FB320F000000009D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 30:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = C25F26000000009C [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 30:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 31:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 31:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = FEF35A00000000A0



Thread 0, Frame 31:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 18371126261020885152

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 31:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E2478B00000000A1



Thread 0, Frame 31:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 31:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 31:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 31:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 31:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = E2478B00000000A1

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 31:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 31:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 31:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 31:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 31:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 31:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 31:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 31:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 31:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 31:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 31:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 31:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 31:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 31:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 31:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 31:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 31:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 31:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB59F0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3140

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5000

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 33

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 31:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 32



Thread 0, Frame 31:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 31:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = FC68DD000000009F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 31:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = F9A524000000009E [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 31:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 32:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 32:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = FBBAE800000000A2



Thread 0, Frame 32:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 18139065535885738146

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 32:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = F9DDB900000000A3



Thread 0, Frame 32:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 32:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 32:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 32:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 32:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = F9DDB900000000A3

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 32:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 32:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 32:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 32:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 32:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 32:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 32:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 32:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 32:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 32:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 32:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 32:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 32:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 32:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 32:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 32:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 32:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 32:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5150

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA30A0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB57E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 34

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 32:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 33



Thread 0, Frame 32:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 32:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E2478B00000000A1

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 32:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = FEF35A00000000A0 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 32:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 33:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 33:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E4607E00000000A4



Thread 0, Frame 33:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 16456291576876892324

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 33:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = F0EB3400000000A5



Thread 0, Frame 33:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 33:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 33:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 33:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 33:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = F0EB3400000000A5

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 33:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 33:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 33:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 33:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 33:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 33:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 33:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 33:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 33:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 33:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 33:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 33:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 33:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 33:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 33:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 33:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 33:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 33:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB50C0

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5150

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 35

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 33:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 34



Thread 0, Frame 33:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 33:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = F9DDB900000000A3

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 33:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = FBBAE800000000A2 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 33:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 34:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 34:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 054FEF00000000A6



Thread 0, Frame 34:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 382787276628820134

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 34:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = EA035600000000A7



Thread 0, Frame 34:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 34:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 34:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 34:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 34:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = EA035600000000A7

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 34:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 34:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 34:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 34:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 34:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 34:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 34:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 34:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 34:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 34:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 34:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 34:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 34:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 34:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 34:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 34:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 34:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 34:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54B0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA32E0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5150

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 36

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 34:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 35



Thread 0, Frame 34:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 34:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = F0EB3400000000A5

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 34:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E4607E00000000A4 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 34:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 35:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 35:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E9D45100000000A8



Thread 0, Frame 35:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 16849181166341718184

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 35:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0F799000000000A9



Thread 0, Frame 35:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 35:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 35:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 35:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 35:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 0F799000000000A9

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 35:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 35:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 35:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 35:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 35:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 35:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 35:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 35:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 35:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 35:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 35:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 35:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 35:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 35:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 35:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 35:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 35:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 35:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5390

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3640

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 37

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 35:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 36



Thread 0, Frame 35:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 35:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = EA035600000000A7

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 35:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 054FEF00000000A6 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 35:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 36:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 36:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = D0E29300000000AA



Thread 0, Frame 36:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 15051754532834902186

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 36:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = ED367200000000AB



Thread 0, Frame 36:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 36:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 36:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 36:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 36:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = ED367200000000AB

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 36:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 36:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 36:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 36:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 36:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 36:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 36:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 36:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 36:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 36:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 36:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 36:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 36:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 36:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 36:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 36:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 36:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 36:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5A20

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3780

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 38

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 36:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 37



Thread 0, Frame 36:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 36:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 0F799000000000A9

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 36:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E9D45100000000A8 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 36:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 37:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 37:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0B8B3500000000AC



Thread 0, Frame 37:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 831816830296260780

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 37:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = C9CCFC00000000AD



Thread 0, Frame 37:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 37:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 37:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 37:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 37:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = C9CCFC00000000AD

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 37:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 37:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 37:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 37:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 37:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 37:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 37:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 37:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 37:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 37:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 37:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 37:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 37:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 37:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 37:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 37:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 37:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 37:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2F60

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB50C0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 39

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 37:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 38



Thread 0, Frame 37:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 37:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = ED367200000000AB

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 37:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = D0E29300000000AA [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 37:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 38:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 38:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = E7713700000000AE



Thread 0, Frame 38:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 16677171368269185198

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 38:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 10DA6E00000000AF



Thread 0, Frame 38:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 38:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 38:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 38:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 38:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 10DA6E00000000AF

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 38:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 38:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 38:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 38:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 38:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 38:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 38:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 38:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 38:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 38:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 38:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 38:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 38:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 38:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 38:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 38:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 38:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 38:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB4F40

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3220

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB50C0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 40

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 38:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 39



Thread 0, Frame 38:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 38:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = C9CCFC00000000AD

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 38:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 0B8B3500000000AC [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 38:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 39:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 39:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = C4BEC900000000B0



Thread 0, Frame 39:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 14176989678846083248

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 39:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 9B139800000000B1



Thread 0, Frame 39:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 39:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 39:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 39:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 39:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 9B139800000000B1

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 39:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 39:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 39:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 39:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 39:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 39:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 39:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 39:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 39:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 39:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 39:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 39:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 39:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 39:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 39:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 39:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 39:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 39:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5150

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA30A0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB57E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 41

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 39:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 40



Thread 0, Frame 39:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 39:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 10DA6E00000000AF

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 39:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = E7713700000000AE [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 39:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 40:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 40:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 1DC49B00000000B2



Thread 0, Frame 40:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 2145009746837504178

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 40:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = DF8AAA00000000B3



Thread 0, Frame 40:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 40:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 40:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 40:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 40:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = DF8AAA00000000B3

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 40:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 40:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 40:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 40:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 40:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 40:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 40:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 40:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 40:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 40:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 40:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 40:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 40:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 40:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 40:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 40:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 40:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 40:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5150

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB51E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 42

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 40:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 41



Thread 0, Frame 40:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 40:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 9B139800000000B1

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 40:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = C4BEC900000000B0 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 40:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 41:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 41:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 90D1CD00000000B4



Thread 0, Frame 41:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 10435347211477844148

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 41:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 1C252400000000B5



Thread 0, Frame 41:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 41:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 41:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 41:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 41:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 1C252400000000B5

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 41:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 41:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 41:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 41:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 41:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 41:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 41:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 41:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 41:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 41:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 41:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 41:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 41:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 41:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 41:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 41:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 41:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 41:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5390

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2F40

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 43

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 41:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 42



Thread 0, Frame 41:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 41:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = DF8AAA00000000B3

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 41:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 1DC49B00000000B2 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 41:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 42:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 42:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = DB987F00000000B6



Thread 0, Frame 42:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 15823536928742965430

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 42:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 95FF2600000000B7



Thread 0, Frame 42:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 42:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 42:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 42:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 42:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 95FF2600000000B7

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 42:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 42:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 42:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 42:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 42:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 42:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 42:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 42:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 42:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 42:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 42:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 42:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 42:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 42:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 42:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 42:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 42:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 42:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5390

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA39A0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 44

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 42:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 43



Thread 0, Frame 42:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 42:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 1C252400000000B5

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 42:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 90D1CD00000000B4 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 42:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 43:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 43:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2602C100000000B8



Thread 0, Frame 43:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 2738963729138843832

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 43:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = D6C9A000000000B9



Thread 0, Frame 43:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 43:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 43:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 43:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 43:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = D6C9A000000000B9

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 43:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 43:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 43:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 43:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 43:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 43:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 43:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 43:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 43:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 43:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 43:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 43:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 43:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 43:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 43:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 43:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 43:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 43:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5930

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3120

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB59C0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 45

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 43:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 44



Thread 0, Frame 43:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 43:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 95FF2600000000B7

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 43:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = DB987F00000000B6 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 43:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 44:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 44:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 84AD8300000000BA



Thread 0, Frame 44:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 9560441620000669882

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 44:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2860E200000000BB



Thread 0, Frame 44:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 44:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 44:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 44:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 44:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 2860E200000000BB

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 44:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 44:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 44:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 44:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 44:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 44:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 44:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 44:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 44:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 44:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 44:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 44:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 44:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 44:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 44:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 44:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 44:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 44:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB4EE0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5330

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 46

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 44:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 45



Thread 0, Frame 44:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 44:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = D6C9A000000000B9

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 44:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2602C100000000B8 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 44:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 45:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 45:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2DF7C500000000BC



Thread 0, Frame 45:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 3312332654744961212

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 45:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 8F9A6C00000000BD



Thread 0, Frame 45:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 45:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 45:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 45:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 45:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 8F9A6C00000000BD

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 45:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 45:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 45:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 45:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 45:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 45:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 45:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 45:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 45:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 45:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 45:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 45:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 45:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 45:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 45:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 45:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 45:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 45:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2F60

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 47

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 45:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 46



Thread 0, Frame 45:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 45:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2860E200000000BB

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 45:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 84AD8300000000BA [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 45:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 46:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 46:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2EC10700000000BE



Thread 0, Frame 46:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 3368981692831236286

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 46:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 2D15FE00000000BF



Thread 0, Frame 46:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 46:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 46:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 46:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 46:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 2D15FE00000000BF

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 46:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 46:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 46:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 46:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 46:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 46:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 46:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 46:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 46:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 46:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 46:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 46:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 46:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 46:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 46:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 46:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 46:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 46:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5600

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB57B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 48

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 46:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 47



Thread 0, Frame 46:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 46:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 8F9A6C00000000BD

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 46:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2DF7C500000000BC [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 46:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 47:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 47:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 88693900000000C0



Thread 0, Frame 47:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 9829450333875601600

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 47:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 35EE6900000000C1



Thread 0, Frame 47:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 47:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 47:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 47:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 47:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 35EE6900000000C1

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 47:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 47:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 47:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 47:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 47:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 47:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 47:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 47:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 47:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 47:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 47:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 47:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 47:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 47:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 47:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 47:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 47:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 47:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB4EE0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3680

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5510

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 49

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 47:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 48



Thread 0, Frame 47:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 47:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2D15FE00000000BF

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 47:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 2EC10700000000BE [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 47:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 48:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 48:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 27138A00000000C2



Thread 0, Frame 48:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 2815745924641325250

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 48:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B6389B00000000C3



Thread 0, Frame 48:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 48:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 48:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 48:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 48:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = B6389B00000000C3

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 48:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 48:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 48:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 48:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 48:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 48:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 48:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 48:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 48:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 48:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 48:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 48:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 48:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 48:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 48:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 48:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 48:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 48:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3D00

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 50

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 48:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 49



Thread 0, Frame 48:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 48:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 35EE6900000000C1

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 48:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 88693900000000C0 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 48:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 49:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 49:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 3A9C5C00000000C4



Thread 0, Frame 49:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 4223351705636438212

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 49:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 3B715500000000C5



Thread 0, Frame 49:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 49:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 49:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 49:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 49:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 3B715500000000C5

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 49:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 49:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 49:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 49:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 49:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 49:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 49:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 49:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 49:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 49:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 49:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 49:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 49:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 49:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 49:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 49:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 49:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 49:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5150

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 51

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 49:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 50



Thread 0, Frame 49:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 49:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B6389B00000000C3

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 49:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 27138A00000000C2 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 49:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 50:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 50:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = BDE60E00000000C6



Thread 0, Frame 50:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13683639910974619846

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 50:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = BFAB3700000000C7



Thread 0, Frame 50:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 50:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 50:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 50:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 50:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = BFAB3700000000C7

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 50:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 50:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 50:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 50:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 50:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 50:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 50:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 50:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 50:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 50:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 50:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 50:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 50:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 50:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 50:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 50:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 50:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 50:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA32E0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5390

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 52

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 50:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 51



Thread 0, Frame 50:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 50:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 3B715500000000C5

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 50:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 3A9C5C00000000C4 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 50:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 51:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 51:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 3EB07000000000C8



Thread 0, Frame 51:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 4517233571554918600

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 51:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = BA04B100000000C9



Thread 0, Frame 51:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 51:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 51:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 51:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 51:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = BA04B100000000C9

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 51:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 51:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 51:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 51:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 51:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 51:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 51:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 51:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 51:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 51:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 51:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 51:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 51:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 51:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 51:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 51:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 51:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 51:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54B0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3680

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB51E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 53

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 51:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 52



Thread 0, Frame 51:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 51:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = BFAB3700000000C7

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 51:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = BDE60E00000000C6 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 51:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 52:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 52:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = BB79F200000000CA



Thread 0, Frame 52:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13509094639088435402

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 52:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 359E9300000000CB



Thread 0, Frame 52:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 52:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 52:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 52:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 52:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 359E9300000000CB

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 52:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 52:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 52:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 52:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 52:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 52:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 52:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 52:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 52:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 52:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 52:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 52:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 52:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 52:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 52:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 52:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 52:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 52:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA2EE0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 54

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 52:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 53



Thread 0, Frame 52:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 52:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = BA04B100000000C9

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 52:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 3EB07000000000C8 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 52:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 53:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 53:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = A0235400000000CC



Thread 0, Frame 53:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 11539159029230076108

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 53:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B527DD00000000CD



Thread 0, Frame 53:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 53:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 53:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 53:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 53:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = B527DD00000000CD

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 53:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 53:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 53:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 53:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 53:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 53:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 53:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 53:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 53:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 53:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 53:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 53:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 53:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 53:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 53:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 53:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 53:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 53:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB53C0

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3200

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 55

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 53:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 54



Thread 0, Frame 53:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 53:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 359E9300000000CB

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 53:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = BB79F200000000CA [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 53:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 54:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 54:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0AF31600000000CE



Thread 0, Frame 54:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 788998548975780046

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 54:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = AA4E0F00000000CF



Thread 0, Frame 54:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 54:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 54:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 54:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 54:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = AA4E0F00000000CF

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 54:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 54:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 54:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 54:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 54:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 54:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 54:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 54:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 54:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 54:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 54:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 54:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 54:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 54:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 54:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 54:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 54:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 54:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57B0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA36C0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5000

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 56

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 54:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 55



Thread 0, Frame 54:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 54:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = B527DD00000000CD

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 54:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = A0235400000000CC [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 54:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 55:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 55:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = AD092800000000D0



Thread 0, Frame 55:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12468541023817040080

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 55:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0FB4F900000000D1



Thread 0, Frame 55:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 55:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 55:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 55:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 55:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 0FB4F900000000D1

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 55:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 55:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 55:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 55:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 55:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 55:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 55:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 55:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 55:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 55:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 55:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 55:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 55:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 55:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 55:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 55:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 55:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 55:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB51E0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3180

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5390

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 57

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 55:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 56



Thread 0, Frame 55:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 55:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = AA4E0F00000000CF

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 55:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 0AF31600000000CE [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 55:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 56:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 56:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = AC9FBA00000000D2



Thread 0, Frame 56:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12438865204983365842

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 56:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = AAFB8B00000000D3



Thread 0, Frame 56:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 56:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 56:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 56:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 56:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = AAFB8B00000000D3

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 56:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 56:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 56:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 56:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 56:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 56:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 56:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 56:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 56:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 56:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 56:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 56:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 56:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 56:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 56:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 56:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 56:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 56:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB53C0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3640

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 58

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 56:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 57



Thread 0, Frame 56:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 56:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 0FB4F900000000D1

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 56:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = AD092800000000D0 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 56:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 57:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 57:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 0A56AC00000000D4



Thread 0, Frame 57:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 744971904376373460

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 57:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5581C500000000D5



Thread 0, Frame 57:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 57:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 57:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 57:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 57:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 5581C500000000D5

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 57:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 57:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 57:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 57:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 57:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 57:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 57:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 57:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 57:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 57:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 57:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 57:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 57:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 57:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 57:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 57:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 57:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 57:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB57E0

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA32E0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 59

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 57:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 58



Thread 0, Frame 57:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 57:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = AAFB8B00000000D3

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 57:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = AC9FBA00000000D2 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 57:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 58:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 58:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = A7CC1E00000000D6



Thread 0, Frame 58:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 12091072084931772630

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 58:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 14170700000000D7



Thread 0, Frame 58:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 58:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 58:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 58:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 58:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 14170700000000D7

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 58:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 58:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 58:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 58:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 58:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 58:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 58:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 58:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 58:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 58:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 58:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 58:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 58:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 58:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 58:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 58:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 58:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 58:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5150

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3300

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5A20

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 60

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 58:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 59



Thread 0, Frame 58:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 58:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5581C500000000D5

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 58:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 0A56AC00000000D4 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 58:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 59:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 59:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 58E3E000000000D8



Thread 0, Frame 59:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 6405209385655599320

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 59:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 9B5EC100000000D9



Thread 0, Frame 59:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 59:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 59:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 59:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 59:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 9B5EC100000000D9

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 59:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 59:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 59:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 59:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 59:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 59:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 59:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 59:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 59:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 59:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 59:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 59:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 59:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 59:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 59:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 59:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 59:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 59:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54B0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3180

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 61

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 59:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 60



Thread 0, Frame 59:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 59:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 14170700000000D7

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 59:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = A7CC1E00000000D6 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 59:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 60:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 60:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 1E386200000000DA



Thread 0, Frame 60:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 2177598171973157082

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 60:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5FC58300000000DB



Thread 0, Frame 60:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = ""



Thread 0, Frame 60:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 60:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 60:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 60:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 5FC58300000000DB

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 60:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 60:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 60:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 60:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 60:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 60:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 []



Thread 0, Frame 60:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 60:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 60:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]



Thread 0, Frame 60:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 60:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 60:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 60:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]



Thread 0, Frame 60:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 60:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 60:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 60:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]



Thread 0, Frame 60:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB51E0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA39E0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5150

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F8090 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F97A0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 62

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 60:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 61



Thread 0, Frame 60:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 60:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 9B5EC100000000D9

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 60:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 58E3E000000000D8 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 60:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 61:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 61:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 9C8EEB00000000DC



Thread 0, Frame 61:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 11281212501842198748

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 61:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 18EA4A00000000DD



Thread 0, Frame 61:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = ""



Thread 0, Frame 61:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 61:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 61:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 61:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 18EA4A00000000DD

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 61:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 61:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 61:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 61:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 61:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 61:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 []



Thread 0, Frame 61:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 61:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 61:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]



Thread 0, Frame 61:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 61:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 61:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 61:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]



Thread 0, Frame 61:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 61:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 61:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 61:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]



Thread 0, Frame 61:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5330

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA32C0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D600AF0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60F190 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 63

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 61:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 62



Thread 0, Frame 61:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 61:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5FC58300000000DB

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 61:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 1E386200000000DA [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 61:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 62:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 62:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5B275900000000DE



Thread 0, Frame 62:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 6568316438078030046

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 62:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 91B01800000000DF



Thread 0, Frame 62:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = ""



Thread 0, Frame 62:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 62:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 62:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 62:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 91B01800000000DF

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 62:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 62:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 62:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 62:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 62:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 62:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 []



Thread 0, Frame 62:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 62:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 62:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]



Thread 0, Frame 62:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 62:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 62:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 62:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]



Thread 0, Frame 62:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 62:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 62:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 62:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]



Thread 0, Frame 62:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB59C0

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3200

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB57B0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F97A0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F6980 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5FC5C0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 64

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 62:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 63



Thread 0, Frame 62:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 62:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 18EA4A00000000DD

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 62:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 9C8EEB00000000DC [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 62:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 63:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 63:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 67DD1700000000E0



Thread 0, Frame 63:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 7484163444527071456

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 63:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 55064E00000000E1



Thread 0, Frame 63:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = ""



Thread 0, Frame 63:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 63:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 63:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 63:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 55064E00000000E1

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 63:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 63:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 63:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 63:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 63:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 63:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 []



Thread 0, Frame 63:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 63:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 63:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [Main Command Encoder]



Thread 0, Frame 63:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 63:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 63:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 63:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]



Thread 0, Frame 63:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 63:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 63:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 63:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]



Thread 0, Frame 63:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3220

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60F190 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D611FB0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60C370 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 65

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 63:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 64



Thread 0, Frame 63:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 63:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 91B01800000000DF

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 63:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5B275900000000DE [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 63:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 64:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 02A7F70000000053

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 64:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 88D2B500000000E2



Thread 0, Frame 64:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 9859141545872064738

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 64:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 6CAFFC00000000E3



Thread 0, Frame 64:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = ""



Thread 0, Frame 64:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 64:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 64:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 64:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 6CAFFC00000000E3

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 64:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 64:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 64:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 64:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 64:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 64:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 []



Thread 0, Frame 64:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 64:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 64:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]



Thread 0, Frame 64:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 64:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 64:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 64:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]



Thread 0, Frame 64:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 64:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 64:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 64:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]



Thread 0, Frame 64:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB54B0

                pWaitSemaphores[0]:             const VkSemaphore = 02A7F70000000053

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3180

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB54E0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5F6980 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5FC5C0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F8090 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 66

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 64:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 65



Thread 0, Frame 64:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 64:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 55064E00000000E1

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 64:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 67DD1700000000E0 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 64:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 65:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 74EA280000000054

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 2



Thread 0, Frame 65:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 5128B300000000E4



Thread 0, Frame 65:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 5848120928721961188

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 65:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 72303F0000000052

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 8FD57200000000E5



Thread 0, Frame 65:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = ""



Thread 0, Frame 65:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 65:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 65:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 65:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 8FD57200000000E5

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 65:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 65:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 65:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 65:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 65:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 65:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 []



Thread 0, Frame 65:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 65:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 65:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]



Thread 0, Frame 65:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 65:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 65:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 65:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]



Thread 0, Frame 65:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 65:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 65:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 72303F0000000052

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 65:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]



Thread 0, Frame 65:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5A20

                pWaitSemaphores[0]:             const VkSemaphore = 74EA280000000054

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3120

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5390

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D611FB0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D60C370 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D600AF0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 67

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 65:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 66



Thread 0, Frame 65:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 65:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 6CAFFC00000000E3

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 65:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 88D2B500000000E2 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 65:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 2

        pResults:                       VkResult* = NULL



Thread 0, Frame 66:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 6871490000000055

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 0



Thread 0, Frame 66:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4230:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4240:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4410:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 6D7DD100000000E6



Thread 0, Frame 66:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 7889691920153182438

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 66:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F4808:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7F79AD0000000050

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F4830:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F4840:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4A10:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 68D91000000000E7



Thread 0, Frame 66:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D00:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208618128

        pObjectName:                    const char* = ""



Thread 0, Frame 66:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 66:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6BC0

        pViewports[0]:                  const VkViewport = 0000002FCC4E6BC0:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 66:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7370

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7370:

            offset:                         VkOffset2D = 0000002FCC4E7370:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7378:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 66:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E70F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E7110:

            offset:                         VkOffset2D = 0000002FCC4E7110:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7118:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5E88

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5E88 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5E88 (Union):

                    float32:                        float[4] = 0000002FCC4E5E88

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5E88

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5E88

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5E88:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E7238:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E5FA0

                pAttachments[0]:                const VkImageView = 68D91000000000E7

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 66:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 66:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 66:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA2E8

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 66:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 66:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 66:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F8090 []



Thread 0, Frame 66:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9CE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208635840

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 66:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA208:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 66:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]



Thread 0, Frame 66:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208612224

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 66:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 66:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 66:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]



Thread 0, Frame 66:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0CC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208624032

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 66:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F11E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 66:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D5627F0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D5627F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7F79AD0000000050

            subresourceRange:               VkImageSubresourceRange = 000002245D562820:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 66:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]



Thread 0, Frame 66:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F1120

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F1120:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB5510

                pWaitSemaphores[0]:             const VkSemaphore = 6871490000000055

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3BC0

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB5930

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D5F6980 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D5FC5C0 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D5F8090 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D5F97A0 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0D50

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F0FF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0D68

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 68

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 66:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 67



Thread 0, Frame 66:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 66:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 8FD57200000000E5

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 66:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 5128B300000000E4 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 66:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F5720:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F5710

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F571C

            pImageIndices[0]:               const uint32_t = 0

        pResults:                       VkResult* = NULL



Thread 0, Frame 67:

vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    timeout:                        uint64_t = 1000000000

    semaphore:                      VkSemaphore = 05C59A0000000056

    fence:                          VkFence = 0000000000000000

    pImageIndex:                    uint32_t* = 1



Thread 0, Frame 67:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F42B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F42E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F42F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 4294967295

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 4294967295

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F44C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 84341F00000000E8



Thread 0, Frame 67:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F3E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 9526273196655902952

        pObjectName:                    const char* = "(wgpu internal) clear surface texture view"



Thread 0, Frame 67:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000002FCC4F48B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 7DDD740000000051

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        components:                     VkComponentMapping = 0000002FCC4F48E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000002FCC4F48F0:

            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000002FCC4F4AC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 71A35600000000E9



Thread 0, Frame 67:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9DB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208653552

        pObjectName:                    const char* = ""



Thread 0, Frame 67:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2D8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 67:

vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstViewport:                  uint32_t = 0

    viewportCount:                  uint32_t = 1

    pViewports:                     const VkViewport* = 0000002FCC4E6C70

        pViewports[0]:                  const VkViewport = 0000002FCC4E6C70:

            x:                              float = 0

            y:                              float = 600

            width:                          float = 800

            height:                         float = -600

            minDepth:                       float = 0

            maxDepth:                       float = 1



Thread 0, Frame 67:

vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    firstScissor:                   uint32_t = 0

    scissorCount:                   uint32_t = 1

    pScissors:                      const VkRect2D* = 0000002FCC4E7420

        pScissors[0]:                   const VkRect2D = 0000002FCC4E7420:

            offset:                         VkOffset2D = 0000002FCC4E7420:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E7428:

                width:                          uint32_t = 800

                height:                         uint32_t = 600



Thread 0, Frame 67:

vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pRenderPassBegin:               const VkRenderPassBeginInfo* = 0000002FCC4E71A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)

        pNext:                          const void* = VkRenderPassAttachmentBeginInfo

        renderPass:                     VkRenderPass = 176083000000005F

        framebuffer:                    VkFramebuffer = 44349C0000000060

        renderArea:                     VkRect2D = 0000002FCC4E71C0:

            offset:                         VkOffset2D = 0000002FCC4E71C0:

                x:                              int32_t = 0

                y:                              int32_t = 0

            extent:                         VkExtent2D = 0000002FCC4E71C8:

                width:                          uint32_t = 800

                height:                         uint32_t = 600

        clearValueCount:                uint32_t = 1

        pClearValues:                   const VkClearValue* = 0000002FCC4E5F38

            pClearValues[0]:                const VkClearValue = 0000002FCC4E5F38 (Union):

                color:                          VkClearColorValue = 0000002FCC4E5F38 (Union):

                    float32:                        float[4] = 0000002FCC4E5F38

                        float32[0]:                     float = 1

                        float32[1]:                     float = 1

                        float32[2]:                     float = 1

                        float32[3]:                     float = 1

                    int32:                          int32_t[4] = 0000002FCC4E5F38

                        int32[0]:                       int32_t = 1065353216

                        int32[1]:                       int32_t = 1065353216

                        int32[2]:                       int32_t = 1065353216

                        int32[3]:                       int32_t = 1065353216

                    uint32:                         uint32_t[4] = 0000002FCC4E5F38

                        uint32[0]:                      uint32_t = 1065353216

                        uint32[1]:                      uint32_t = 1065353216

                        uint32[2]:                      uint32_t = 1065353216

                        uint32[3]:                      uint32_t = 1065353216

                depthStencil:                   VkClearDepthStencilValue = 0000002FCC4E5F38:

                    depth:                          float = 1

                    stencil:                        uint32_t = 1065353216

        pNext:                          VkRenderPassAttachmentBeginInfo = 0000002FCC4E72E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)

            pNext:                          const void* = NULL

            attachmentCount:                uint32_t = 1

            pAttachments:                   const VkImageView* = 0000002FCC4E6050

                pAttachments[0]:                const VkImageView = 71A35600000000E9

    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)



Thread 0, Frame 67:

vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    pipeline:                       VkPipeline = 4FAC1C0000000032



Thread 0, Frame 67:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 0

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = 130160000000005C [Water Bind Group]

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 67:

vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

    layout:                         VkPipelineLayout = 0980B0000000002E

    firstSet:                       uint32_t = 1

    descriptorSetCount:             uint32_t = 1

    pDescriptorSets:                const VkDescriptorSet* = 0000002FCC4EA398

        pDescriptorSets[0]:             const VkDescriptorSet = AB64DE0000000020

    dynamicOffsetCount:             uint32_t = 0

    pDynamicOffsets:                const uint32_t* = 0000000000000004



Thread 0, Frame 67:

vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []

    vertexCount:                    uint32_t = 3

    instanceCount:                  uint32_t = 1

    firstVertex:                    uint32_t = 0

    firstInstance:                  uint32_t = 0



Thread 0, Frame 67:

vkCmdEndRenderPass(commandBuffer) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 67:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D600AF0 []



Thread 0, Frame 67:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4E9D90:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208700784

        pObjectName:                    const char* = "Main Command Encoder"



Thread 0, Frame 67:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4EA2B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 67:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60C370 [Main Command Encoder]



Thread 0, Frame 67:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208724400

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 67:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 67:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 67:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]



Thread 0, Frame 67:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000002FCC4F0D70:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 2355208712592

        pObjectName:                    const char* = "(wgpu internal) Present"



Thread 0, Frame 67:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000002FCC4F1298:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 67:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)

    dstStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF727D283E8

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF727D283E8

    imageMemoryBarrierCount:        uint32_t = 1

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000002245D79BFF0

        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000002245D79BFF0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR (1000001002)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            image:                          VkImage = 7DDD740000000051

            subresourceRange:               VkImageSubresourceRange = 000002245D79C020:

                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)

                baseMipLevel:                   uint32_t = 0

                levelCount:                     uint32_t = 1

                baseArrayLayer:                 uint32_t = 0

                layerCount:                     uint32_t = 1



Thread 0, Frame 67:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]



Thread 0, Frame 67:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000002FCC4F11D0

        pSubmits[0]:                    const VkSubmitInfo = 0000002FCC4F11D0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 1

            pWaitSemaphores:                const VkSemaphore* = 000002244FEB50C0

                pWaitSemaphores[0]:             const VkSemaphore = 05C59A0000000056

            pWaitDstStageMask:              const VkPipelineStageFlags* = 000002244FBA3120

                pWaitDstStageMask[0]:           const VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

            commandBufferCount:             uint32_t = 4

            pCommandBuffers:                const VkCommandBuffer* = 000002244FEB55A0

                pCommandBuffers[0]:             const VkCommandBuffer = 000002245D611FB0 [(wgpu internal) Transit]

                pCommandBuffers[1]:             const VkCommandBuffer = 000002245D60C370 [Main Command Encoder]

                pCommandBuffers[2]:             const VkCommandBuffer = 000002245D600AF0 []

                pCommandBuffers[3]:             const VkCommandBuffer = 000002245D60F190 [(wgpu internal) Present]

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000002FCC4F0E00

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000002FCC4F10A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000002FCC4F0E18

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 69

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 67:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 68



Thread 0, Frame 67:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 67:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 68D91000000000E7

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 67:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 6D7DD100000000E6 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 67:

vkQueuePresentKHR(queue, pPresentInfo) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000002244FE9B8A0

    pPresentInfo:                   const VkPresentInfoKHR* = 0000002FCC4F57D0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (1000001001)

        pNext:                          const void* = NULL

        waitSemaphoreCount:             uint32_t = 1

        pWaitSemaphores:                const VkSemaphore* = 000002245CF13378

            pWaitSemaphores[0]:             const VkSemaphore = FAB64D0000000002

        swapchainCount:                 uint32_t = 1

        pSwapchains:                    const VkSwapchainKHR* = 0000002FCC4F57C0

            pSwapchains[0]:                 const VkSwapchainKHR = 7CD292000000004F

        pImageIndices:                  const uint32_t* = 0000002FCC4F57CC

            pImageIndices[0]:               const uint32_t = 1

        pResults:                       VkResult* = NULL



Thread 0, Frame 68:

vkDeviceWaitIdle(device) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50



Thread 0, Frame 68:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 02A7F70000000053

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 74EA280000000054

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 6871490000000055

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    semaphore:                      VkSemaphore = 05C59A0000000056

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    swapchain:                      VkSwapchainKHR = 7CD292000000004F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkDestroySurfaceKHR(instance, surface, pAllocator) returns void:

    instance:                       VkInstance = 0000022448FE48D0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000002FCC4FC060:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000002FCC4FC050

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000002FCC4FC058

            pValues[0]:                     const uint64_t = 69

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 68:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 0000022451C15B50

    commandPool:                    VkCommandPool = 5DBCF90000000065

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 68:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 71A35600000000E9

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 68:

vkDestroyImageView(device, imageView, pAllocator) returns void:

    device:                         VkDevice = 0000022451C15B50

    imageView:                      VkImageView = 84341F00000000E8 [(wgpu internal) clear surface texture view]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Process terminated