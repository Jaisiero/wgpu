Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 00000070706F75A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 00000070706F7570:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "wgpu"
            applicationVersion:             uint32_t = 1
            pEngineName:                    const char* = "wgpu-hal"
            engineVersion:                  uint32_t = 2
            apiVersion:                     uint32_t = 4206592
        enabledLayerCount:              uint32_t = 1
        ppEnabledLayerNames:            const char* const* = 000001DD67212340
            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_KHRONOS_validation"
        enabledExtensionCount:          uint32_t = 5
        ppEnabledExtensionNames:        const char* const* = 000001DD67212348
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_debug_utils"
            ppEnabledExtensionNames[3]:     const char* const = "VK_EXT_swapchain_colorspace"
            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_get_physical_device_properties2"
        pNext:                          VkDebugUtilsMessengerCreateInfoEXT = 00000070706FB7B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
            pNext:                          const void* = NULL
            flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
            messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4096 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
            messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
            pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF66DB45E80
            pUserData:                      void* = 000001DD671F2EC0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 000001DD6515BD80

Thread 0, Frame 0:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DD6515BD80
    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 00000070706FA7E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
        pNext:                          const void* = NULL
        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4096 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF66DB45E80
        pUserData:                      void* = 000001DD671F2EC0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMessenger:                     VkDebugUtilsMessengerEXT* = FD5B260000000001

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DD6515BD80
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DD6515BD80
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 000001DD6912E100
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001DD67687FA0
        pPhysicalDevices[1]:            VkPhysicalDevice = 000001DD67688090

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DD6515BD80
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 000001DD6515BD80
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 000001DD6912E4A0
        pPhysicalDevices[0]:            VkPhysicalDevice = 000001DD67687FA0
        pPhysicalDevices[1]:            VkPhysicalDevice = 000001DD67688090

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pProperties:                    VkPhysicalDeviceProperties* = 00000070706E9DD8:
        apiVersion:                     uint32_t = 4206863
        driverVersion:                  uint32_t = 2311585792
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9479
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000070706E9EEC
            pipelineCacheUUID[0]:           uint8_t = 218
            pipelineCacheUUID[1]:           uint8_t = 176
            pipelineCacheUUID[2]:           uint8_t = 31
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 103
            pipelineCacheUUID[5]:           uint8_t = 121
            pipelineCacheUUID[6]:           uint8_t = 168
            pipelineCacheUUID[7]:           uint8_t = 246
            pipelineCacheUUID[8]:           uint8_t = 87
            pipelineCacheUUID[9]:           uint8_t = 92
            pipelineCacheUUID[10]:          uint8_t = 163
            pipelineCacheUUID[11]:          uint8_t = 25
            pipelineCacheUUID[12]:          uint8_t = 122
            pipelineCacheUUID[13]:          uint8_t = 41
            pipelineCacheUUID[14]:          uint8_t = 246
            pipelineCacheUUID[15]:          uint8_t = 253
        limits:                         VkPhysicalDeviceLimits = 00000070706E9F00:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 00000070706E9FDC
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 00000070706E9FEC
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 00000070706EA018
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 00000070706EA020
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 00000070706EA0BC
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 00000070706EA0C4
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 00000070706EA0F8:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pProperties:                    VkPhysicalDeviceProperties2* = 00000070706EDF40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceDriverProperties
        properties:                     VkPhysicalDeviceProperties = 00000070706EDF50:
            apiVersion:                     uint32_t = 4206863
            driverVersion:                  uint32_t = 2311585792
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 9479
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000070706EE064
                pipelineCacheUUID[0]:           uint8_t = 218
                pipelineCacheUUID[1]:           uint8_t = 176
                pipelineCacheUUID[2]:           uint8_t = 31
                pipelineCacheUUID[3]:           uint8_t = 61
                pipelineCacheUUID[4]:           uint8_t = 103
                pipelineCacheUUID[5]:           uint8_t = 121
                pipelineCacheUUID[6]:           uint8_t = 168
                pipelineCacheUUID[7]:           uint8_t = 246
                pipelineCacheUUID[8]:           uint8_t = 87
                pipelineCacheUUID[9]:           uint8_t = 92
                pipelineCacheUUID[10]:          uint8_t = 163
                pipelineCacheUUID[11]:          uint8_t = 25
                pipelineCacheUUID[12]:          uint8_t = 122
                pipelineCacheUUID[13]:          uint8_t = 41
                pipelineCacheUUID[14]:          uint8_t = 246
                pipelineCacheUUID[15]:          uint8_t = 253
            limits:                         VkPhysicalDeviceLimits = 00000070706EE078:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4096
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 00000070706EE154
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 00000070706EE164
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 00000070706EE190
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 00000070706EE198
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 00000070706EE234
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 00000070706EE23C
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 00000070706EE270:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceDriverProperties = 00000070706EB5C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)
            pNext:                          void* = VkPhysicalDeviceAccelerationStructurePropertiesKHR
            driverID:                       VkDriverId = VK_DRIVER_ID_NVIDIA_PROPRIETARY (4)
            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "NVIDIA"
            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "551.32"
            conformanceVersion:             VkConformanceVersion = 00000070706EB7D4:
                major:                          uint8_t = 1
                minor:                          uint8_t = 3
                subminor:                       uint8_t = 7
                patch:                          uint8_t = 1
        pNext:                          VkPhysicalDeviceAccelerationStructurePropertiesKHR = 00000070706EB578:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR (1000150014)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties
            maxGeometryCount:               uint64_t = 16777215
            maxInstanceCount:               uint64_t = 16777215
            maxPrimitiveCount:              uint64_t = 536870911
            maxPerStageDescriptorAccelerationStructures: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32_t = 1048576
            maxDescriptorSetAccelerationStructures: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32_t = 1048576
            minAccelerationStructureScratchOffsetAlignment: uint32_t = 128
        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 00000070706EB500:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)
            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties
            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 4294967295
            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 1
            robustBufferAccessUpdateAfterBind: VkBool32 = 1
            quadDivergentImplicitLod:       VkBool32 = 1
            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576
            maxPerStageUpdateAfterBindResources: uint32_t = 4294967295
            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576
        pNext:                          VkPhysicalDeviceMaintenance3Properties = 00000070706EB4D8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)
            pNext:                          void* = NULL
            maxPerSetDescriptors:           uint32_t = 4294967295
            maxMemoryAllocationSize:        VkDeviceSize = 4292870144

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pFeatures:                      VkPhysicalDeviceFeatures2* = 00000070706F0B20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
        features:                       VkPhysicalDeviceFeatures = 00000070706F0B30:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 1
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 1
            tessellationShader:             VkBool32 = 1
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 1
            logicOp:                        VkBool32 = 1
            multiDrawIndirect:              VkBool32 = 1
            drawIndirectFirstInstance:      VkBool32 = 1
            depthClamp:                     VkBool32 = 1
            depthBiasClamp:                 VkBool32 = 1
            fillModeNonSolid:               VkBool32 = 1
            depthBounds:                    VkBool32 = 1
            wideLines:                      VkBool32 = 1
            largePoints:                    VkBool32 = 1
            alphaToOne:                     VkBool32 = 1
            multiViewport:                  VkBool32 = 1
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 1
            occlusionQueryPrecise:          VkBool32 = 1
            pipelineStatisticsQuery:        VkBool32 = 1
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended:      VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample:  VkBool32 = 1
            shaderStorageImageReadWithoutFormat: VkBool32 = 1
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance:             VkBool32 = 1
            shaderCullDistance:             VkBool32 = 1
            shaderFloat64:                  VkBool32 = 1
            shaderInt64:                    VkBool32 = 1
            shaderInt16:                    VkBool32 = 1
            shaderResourceResidency:        VkBool32 = 1
            shaderResourceMinLod:           VkBool32 = 1
            sparseBinding:                  VkBool32 = 1
            sparseResidencyBuffer:          VkBool32 = 1
            sparseResidencyImage2D:         VkBool32 = 1
            sparseResidencyImage3D:         VkBool32 = 1
            sparseResidency2Samples:        VkBool32 = 1
            sparseResidency4Samples:        VkBool32 = 1
            sparseResidency8Samples:        VkBool32 = 1
            sparseResidency16Samples:       VkBool32 = 1
            sparseResidencyAliased:         VkBool32 = 1
            variableMultisampleRate:        VkBool32 = 1
            inheritedQueries:               VkBool32 = 1
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706EED40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 00000070706EECC8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)
            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures
            accelerationStructure:          VkBool32 = 1
            accelerationStructureCaptureReplay: VkBool32 = 1
            accelerationStructureIndirectBuild: VkBool32 = 0
            accelerationStructureHostCommands: VkBool32 = 0
            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 1
        pNext:                          VkPhysicalDevice16BitStorageFeatures = 00000070706EECA0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)
            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features
            storageBuffer16BitAccess:       VkBool32 = 1
            uniformAndStorageBuffer16BitAccess: VkBool32 = 1
            storagePushConstant16:          VkBool32 = 1
            storageInputOutput16:           VkBool32 = 0
        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 00000070706EEC88:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderFloat16:                  VkBool32 = 1
            shaderInt8:                     VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706EEBF8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 1
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706EEBD8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706EEBB8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706EEB98:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures
            imagelessFramebuffer:           VkBool32 = 1
        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 00000070706EEB30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)
            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures
            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1
            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 1
            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1
            descriptorBindingPartiallyBound: VkBool32 = 1
            descriptorBindingVariableDescriptorCount: VkBool32 = 1
            runtimeDescriptorArray:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 00000070706EEC48:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)
            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures
            samplerYcbcrConversion:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceMultiviewFeatures = 00000070706EEC20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)
            pNext:                          void* = NULL
            multiview:                      VkBool32 = 1
            multiviewGeometryShader:        VkBool32 = 1
            multiviewTessellationShader:    VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)
    pFormatProperties:              VkFormatProperties* = 00000070706F10E8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)
    pFormatProperties:              VkFormatProperties* = 00000070706F10E8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)
    pFormatProperties:              VkFormatProperties* = 00000070706F10E8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)
    pFormatProperties:              VkFormatProperties* = 00000070706F10E8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)
    pFormatProperties:              VkFormatProperties* = 00000070706F10E8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)
    pFormatProperties:              VkFormatProperties* = 00000070706F10E8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)
    pFormatProperties:              VkFormatProperties* = 00000070706F1168:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties:              VkFormatProperties2* = 00000070706F11E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 00000070706F11F8:
            linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 00000070706F11C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 70650064657667 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 71474698378627 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT | VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV)
            bufferFeatures:                 VkFormatFeatureFlags2 = 6442451032 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121863 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122247 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 120 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 00000070706F10F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)
    pFormatProperties:              VkFormatProperties* = 00000070706F1168:
        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 516935681 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR | VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR | VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR | VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DD68F62550
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DD68F62550:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DD68F6255C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DD68F62568:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DD68F62574:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001DD68F62580:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DD68F6258C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001DD68F62598:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DD68F625A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001DD68F625B0:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 000001DD68F625BC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 000001DD68F625C8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 000001DD68F625D4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)
    pFormatProperties:              VkFormatProperties* = 00000070706F1638:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000070706F1638:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000070706F1638:
        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    pProperties:                    VkPhysicalDeviceProperties* = 00000070706E85D8:
        apiVersion:                     uint32_t = 4206842
        driverVersion:                  uint32_t = 1659361
        vendorID:                       uint32_t = 32902
        deviceID:                       uint32_t = 18048
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000070706E86EC
            pipelineCacheUUID[0]:           uint8_t = 208
            pipelineCacheUUID[1]:           uint8_t = 41
            pipelineCacheUUID[2]:           uint8_t = 212
            pipelineCacheUUID[3]:           uint8_t = 41
            pipelineCacheUUID[4]:           uint8_t = 214
            pipelineCacheUUID[5]:           uint8_t = 39
            pipelineCacheUUID[6]:           uint8_t = 231
            pipelineCacheUUID[7]:           uint8_t = 43
            pipelineCacheUUID[8]:           uint8_t = 216
            pipelineCacheUUID[9]:           uint8_t = 38
            pipelineCacheUUID[10]:          uint8_t = 219
            pipelineCacheUUID[11]:          uint8_t = 40
            pipelineCacheUUID[12]:          uint8_t = 220
            pipelineCacheUUID[13]:          uint8_t = 44
            pipelineCacheUUID[14]:          uint8_t = 222
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 00000070706E8700:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 134217724
            maxStorageBufferRange:          uint32_t = 1073741820
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4197384
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1
            sparseAddressSpaceSize:         VkDeviceSize = 17523466567680
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 7
            maxPerStageResources:           uint32_t = 200
            maxDescriptorSetSamplers:       uint32_t = 576
            maxDescriptorSetUniformBuffers: uint32_t = 1800
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1800
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1800
            maxDescriptorSetStorageImages:  uint32_t = 144
            maxDescriptorSetInputAttachments: uint32_t = 7
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 4095
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 208
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 00000070706E87DC
                maxComputeWorkGroupCount[0]:    uint32_t = 65536
                maxComputeWorkGroupCount[1]:    uint32_t = 65536
                maxComputeWorkGroupCount[2]:    uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 00000070706E87EC
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 00000070706E8818
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 00000070706E8820
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65535
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 64
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 64
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 52.0833
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 00000070706E88BC
                pointSizeRange[0]:              float = 0.125
                pointSizeRange[1]:              float = 255.875
            lineWidthRange:                 float[2] = 00000070706E88C4
                lineWidthRange[0]:              float = 0
                lineWidthRange[1]:              float = 7.99219
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 0
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
            nonCoherentAtomSize:            VkDeviceSize = 1
        sparseProperties:               VkPhysicalDeviceSparseProperties = 00000070706E88F8:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    pProperties:                    VkPhysicalDeviceProperties2* = 00000070706EC740:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceDriverProperties
        properties:                     VkPhysicalDeviceProperties = 00000070706EC750:
            apiVersion:                     uint32_t = 4206842
            driverVersion:                  uint32_t = 1659361
            vendorID:                       uint32_t = 32902
            deviceID:                       uint32_t = 18048
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000070706EC864
                pipelineCacheUUID[0]:           uint8_t = 208
                pipelineCacheUUID[1]:           uint8_t = 41
                pipelineCacheUUID[2]:           uint8_t = 212
                pipelineCacheUUID[3]:           uint8_t = 41
                pipelineCacheUUID[4]:           uint8_t = 214
                pipelineCacheUUID[5]:           uint8_t = 39
                pipelineCacheUUID[6]:           uint8_t = 231
                pipelineCacheUUID[7]:           uint8_t = 43
                pipelineCacheUUID[8]:           uint8_t = 216
                pipelineCacheUUID[9]:           uint8_t = 38
                pipelineCacheUUID[10]:          uint8_t = 219
                pipelineCacheUUID[11]:          uint8_t = 40
                pipelineCacheUUID[12]:          uint8_t = 220
                pipelineCacheUUID[13]:          uint8_t = 44
                pipelineCacheUUID[14]:          uint8_t = 222
                pipelineCacheUUID[15]:          uint8_t = 29
            limits:                         VkPhysicalDeviceLimits = 00000070706EC878:
                maxImageDimension1D:            uint32_t = 16384
                maxImageDimension2D:            uint32_t = 16384
                maxImageDimension3D:            uint32_t = 2048
                maxImageDimensionCube:          uint32_t = 16384
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 134217724
                maxStorageBufferRange:          uint32_t = 1073741820
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4197384
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1
                sparseAddressSpaceSize:         VkDeviceSize = 17523466567680
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 64
                maxPerStageDescriptorUniformBuffers: uint32_t = 200
                maxPerStageDescriptorStorageBuffers: uint32_t = 200
                maxPerStageDescriptorSampledImages: uint32_t = 200
                maxPerStageDescriptorStorageImages: uint32_t = 16
                maxPerStageDescriptorInputAttachments: uint32_t = 7
                maxPerStageResources:           uint32_t = 200
                maxDescriptorSetSamplers:       uint32_t = 576
                maxDescriptorSetUniformBuffers: uint32_t = 1800
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
                maxDescriptorSetStorageBuffers: uint32_t = 1800
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1800
                maxDescriptorSetStorageImages:  uint32_t = 144
                maxDescriptorSetInputAttachments: uint32_t = 7
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 4095
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4096
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 256
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 208
                maxComputeSharedMemorySize:     uint32_t = 32768
                maxComputeWorkGroupCount:       uint32_t[3] = 00000070706EC954
                    maxComputeWorkGroupCount[0]:    uint32_t = 65536
                    maxComputeWorkGroupCount[1]:    uint32_t = 65536
                    maxComputeWorkGroupCount[2]:    uint32_t = 65536
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 00000070706EC964
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 16
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 00000070706EC990
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 00000070706EC998
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65535
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 64
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 64
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 16384
                maxFramebufferHeight:           uint32_t = 16384
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 52.0833
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 00000070706ECA34
                    pointSizeRange[0]:              float = 0.125
                    pointSizeRange[1]:              float = 255.875
                lineWidthRange:                 float[2] = 00000070706ECA3C
                    lineWidthRange[0]:              float = 0
                    lineWidthRange[1]:              float = 7.99219
                pointSizeGranularity:           float = 0.125
                lineWidthGranularity:           float = 0.0078125
                strictLines:                    VkBool32 = 0
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
                nonCoherentAtomSize:            VkDeviceSize = 1
            sparseProperties:               VkPhysicalDeviceSparseProperties = 00000070706ECA70:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceDriverProperties = 00000070706E9DC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties
            driverID:                       VkDriverId = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS (5)
            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "Intel Corporation"
            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "Intel driver"
            conformanceVersion:             VkConformanceVersion = 00000070706E9FD4:
                major:                          uint8_t = 1
                minor:                          uint8_t = 3
                subminor:                       uint8_t = 5
                patch:                          uint8_t = 0
        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 00000070706E9D00:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)
            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties
            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 1048576
            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 0
            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 0
            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 0
            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 0
            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 0
            robustBufferAccessUpdateAfterBind: VkBool32 = 1
            quadDivergentImplicitLod:       VkBool32 = 1
            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576
            maxPerStageUpdateAfterBindResources: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576
        pNext:                          VkPhysicalDeviceMaintenance3Properties = 00000070706E9CD8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)
            pNext:                          void* = NULL
            maxPerSetDescriptors:           uint32_t = 6159
            maxMemoryAllocationSize:        VkDeviceSize = 17058269184

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    pFeatures:                      VkPhysicalDeviceFeatures2* = 00000070706EF320:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
        features:                       VkPhysicalDeviceFeatures = 00000070706EF330:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 1
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 1
            tessellationShader:             VkBool32 = 1
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 1
            logicOp:                        VkBool32 = 1
            multiDrawIndirect:              VkBool32 = 1
            drawIndirectFirstInstance:      VkBool32 = 1
            depthClamp:                     VkBool32 = 1
            depthBiasClamp:                 VkBool32 = 1
            fillModeNonSolid:               VkBool32 = 1
            depthBounds:                    VkBool32 = 1
            wideLines:                      VkBool32 = 1
            largePoints:                    VkBool32 = 1
            alphaToOne:                     VkBool32 = 1
            multiViewport:                  VkBool32 = 1
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 1
            textureCompressionASTC_LDR:     VkBool32 = 1
            textureCompressionBC:           VkBool32 = 1
            occlusionQueryPrecise:          VkBool32 = 1
            pipelineStatisticsQuery:        VkBool32 = 1
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended:      VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample:  VkBool32 = 1
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance:             VkBool32 = 1
            shaderCullDistance:             VkBool32 = 1
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 1
            shaderInt16:                    VkBool32 = 1
            shaderResourceResidency:        VkBool32 = 1
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 1
            sparseResidencyBuffer:          VkBool32 = 1
            sparseResidencyImage2D:         VkBool32 = 1
            sparseResidencyImage3D:         VkBool32 = 1
            sparseResidency2Samples:        VkBool32 = 1
            sparseResidency4Samples:        VkBool32 = 1
            sparseResidency8Samples:        VkBool32 = 1
            sparseResidency16Samples:       VkBool32 = 1
            sparseResidencyAliased:         VkBool32 = 1
            variableMultisampleRate:        VkBool32 = 1
            inheritedQueries:               VkBool32 = 1
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706ED540:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDevice16BitStorageFeatures = 00000070706ED4A0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)
            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features
            storageBuffer16BitAccess:       VkBool32 = 1
            uniformAndStorageBuffer16BitAccess: VkBool32 = 1
            storagePushConstant16:          VkBool32 = 1
            storageInputOutput16:           VkBool32 = 1
        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 00000070706ED488:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderFloat16:                  VkBool32 = 1
            shaderInt8:                     VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706ED3F8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 1
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706ED3D8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706ED3B8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706ED398:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures
            imagelessFramebuffer:           VkBool32 = 1
        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 00000070706ED330:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)
            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures
            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1
            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 0
            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1
            descriptorBindingPartiallyBound: VkBool32 = 1
            descriptorBindingVariableDescriptorCount: VkBool32 = 1
            runtimeDescriptorArray:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 00000070706ED448:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)
            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures
            samplerYcbcrConversion:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceMultiviewFeatures = 00000070706ED420:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)
            pNext:                          void* = NULL
            multiview:                      VkBool32 = 1
            multiviewGeometryShader:        VkBool32 = 1
            multiviewTessellationShader:    VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8E8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8E8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8E8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8E8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8E8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8E8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)
    pFormatProperties:              VkFormatProperties* = 00000070706EF968:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 24 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties:              VkFormatProperties2* = 00000070706EF9E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 00000070706EF9F8:
            linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 00000070706EF9C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 88 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 00000070706EF8F8:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)
    pFormatProperties:              VkFormatProperties* = 00000070706EF968:
        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001DD68D48EF0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001DD68D48EF0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 36
            minImageTransferGranularity:    VkExtent3D = 000001DD68D48EFC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001DD68D48F08:
            queueFlags:                     VkQueueFlags = 32 (VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 36
            minImageTransferGranularity:    VkExtent3D = 000001DD68D48F14:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)
    pFormatProperties:              VkFormatProperties* = 00000070706EFE38:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000070706EFE38:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67688090
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000070706EFE38:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD6912E760
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD690B0410

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD690B0410
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD6E00D280

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD690B0410
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD6E00D280

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = FAB64D0000000002

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = FA21A40000000003

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = F56C9B0000000004

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = E7F79A0000000005

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = F443490000000006

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD690B0410
    buffer:                         VkBuffer = F443490000000006
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = CB3EE80000000007

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    buffer:                         VkBuffer = F443490000000006
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 17600992033042857990
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = E7F79A0000000005
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD6E00AA90
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD6908FBF0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD690AB420
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD690ACC20
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD690AE790
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD6E22DFD0
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD6E240C40
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD6E2538B0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD6E266520
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD6E27B1A0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD6E292E30
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD6E2A9AB0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD6E2BC720
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD6E2D13A0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD6E2EA430
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD6E2FD0A0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD6E30FD10

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050548104464
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E30FD10 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E30FD10 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD68BCA430
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD68BCA430:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E30FD10 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E30FD10 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD68BCA430
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD68BCA430:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 18 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = EAD9370000000008

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD690B0410
    buffer:                         VkBuffer = EAD9370000000008
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 64
        alignment:                      VkDeviceSize = 64
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    buffer:                         VkBuffer = EAD9370000000008
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 00000070706F6938:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 000001DD6E345030
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000001DD6E345030:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = EE647E0000000009

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 00000070706F50A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)
        maxSets:                        uint32_t = 64
        poolSizeCount:                  uint32_t = 1
        pPoolSizes:                     const VkDescriptorPoolSize* = 00000070706F5060
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 00000070706F5060:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 64
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = CFEF35000000000A

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 00000070706F4FA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = CFEF35000000000A
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 00000070706F5048
            pSetLayouts[0]:                 const VkDescriptorSetLayout = EE647E0000000009
    pDescriptorSets:                VkDescriptorSet* = 000001DD670EF0E0
        pDescriptorSets[0]:             VkDescriptorSet = EC4BEC000000000B

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001DD690B0410
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 000001DD69218BE0
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000001DD69218BE0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = EC4BEC000000000B
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 000001DD6E345370
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000001DD6E345370:
                    buffer:                         VkBuffer = EAD9370000000008
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 18446744073709551615
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF66E1C1408

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 00000070706F7CB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001DD670EEFF0
            pSetLayouts[0]:                 const VkDescriptorSetLayout = EE647E0000000009
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = E88693000000000C

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F77D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_PIPELINE_LAYOUT (17)
        objectHandle:                   uint64_t = 16755241091887792140
        pObjectName:                    const char* = "empty"

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000070706F66A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 276
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = CAD092000000000D

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkComputePipelineCreateInfo* = 00000070706F6F30
        pCreateInfos[0]:                const VkComputePipelineCreateInfo = 00000070706F6F30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stage:                          VkPipelineShaderStageCreateInfo = 00000070706F6F48:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:                          const void* = NULL
                flags:                          VkPipelineShaderStageCreateFlags = 0
                stage:                          VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:                         VkShaderModule = CAD092000000000D
                pName:                          const char* = "main"
                pSpecializationInfo:            const VkSpecializationInfo* = NULL
            layout:                         VkPipelineLayout = E88693000000000C [empty]
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000001DD670EF060
        pPipelines[0]:                  VkPipeline = 967DD1000000000E

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DD690B0410
    shaderModule:                   VkShaderModule = CAD092000000000D
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = E7E6D0000000000F

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706F4240:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = E7E6D0000000000F
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD6E3606F0
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD6E384D10
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD6E3A2540
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD6E3A3D50
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD6E3A5560
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD6E3A6D70
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD6E3A8580
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD6E3A9D90
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD6E3AB5A0
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD6E3A0D30
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD6E3ACDB0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD6E3AE5C0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD6E46BE40
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD6E46D650
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD6E46EE60
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD6E473690
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD6E46A630

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050549524016
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E46A630 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E46A630 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:                       VkPipeline = 967DD1000000000E

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E46A630 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:                         VkPipelineLayout = E88693000000000C [empty]
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 00000070706F4428
        pDescriptorSets[0]:             const VkDescriptorSet = EC4BEC000000000B
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = 0000000000000004

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E46A630 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050549560976
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E473690 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E473690 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050549542496
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E46EE60 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E46EE60 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD68BCA160
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD68BCA160:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = EAD9370000000008
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E46EE60 [(wgpu internal) Transit]
    dstBuffer:                      VkBuffer = EAD9370000000008
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 16
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E46EE60 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E30FD10 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD6E00D280
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 4
            pCommandBuffers:                const VkCommandBuffer* = 000001DD6910DC60
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD6E30FD10 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD6E46EE60 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD6E473690 []
                pCommandBuffers[3]:             const VkCommandBuffer = 000001DD6E46A630 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002
                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    semaphore:                      VkSemaphore = F56C9B0000000004
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    commandPool:                    VkCommandPool = E7E6D0000000000F
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD690B0410
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD6E3459F0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD6E557B00

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD6E557B00
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD6EA3B7D0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD6E557B00
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD6EA3B7D0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = D5B26F0000000010

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 980F360000000011

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = DCC8FD0000000012

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = D175B40000000013

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 9FDE6B0000000014

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = 9FDE6B0000000014
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = DD3A8A0000000015

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = 9FDE6B0000000014
    memory:                         VkDeviceMemory = DD3A8A0000000015
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 11519762544604479508
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = D175B40000000013
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD6E65C470
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD6E471E80
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD6E468E20
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD6E474EA0
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD6E477EC0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD6E470670
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD6E4796D0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD6E47DF00
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD6E480F20
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD6E4766B0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD6E47C6F0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD6E482730
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD6E47AEE0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD6E47F710
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD6E483F40
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD6E485750
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD6E486F60

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050549641056
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD68BCA610
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD68BCA610:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 9FDE6B0000000014 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = 9FDE6B0000000014 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD68BCA610
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD68BCA610:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 9FDE6B0000000014 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 20
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = D897D90000000016

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = D897D90000000016
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 32
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 84C0580000000017

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    memory:                         VkDeviceMemory = 84C0580000000017
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD6C3C4000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = D897D90000000016
    memory:                         VkDeviceMemory = 84C0580000000017
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 15607181627698970646
        pObjectName:                    const char* = "dummy"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F7B60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = D10D270000000018

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = D10D270000000018
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F79E8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F7038:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 3
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 27D60E0000000019

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    memory:                         VkDeviceMemory = 27D60E0000000019
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD70010000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = D10D270000000018
    memory:                         VkDeviceMemory = 27D60E0000000019
    memoryOffset:                   VkDeviceSize = 8388592

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F76F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 15063739209577660440
        pObjectName:                    const char* = "(wgpu internal) Staging"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD68BCA610
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD68BCA610:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = D10D270000000018 [(wgpu internal) Staging]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001DD68BCA648:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = D897D90000000016 [dummy]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = D10D270000000018 [(wgpu internal) Staging]
    dstBuffer:                      VkBuffer = D897D90000000016 [dummy]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000070706F7C58
        pRegions[0]:                    const VkBufferCopy = 00000070706F7C58:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 16

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD6EA3B7D0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 1
            pCommandBuffers:                const VkCommandBuffer* = 000001DD6E566FB0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD6E486F60 [(wgpu internal) PendingWrites]
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = D5B26F0000000010
                pSignalSemaphores[1]:           const VkSemaphore = DCC8FD0000000012
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    semaphore:                      VkSemaphore = DCC8FD0000000012
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = DCC8FD0000000012
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DD6E557B00
    buffer:                         VkBuffer = D10D270000000018 [(wgpu internal) Staging]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD6E557B00
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = DCC8FD0000000012
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD6E3473D0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD71275CB0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD71275CB0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7176CEA0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD71275CB0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7176CEA0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 95A125000000001A

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = CB1C7C000000001B

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 2CFBA2000000001C

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 908683000000001D

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = CFCDA0000000001E

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = CFCDA0000000001E
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 2E2941000000001F

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = CFCDA0000000001E
    memory:                         VkDeviceMemory = 2E2941000000001F
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 14973800257937211422
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 908683000000001D
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD715CEB00
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD718C3430
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD718CAC80
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD718C7C60
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD718C9470
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD718C0410
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD718C6450
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD718C1C20
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD718CC490
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD718CDCA0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD718C4C40
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD718D54F0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD718D6D00
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD718CF4B0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD718D3CE0
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD718DB530
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD718D0CC0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050604469440
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71225670
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71225670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = CFCDA0000000001E [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = CFCDA0000000001E [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71225670
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71225670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = CFCDA0000000001E [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkImageCreateInfo* = 00000070706F56A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:                         VkExtent3D = 00000070706F56BC:
            width:                          uint32_t = 64
            height:                         uint32_t = 64
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 27 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = AB64DE0000000020

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71275CB0
    image:                          VkImage = AB64DE0000000020
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F53E8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    image:                          VkImage = AB64DE0000000020
    memory:                         VkDeviceMemory = 2E2941000000001F
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F50F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 12350240169738108960
        pObjectName:                    const char* = "Output Texture"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F5B28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = AB64DE0000000020 [Output Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F5B50:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F5B60:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F5D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = C4F3070000000021

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 14191694547355959329
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F6DB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 301E6C0000000022

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = 301E6C0000000022
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F6C38:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F6288:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 3
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = A7C5450000000023

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    memory:                         VkDeviceMemory = A7C5450000000023
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD72E00000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = 301E6C0000000022
    memory:                         VkDeviceMemory = A7C5450000000023
    memoryOffset:                   VkDeviceSize = 8372224

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F6940:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 3467327510377660450
        pObjectName:                    const char* = "(wgpu internal) Staging"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD6E3632B0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD6E3632B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = AB64DE0000000020 [Output Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD6E3632E0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71225670
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71225670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 301E6C0000000022 [(wgpu internal) Staging]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = 301E6C0000000022 [(wgpu internal) Staging]
    dstImage:                       VkImage = AB64DE0000000020 [Output Texture]
    dstImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F70D8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F70D8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 64
            imageSubresource:               VkImageSubresourceLayers = 00000070706F70E8:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F70F8:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F7104:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = B991FA0000000024

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = B991FA0000000024
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 3A6CBB0000000025

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    memory:                         VkDeviceMemory = 3A6CBB0000000025
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD6D109000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = B991FA0000000024
    memory:                         VkDeviceMemory = 3A6CBB0000000025
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 13371743646546657316
        pObjectName:                    const char* = "Output Buffer"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 20
        usage:                          VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = A2EB680000000026

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = A2EB680000000026
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 32
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = A2EB680000000026
    memory:                         VkDeviceMemory = 3A6CBB0000000025
    memoryOffset:                   VkDeviceSize = 16384

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 11739591202880618534
        pObjectName:                    const char* = "Buffer to be cleared"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F7B60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = B097C90000000027

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = B097C90000000027
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F79E8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = B097C90000000027
    memory:                         VkDeviceMemory = A7C5450000000023
    memoryOffset:                   VkDeviceSize = 8372208

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F76F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 12724860273995808807
        pObjectName:                    const char* = "(wgpu internal) Staging"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71225670
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71225670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = B097C90000000027 [(wgpu internal) Staging]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001DD712256A8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = A2EB680000000026 [Buffer to be cleared]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = B097C90000000027 [(wgpu internal) Staging]
    dstBuffer:                      VkBuffer = A2EB680000000026 [Buffer to be cleared]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000070706F7C58
        pRegions[0]:                    const VkBufferCopy = 00000070706F7C58:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 16

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 3FBCD60000000028

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706F7B30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 3FBCD60000000028
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD715CC820
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD718D8510
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD718D9D20
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD718DCD40
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD718D24D0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD718DE550
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD71B213E0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD71B24400
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD71B25C10
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD71B28C30
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD71B2A440
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD71B2BC50
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD71B22BF0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD71B2D460
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD71B2EC70
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD71B31C90
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD71B30480

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F7710:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050606957696
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F7C38:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706F5910:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD71289190
            pAttachments[0]:                const VkAttachmentDescription = 000001DD71289190:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706F5670
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706F5670:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD7174C9E0
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD7174C9E0:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD7174CCD0
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD7174CCD0:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = B9181F0000000029

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = B9181F0000000029
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F5670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F52D8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F52D8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F50D0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = BA7514000000002A

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = B9181F0000000029
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F5670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F52D8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F52D8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F50D0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 02E2CD000000002B

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = B9181F0000000029
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F5670:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F52D8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F52D8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F50D0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = B12FB2000000002C

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3B50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_FRAMEBUFFER (24)
        objectHandle:                   uint64_t = 13435667053562298410
        pObjectName:                    const char* = "(wgpu internal) clear_texture clear pass"

Thread 0, Frame 0:
vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    pLabelInfo:                     const VkDebugUtilsLabelEXT* = 00000070706F5CF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (1000128002)
        pNext:                          const void* = NULL
        pLabelName:                     const char* = "(wgpu internal) clear_texture clear pass"
        color:                          float[4] = 00000070706F5D08
            color[0]:                       float = 0
            color[1]:                       float = 0
            color[2]:                       float = 0
            color[3]:                       float = 0

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706F6C60
        pViewports[0]:                  const VkViewport = 00000070706F6C60:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706F7410
        pScissors[0]:                   const VkRect2D = 00000070706F7410:
            offset:                         VkOffset2D = 00000070706F7410:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F7418:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706F7190:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = B9181F0000000029
        framebuffer:                    VkFramebuffer = BA7514000000002A [(wgpu internal) clear_texture clear pass]
        renderArea:                     VkRect2D = 00000070706F71B0:
            offset:                         VkOffset2D = 00000070706F71B0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F71B8:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706F5F28
            pClearValues[0]:                const VkClearValue = 00000070706F5F28 (Union):
                color:                          VkClearColorValue = 00000070706F5F28 (Union):
                    float32:                        float[4] = 00000070706F5F28
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 00000070706F5F28
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 00000070706F5F28
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 00000070706F5F28:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706F72D8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706F6040
                pAttachments[0]:                const VkImageView = C4F3070000000021 [(wgpu internal) clear texture view]
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []

Thread 0, Frame 0:
vkCmdEndDebugUtilsLabelEXT(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD6E362210
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD6E362210:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = AB64DE0000000020 [Output Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD6E362240:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    srcImage:                       VkImage = AB64DE0000000020 [Output Texture]
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstBuffer:                      VkBuffer = B991FA0000000024 [Output Buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F69F8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F69F8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 0
            imageSubresource:               VkImageSubresourceLayers = 00000070706F6A08:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F6A18:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F6A24:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []
    dstBuffer:                      VkBuffer = A2EB680000000026 [Buffer to be cleared]
    dstOffset:                      VkDeviceSize = 4
    size:                           VkDeviceSize = 8
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD71B30480 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050606963856
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD71B31C90 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B31C90 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71C23810
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71C23810:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = B991FA0000000024 [Output Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001DD71C23848:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = A2EB680000000026 [Buffer to be cleared]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD71B31C90 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD6E362210
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD6E362210:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = AB64DE0000000020 [Output Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD6E362240:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD71B31C90 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD7176CEA0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 3
            pCommandBuffers:                const VkCommandBuffer* = 000001DD7187A630
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD718D0CC0 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD71B31C90 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD71B30480 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = 95A125000000001A
                pSignalSemaphores[1]:           const VkSemaphore = 2CFBA2000000001C
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    semaphore:                      VkSemaphore = 2CFBA2000000001C
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = 2CFBA2000000001C
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    commandPool:                    VkCommandPool = 3FBCD60000000028
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = 301E6C0000000022 [(wgpu internal) Staging]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DD71275CB0
    buffer:                         VkBuffer = B097C90000000027 [(wgpu internal) Staging]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71275CB0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = 2CFBA2000000001C
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD7187AFB0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 1
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD71C67860

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD71C67860
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD71890D00

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD71C67860
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD71890D00

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = A43473000000002D

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 0980B0000000002E

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 4B7DF1000000002F

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = A21A4E0000000030

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0EA7170000000031

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71C67860
    buffer:                         VkBuffer = 0EA7170000000031
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 4FAC1C0000000032

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    buffer:                         VkBuffer = 0EA7170000000031
    memory:                         VkDeviceMemory = 4FAC1C0000000032
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 1055837926409109553
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = A21A4E0000000030
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD71D6AA50
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD71B27420
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD71B3C500
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD71B34CB0
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD71B394E0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD71B3DD10
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD71B334A0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD71B3ACF0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD71B3F520
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD71B37CD0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD71B364C0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD76703BA0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD767053B0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD76700B80
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD766FDB60
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD76706BC0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD76702390

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050686460816
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD76702390 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD76702390 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71C23630
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71C23630:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 0EA7170000000031 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD76702390 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = 0EA7170000000031 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD76702390 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71C23630
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71C23630:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 0EA7170000000031 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 00000070706F7CB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 0
        pSetLayouts:                    const VkDescriptorSetLayout* = 0000000000000008
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = A808D50000000033

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F77D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_PIPELINE_LAYOUT (17)
        objectHandle:                   uint64_t = 12108161794162294835
        pObjectName:                    const char* = "empty"

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000070706F66A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 276
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 2B424A0000000034

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkComputePipelineCreateInfo* = 00000070706F6F30
        pCreateInfos[0]:                const VkComputePipelineCreateInfo = 00000070706F6F30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stage:                          VkPipelineShaderStageCreateInfo = 00000070706F6F48:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:                          const void* = NULL
                flags:                          VkPipelineShaderStageCreateFlags = 0
                stage:                          VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:                         VkShaderModule = 2B424A0000000034
                pName:                          const char* = "main"
                pSpecializationInfo:            const VkSpecializationInfo* = NULL
            layout:                         VkPipelineLayout = A808D50000000033 [empty]
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000001DD765AE1E0
        pPipelines[0]:                  VkPipeline = 4295AB0000000035

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DD71C67860
    shaderModule:                   VkShaderModule = 2B424A0000000034
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkQueryPoolCreateInfo* = 00000070706F8650:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO (11)
        pNext:                          const void* = NULL
        flags:                          VkQueryPoolCreateFlags = 0
        queryType:                      VkQueryType = VK_QUERY_TYPE_PIPELINE_STATISTICS (1)
        queryCount:                     uint32_t = 2
        pipelineStatistics:             VkQueryPipelineStatisticFlags = 1152 (VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT | VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pQueryPool:                     VkQueryPool* = 9638F80000000036

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F8230:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_QUERY_POOL (12)
        objectHandle:                   uint64_t = 10824674383268675638
        pObjectName:                    const char* = "Compute Invocation QuerySet"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 2723BA0000000037

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD71C67860
    buffer:                         VkBuffer = 2723BA0000000037
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 59F7450000000038

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    memory:                         VkDeviceMemory = 59F7450000000038
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD74666000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    buffer:                         VkBuffer = 2723BA0000000037
    memory:                         VkDeviceMemory = 59F7450000000038
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 2820302300826828855
        pObjectName:                    const char* = "Compute Invocation Result Buffer"

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 944A2C0000000039

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706F4240:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 944A2C0000000039
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD71D6AF60
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD767083D0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD766FF370
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7670B3F0
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD76712C40
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD76714450
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD76711430
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD76709BE0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD76717470
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7670FC20
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD76715C60
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7670CC00
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD76718C80
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7670E410
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7671A490
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7671BCA0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD768BDCF0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050688277744
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:                       VkPipeline = 4295AB0000000035

Thread 0, Frame 0:
vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []
    queryPool:                      VkQueryPool = 9638F80000000036 [Compute Invocation QuerySet]
    firstQuery:                     uint32_t = 0
    queryCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBeginQuery(commandBuffer, queryPool, query, flags) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []
    queryPool:                      VkQueryPool = 9638F80000000036 [Compute Invocation QuerySet]
    query:                          uint32_t = 0
    flags:                          VkQueryControlFlags = 0

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []
    groupCountX:                    uint32_t = 2
    groupCountY:                    uint32_t = 3
    groupCountZ:                    uint32_t = 7

Thread 0, Frame 0:
vkCmdEndQuery(commandBuffer, queryPool, query) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []
    queryPool:                      VkQueryPool = 9638F80000000036 [Compute Invocation QuerySet]
    query:                          uint32_t = 0

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD768BDCF0 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050686565536
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7671BCA0 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7671BCA0 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F7500:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050686559376
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7671A490 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F7A28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7671A490 []
    queryPool:                      VkQueryPool = 9638F80000000036 [Compute Invocation QuerySet]
    firstQuery:                     uint32_t = 0
    queryCount:                     uint32_t = 1
    dstBuffer:                      VkBuffer = 2723BA0000000037 [Compute Invocation Result Buffer]
    dstOffset:                      VkDeviceSize = 0
    stride:                         VkDeviceSize = 16
    flags:                          VkQueryResultFlags = 3 (VK_QUERY_RESULT_64_BIT | VK_QUERY_RESULT_WAIT_BIT)

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7671A490 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050686510096
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7670E410 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7670E410 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71C24620
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71C24620:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 2723BA0000000037 [Compute Invocation Result Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7670E410 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD76702390 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD71890D00
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 5
            pCommandBuffers:                const VkCommandBuffer* = 000001DD691118F0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD76702390 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD7670E410 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD7671BCA0 []
                pCommandBuffers[3]:             const VkCommandBuffer = 000001DD768BDCF0 []
                pCommandBuffers[4]:             const VkCommandBuffer = 000001DD7671A490 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = A43473000000002D
                pSignalSemaphores[1]:           const VkSemaphore = 4B7DF1000000002F
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    semaphore:                      VkSemaphore = 4B7DF1000000002F
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = 4B7DF1000000002F
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    commandPool:                    VkCommandPool = 944A2C0000000039
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD71C67860
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = 4B7DF1000000002F
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD7187D4F0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD7694B400

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7694B400
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD76DFAAF0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7694B400
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD76DFAAF0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 210D07000000003A

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 5EB05E000000003B

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 9F9B41000000003C

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 59FFE0000000003D

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 5C5283000000003E

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7694B400
    buffer:                         VkBuffer = 5C5283000000003E
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 808562000000003F

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    buffer:                         VkBuffer = 5C5283000000003E
    memory:                         VkDeviceMemory = 808562000000003F
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 6652523635602882622
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 59FFE0000000003D
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD768A3300
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD768BACD0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD768BC4E0
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD768BF500
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD768B4C90
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD768B7CB0
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD768C0D10
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD768B64A0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD768C2520
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD768C3D30
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD768B94C0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD768CE5A0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD768CFDB0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD768C9D70
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD768CB580
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD768C8560
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD768CCD90

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050688339344
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD768CCD90 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768CCD90 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71C24800
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71C24800:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 5C5283000000003E [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768CCD90 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = 5C5283000000003E [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD768CCD90 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD71C24800
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD71C24800:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 5C5283000000003E [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkImageCreateInfo* = 00000070706F56A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:                         VkExtent3D = 00000070706F56BC:
            width:                          uint32_t = 64
            height:                         uint32_t = 64
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 27 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 56C9BD0000000040

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7694B400
    image:                          VkImage = 56C9BD0000000040
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F53E8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    image:                          VkImage = 56C9BD0000000040
    memory:                         VkDeviceMemory = 808562000000003F
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F50F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 6253737365278294080
        pObjectName:                    const char* = "Output Texture"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F5B28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 56C9BD0000000040 [Output Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F5B50:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F5B60:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F5D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 6612E40000000041

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 7355191830100574273
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F7538:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 56C9BD0000000040 [Output Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F7560:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F7570:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F7740:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 24 (VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 89E60F0000000042

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 535B660000000043

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7694B400
    buffer:                         VkBuffer = 535B660000000043
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 603CD90000000044

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    memory:                         VkDeviceMemory = 603CD90000000044
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD7519F000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    buffer:                         VkBuffer = 535B660000000043
    memory:                         VkDeviceMemory = 603CD90000000044
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 6006506678214721603
        pObjectName:                    const char* = "Output Buffer"

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 00000070706F7CB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 0
        pSetLayouts:                    const VkDescriptorSetLayout* = 0000000000000008
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 8CC1D80000000045

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000070706F1B00:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1428
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 4F8A8B0000000046

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000070706F1B00:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 860
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 69EEAA0000000047

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706F1CE0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD76799670
            pAttachments[0]:                const VkAttachmentDescription = 000001DD76799670:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706F1A40
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706F1A40:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD765AED80
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD765AED80:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD765AED90
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD765AED90:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 7323F50000000048

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 00000070706F3BB0
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 00000070706F3BB0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 00000070706F25C8
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 00000070706F25C8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = 4F8A8B0000000046
                    pName:                          const char* = "vs_main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 00000070706F25F8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = 69EEAA0000000047
                    pName:                          const char* = "fs_main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 00000070706F26F0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 0
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0000000000000004
                vertexAttributeDescriptionCount: uint32_t = 0
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0000000000000004
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 00000070706F27B0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 00000070706F3478:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 00000070706F2C10:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 0 (VK_CULL_MODE_NONE)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 00000070706F3570:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = 00000070706F3568
                    pSampleMask[0]:                 const VkSampleMask = 4294967295
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 00000070706F2EB8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 0
                depthWriteEnable:               VkBool32 = 0
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_NEVER (0)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 00000070706F2EE0:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 00000070706F2EFC:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 0
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 00000070706F3978:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 000001DD69112790
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 000001DD69112790:
                        blendEnable:                    VkBool32 = 0
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 00000070706F39A0
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 00000070706F3A20:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 4
                pDynamicStates:                 const VkDynamicState* = 00000070706F23B0
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]:              const VkDynamicState = VK_DYNAMIC_STATE_BLEND_CONSTANTS (4)
                    pDynamicStates[3]:              const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:                         VkPipelineLayout = 8CC1D80000000045
            renderPass:                     VkRenderPass = 7323F50000000048
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000001DD765AEDE0
        pPipelines[0]:                  VkPipeline = 40B43C0000000049

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DD7694B400
    shaderModule:                   VkShaderModule = 4F8A8B0000000046
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DD7694B400
    shaderModule:                   VkShaderModule = 69EEAA0000000047
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 74D977000000004A

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706EC890:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 74D977000000004A
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD77070B30
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD768C5540
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD768D15C0
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD768C6D50
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD768D2DD0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD771ACDC0
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD771AB5B0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD771AE5D0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD771B4610
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD771AFDE0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD771B2E00
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD771A9DA0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD771B5E20
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD771B7630
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD771BBE60
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD771B8E40
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD771B15F0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706EC470:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050697663984
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706EC998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706E7FE0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD7715CEC0
            pAttachments[0]:                const VkAttachmentDescription = 000001DD7715CEC0:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706E7D40
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706E7D40:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD765AEC90
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD765AEC90:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD765AEE00
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD765AEE00:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 67022E000000004B

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706E7DA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = 67022E000000004B
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706E7D40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706E79A8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706E79A8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 24 (VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706E77A0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 45D6D1000000004C

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706E7DA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = 67022E000000004B
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706E7D40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706E79A8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706E79A8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 24 (VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706E77A0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 73A850000000004D

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706E7DA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = 67022E000000004B
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706E7D40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706E79A8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706E79A8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 25 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706E77A0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 612F93000000004E

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706E9330
        pViewports[0]:                  const VkViewport = 00000070706E9330:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706E9AE0
        pScissors[0]:                   const VkRect2D = 00000070706E9AE0:
            offset:                         VkOffset2D = 00000070706E9AE0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706E9AE8:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706E9860:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = 67022E000000004B
        framebuffer:                    VkFramebuffer = 45D6D1000000004C
        renderArea:                     VkRect2D = 00000070706E9880:
            offset:                         VkOffset2D = 00000070706E9880:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706E9888:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706E85F8
            pClearValues[0]:                const VkClearValue = 00000070706E85F8 (Union):
                color:                          VkClearColorValue = 00000070706E85F8 (Union):
                    float32:                        float[4] = 00000070706E85F8
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 00000070706E85F8
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 00000070706E85F8
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 00000070706E85F8:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706E99A8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706E8710
                pAttachments[0]:                const VkImageView = 89E60F0000000042
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:                       VkPipeline = 40B43C0000000049

Thread 0, Frame 0:
vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []
    vertexCount:                    uint32_t = 3
    instanceCount:                  uint32_t = 1
    firstVertex:                    uint32_t = 0
    firstInstance:                  uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771B15F0 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706EC450:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050697694784
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771B8E40 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706EC978:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771B8E40 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F6B50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050697707104
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771BBE60 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F7078:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771BBE60 []
    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD6E362CC0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD6E362CC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 56C9BD0000000040 [Output Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD6E362CF0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771BBE60 []
    srcImage:                       VkImage = 56C9BD0000000040 [Output Texture]
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstBuffer:                      VkBuffer = 535B660000000043 [Output Buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F69F8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F69F8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 64
            imageSubresource:               VkImageSubresourceLayers = 00000070706F6A08:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F6A18:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F6A24:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771BBE60 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050697688624
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771B7630 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B7630 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD77150CB0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD77150CB0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 535B660000000043 [Output Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD771B7630 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD6E362CC0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD6E362CC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 56C9BD0000000040 [Output Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD6E362CF0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD771B7630 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD768CCD90 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD76DFAAF0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 5
            pCommandBuffers:                const VkCommandBuffer* = 000001DD69113120
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD768CCD90 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD771B7630 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD771B8E40 []
                pCommandBuffers[3]:             const VkCommandBuffer = 000001DD771B15F0 []
                pCommandBuffers[4]:             const VkCommandBuffer = 000001DD771BBE60 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = 210D07000000003A
                pSignalSemaphores[1]:           const VkSemaphore = 9F9B41000000003C
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    semaphore:                      VkSemaphore = 9F9B41000000003C
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = 9F9B41000000003C
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    commandPool:                    VkCommandPool = 74D977000000004A
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7694B400
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = 9F9B41000000003C
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD76DD0BB0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD77326AF0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD77326AF0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7715ACD0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD77326AF0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7715ACD0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 7CD292000000004F

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 7F79AD0000000050

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 7DDD740000000051

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 72303F0000000052

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 02A7F70000000053

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 02A7F70000000053
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 74EA280000000054

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 02A7F70000000053
    memory:                         VkDeviceMemory = 74EA280000000054
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 191393088558596179
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 72303F0000000052
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD77075690
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD771BD670
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD771C4EC0
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD771BA650
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD771BEE80
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD771C1EA0
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD771C36B0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD771C66D0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD771C7EE0
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD771C0690
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7A612B90
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7A61BBF0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7A6143A0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7A618BD0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7A61A3E0
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7A6173C0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7A611380

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050752582528
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD77150BC0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD77150BC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 02A7F70000000053 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = 02A7F70000000053 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD77150BC0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD77150BC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 02A7F70000000053 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 6871490000000055

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 6871490000000055
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 05C59A0000000056

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    memory:                         VkDeviceMemory = 05C59A0000000056
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD7BB00000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 6871490000000055
    memory:                         VkDeviceMemory = 05C59A0000000056
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 7525876716661637205
        pObjectName:                    const char* = "mapped_at_creation: false, with MAP_WRITE"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 73B89B0000000057

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 73B89B0000000057
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 73B89B0000000057
    memory:                         VkDeviceMemory = 05C59A0000000056
    memoryOffset:                   VkDeviceSize = 1024

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 8338585134378778711
        pObjectName:                    const char* = "mapped_at_creation: false, without MAP_WRITE"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 24
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 625F640000000058

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 625F640000000058
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 24
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 625F640000000058
    memory:                         VkDeviceMemory = 05C59A0000000056
    memoryOffset:                   VkDeviceSize = 2048

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 7088494289667227736
        pObjectName:                    const char* = "partially written"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F7B60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0EE24D0000000059

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 0EE24D0000000059
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F79E8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F7038:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 3
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 4868E6000000005A

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    memory:                         VkDeviceMemory = 4868E6000000005A
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD79660000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 0EE24D0000000059
    memory:                         VkDeviceMemory = 4868E6000000005A
    memoryOffset:                   VkDeviceSize = 8388592

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F76F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 1072504323662938201
        pObjectName:                    const char* = "(wgpu internal) Staging"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD77150BC0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD77150BC0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 0EE24D0000000059 [(wgpu internal) Staging]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001DD77150BF8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 625F640000000058 [partially written]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = 0EE24D0000000059 [(wgpu internal) Staging]
    dstBuffer:                      VkBuffer = 625F640000000058 [partially written]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000070706F7C58
        pRegions[0]:                    const VkBufferCopy = 00000070706F7C58:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 4
            size:                           VkDeviceSize = 16

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16
        usage:                          VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 6DCC3F000000005B

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 6DCC3F000000005B
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 6DCC3F000000005B
    memory:                         VkDeviceMemory = 05C59A0000000056
    memoryOffset:                   VkDeviceSize = 3072

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 7911767914615668827
        pObjectName:                    const char* = "used in binding"

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 00000070706F6938:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 000001DD76DD0A50
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000001DD76DD0A50:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 130160000000005C

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 00000070706F50A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)
        maxSets:                        uint32_t = 64
        poolSizeCount:                  uint32_t = 1
        pPoolSizes:                     const VkDescriptorPoolSize* = 00000070706F5060
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 00000070706F5060:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:                uint32_t = 64
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 4256C1000000005D

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 00000070706F4FA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 4256C1000000005D
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 00000070706F5048
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 130160000000005C
    pDescriptorSets:                VkDescriptorSet* = 000001DD77312B20
        pDescriptorSets[0]:             VkDescriptorSet = 96FBE2000000005E

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001DD77326AF0
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 000001DD6EA76AB0
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000001DD6EA76AB0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 96FBE2000000005E
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 000001DD76DD2C90
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000001DD76DD2C90:
                    buffer:                         VkBuffer = 6DCC3F000000005B [used in binding]
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 16
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF66E1C1408

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 00000070706F7CB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001DD77312B20
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 130160000000005C
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 176083000000005F

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000070706F66A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 1028
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 44349C0000000060

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkComputePipelineCreateInfo* = 00000070706F6F30
        pCreateInfos[0]:                const VkComputePipelineCreateInfo = 00000070706F6F30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stage:                          VkPipelineShaderStageCreateInfo = 00000070706F6F48:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:                          const void* = NULL
                flags:                          VkPipelineShaderStageCreateFlags = 0
                stage:                          VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:                         VkShaderModule = 44349C0000000060
                pName:                          const char* = "main"
                pSpecializationInfo:            const VkSpecializationInfo* = NULL
            layout:                         VkPipelineLayout = 176083000000005F
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000001DD77312B20
        pPipelines[0]:                  VkPipeline = 9389C50000000061

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DD77326AF0
    shaderModule:                   VkShaderModule = 44349C0000000060
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 1D4E2E0000000062

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706F4240:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 1D4E2E0000000062
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD77074D90
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7A615BB0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7A624C50
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7A623440
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7A626460
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7A620420
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7A61D400
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7A61EC10
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7A627C70
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7A62C4A0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7A629480
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7A621C30
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7A62AC90
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7A62DCB0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7A62F4C0
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7A807570
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7A80A590

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050754651536
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A80A590 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A80A590 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:                       VkPipeline = 9389C50000000061

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A80A590 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:                         VkPipelineLayout = 176083000000005F
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 00000070706F4428
        pDescriptorSets[0]:             const VkDescriptorSet = 96FBE2000000005E
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = 0000000000000004

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A80A590 []
    groupCountX:                    uint32_t = 4
    groupCountY:                    uint32_t = 1
    groupCountZ:                    uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A80A590 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050754639216
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A807570 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A807570 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050752705728
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A62F4C0 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A62F4C0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7A6CAD30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7A6CAD30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 6DCC3F000000005B [used in binding]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A62F4C0 [(wgpu internal) Transit]
    dstBuffer:                      VkBuffer = 6DCC3F000000005B [used in binding]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 16
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A62F4C0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 10376 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7A6CAD30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7A6CAD30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 96 (VK_ACCESS_SHADER_READ_BIT | VK_ACCESS_SHADER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 6DCC3F000000005B [used in binding]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A62F4C0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD7715ACD0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 4
            pCommandBuffers:                const VkCommandBuffer* = 000001DD691144A0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD7A611380 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD7A62F4C0 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD7A807570 []
                pCommandBuffers[3]:             const VkCommandBuffer = 000001DD7A80A590 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = 7CD292000000004F
                pSignalSemaphores[1]:           const VkSemaphore = 7DDD740000000051
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    semaphore:                      VkSemaphore = 7DDD740000000051
    pValue:                         uint64_t* = 1

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    commandPool:                    VkCommandPool = 1D4E2E0000000062
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 000001DD77326AF0
    buffer:                         VkBuffer = 0EE24D0000000059 [(wgpu internal) Staging]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = 7DDD740000000051
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    memoryRangeCount:               uint32_t = 1
    pMemoryRanges:                  const VkMappedMemoryRange* = 00000070706F9628
        pMemoryRanges[0]:               const VkMappedMemoryRange = 00000070706F9628:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE (6)
            pNext:                          const void* = NULL
            memory:                         VkDeviceMemory = 05C59A0000000056
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 64

Thread 0, Frame 0:
vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    memoryRangeCount:               uint32_t = 1
    pMemoryRanges:                  const VkMappedMemoryRange* = 00000070706F9628
        pMemoryRanges[0]:               const VkMappedMemoryRange = 00000070706F9628:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE (6)
            pNext:                          const void* = NULL
            memory:                         VkDeviceMemory = 05C59A0000000056
            offset:                         VkDeviceSize = 1024
            size:                           VkDeviceSize = 64

Thread 0, Frame 0:
vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    memoryRangeCount:               uint32_t = 1
    pMemoryRanges:                  const VkMappedMemoryRange* = 00000070706F9628
        pMemoryRanges[0]:               const VkMappedMemoryRange = 00000070706F9628:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE (6)
            pNext:                          const void* = NULL
            memory:                         VkDeviceMemory = 05C59A0000000056
            offset:                         VkDeviceSize = 2048
            size:                           VkDeviceSize = 64

Thread 0, Frame 0:
vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    memoryRangeCount:               uint32_t = 1
    pMemoryRanges:                  const VkMappedMemoryRange* = 00000070706F9628
        pMemoryRanges[0]:               const VkMappedMemoryRange = 00000070706F9628:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE (6)
            pNext:                          const void* = NULL
            memory:                         VkDeviceMemory = 05C59A0000000056
            offset:                         VkDeviceSize = 2048
            size:                           VkDeviceSize = 64

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD77326AF0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = 7DDD740000000051
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD76DD2950
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD7A90FD80

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7A91BF80

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7A91BF80

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 5EF3070000000063

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 9F58380000000064

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 5DBCF90000000065

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 5011AA0000000066

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 85798B0000000067

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    buffer:                         VkBuffer = 85798B0000000067
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 5684940000000068

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    buffer:                         VkBuffer = 85798B0000000067
    memory:                         VkDeviceMemory = 5684940000000068
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 9617871311342665831
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 5011AA0000000066
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD7AA182A0
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7A805D60
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7A80BDA0
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7A8105D0
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7A811DE0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7A80D5B0
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7A80EDC0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7A8135F0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7A808D80
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7A816610
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7A819630
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7A817E20
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7A814E00
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7A81DE60
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7A81F670
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7A820E80
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7A822690

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050754750096
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A822690 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A822690 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7A6CAC40
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7A6CAC40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 85798B0000000067 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A822690 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = 85798B0000000067 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7A822690 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7A6CAC40
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7A6CAC40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 85798B0000000067 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkImageCreateInfo* = 00000070706F56A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:                         VkExtent3D = 00000070706F56BC:
            width:                          uint32_t = 64
            height:                         uint32_t = 64
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 564FDD0000000069

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    image:                          VkImage = 564FDD0000000069
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F53E8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    image:                          VkImage = 564FDD0000000069
    memory:                         VkDeviceMemory = 5684940000000068
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F50F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 6219432602491682921
        pObjectName:                    const char* = "Sampled Texture"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F5B28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 564FDD0000000069 [Sampled Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F5B50:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F5B60:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F5D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 852B56000000006A

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 9595857989042962538
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F7538:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 564FDD0000000069 [Sampled Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F7560:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F7570:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F7740:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 20 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 53E60F000000006B

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 2C71F0000000006C

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    buffer:                         VkBuffer = 2C71F0000000006C
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 8F1C31000000006D

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    memory:                         VkDeviceMemory = 8F1C31000000006D
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD7E5A0000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    buffer:                         VkBuffer = 2C71F0000000006C
    memory:                         VkDeviceMemory = 8F1C31000000006D
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 3202604692827799660
        pObjectName:                    const char* = "Sampled Texture Buffer"

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkImageCreateInfo* = 00000070706F56A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:                         VkExtent3D = 00000070706F56BC:
            width:                          uint32_t = 64
            height:                         uint32_t = 64
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 25 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 4E4775000000006E

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    image:                          VkImage = 4E4775000000006E
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F53E8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    image:                          VkImage = 4E4775000000006E
    memory:                         VkDeviceMemory = 5684940000000068
    memoryOffset:                   VkDeviceSize = 540672

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F50F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 5640605701165285486
        pObjectName:                    const char* = "Storage Texture"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F5B28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 4E4775000000006E [Storage Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F5B50:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F5B60:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F5D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 2D93AC000000006F

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 3284157669283201135
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F7538:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 4E4775000000006E [Storage Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F7560:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F7570:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F7740:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 24 (VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = B3EE8B0000000070

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 44695A0000000071

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    buffer:                         VkBuffer = 44695A0000000071
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    buffer:                         VkBuffer = 44695A0000000071
    memory:                         VkDeviceMemory = 8F1C31000000006D
    memoryOffset:                   VkDeviceSize = 16384

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 4929570223180218481
        pObjectName:                    const char* = "Storage Texture Buffer"

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 00000070706F6938:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 2
        pBindings:                      const VkDescriptorSetLayoutBinding* = 000001DD7B095990
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000001DD7B095990:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 000001DD7B0959A8:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE (3)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 2894590000000072

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 00000070706F50A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)
        maxSets:                        uint32_t = 64
        poolSizeCount:                  uint32_t = 2
        pPoolSizes:                     const VkDescriptorPoolSize* = 00000070706F5060
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 00000070706F5060:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:                uint32_t = 64
            pPoolSizes[1]:                  const VkDescriptorPoolSize = 00000070706F5068:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE (3)
                descriptorCount:                uint32_t = 64
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = B6BEE80000000073

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 00000070706F4FA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = B6BEE80000000073
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 00000070706F5048
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 2894590000000072
    pDescriptorSets:                VkDescriptorSet* = 000001DD7A91D150
        pDescriptorSets[0]:             VkDescriptorSet = 421A0F0000000074

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    descriptorWriteCount:           uint32_t = 2
    pDescriptorWrites:              const VkWriteDescriptorSet* = 000001DD7AA17910
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000001DD7AA17910:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 421A0F0000000074
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo:                     const VkDescriptorImageInfo* = 000001DD7B095110
                pImageInfo[0]:                  const VkDescriptorImageInfo = 000001DD7B095110:
                    sampler:                        VkSampler = 0000000000000000
                    imageView:                      VkImageView = 53E60F000000006B
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000001DD7AA17950:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 421A0F0000000074
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE (3)
            pImageInfo:                     const VkDescriptorImageInfo* = 000001DD7B095128
                pImageInfo[0]:                  const VkDescriptorImageInfo = 000001DD7B095128:
                    sampler:                        VkSampler = 0000000000000000
                    imageView:                      VkImageView = B3EE8B0000000070
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_GENERAL (1)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF66E1C1408

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 00000070706F7CB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 000001DD7A91D150
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 2894590000000072
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 33F7660000000075

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000070706F66A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 660
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = BD60BD0000000076

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkComputePipelineCreateInfo* = 00000070706F6F30
        pCreateInfos[0]:                const VkComputePipelineCreateInfo = 00000070706F6F30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stage:                          VkPipelineShaderStageCreateInfo = 00000070706F6F48:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:                          const void* = NULL
                flags:                          VkPipelineShaderStageCreateFlags = 0
                stage:                          VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:                         VkShaderModule = BD60BD0000000076
                pName:                          const char* = "main"
                pSpecializationInfo:            const VkSpecializationInfo* = NULL
            layout:                         VkPipelineLayout = 33F7660000000075
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 000001DD7A91D670
        pPipelines[0]:                  VkPipeline = B82DE40000000077

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 000001DD7A90FD80
    shaderModule:                   VkShaderModule = BD60BD0000000076
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 3F36830000000078

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706F4240:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 3F36830000000078
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD7AA16830
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7A823EA0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7A81AE40
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7A81C650
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7EDF23F0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7EDF3C00
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7EDFFC80
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7EDF5410
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7EDF6C20
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7EE01490
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7EE02CA0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7EDF8430
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7EDFB450
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7EE044B0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7EDF9C40
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7EE05CC0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7EDFCC60

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050827996256
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EDFCC60 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDFCC60 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:                       VkPipeline = B82DE40000000077

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDFCC60 []
    pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:                         VkPipelineLayout = 33F7660000000075
    firstSet:                       uint32_t = 0
    descriptorSetCount:             uint32_t = 1
    pDescriptorSets:                const VkDescriptorSet* = 00000070706F4428
        pDescriptorSets[0]:             const VkDescriptorSet = 421A0F0000000074
    dynamicOffsetCount:             uint32_t = 0
    pDynamicOffsets:                const uint32_t* = 0000000000000004

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDFCC60 []
    groupCountX:                    uint32_t = 4
    groupCountY:                    uint32_t = 1
    groupCountZ:                    uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EDFCC60 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3E20:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050828033216
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EE05CC0 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F4348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EE05CC0 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F6B50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050827983936
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EDF9C40 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F7078:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDF9C40 []
    srcStageMask:                   VkPipelineStageFlags = 2184 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546280
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546280:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 564FDD0000000069 [Sampled Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD775462B0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDF9C40 []
    srcImage:                       VkImage = 564FDD0000000069 [Sampled Texture]
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstBuffer:                      VkBuffer = 2C71F0000000006C [Sampled Texture Buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F69F8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F69F8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 64
            imageSubresource:               VkImageSubresourceLayers = 00000070706F6A08:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F6A18:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F6A24:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDF9C40 []
    srcStageMask:                   VkPipelineStageFlags = 2184 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546280
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546280:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 96 (VK_ACCESS_SHADER_READ_BIT | VK_ACCESS_SHADER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_GENERAL (1)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 4E4775000000006E [Storage Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD775462B0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EDF9C40 []
    srcImage:                       VkImage = 4E4775000000006E [Storage Texture]
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstBuffer:                      VkBuffer = 44695A0000000071 [Storage Texture Buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F69F8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F69F8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 64
            imageSubresource:               VkImageSubresourceLayers = 00000070706F6A08:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F6A18:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F6A24:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EDF9C40 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050828027056
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546280
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546280:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 564FDD0000000069 [Sampled Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD775462B0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706F1860:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD7AE2CD20
            pAttachments[0]:                const VkAttachmentDescription = 000001DD7AE2CD20:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706F15C0
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706F15C0:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD7A91D540
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD7A91D540:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD7A91D5A0
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD7A91D5A0:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = A182620000000079

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F1620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = A182620000000079
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F15C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F1228
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F1228:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F1020
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = B3FFC1000000007A

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F1620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = A182620000000079
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F15C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F1228
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F1228:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F1020
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 051820000000007B

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F1620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = A182620000000079
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F15C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F1228
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F1228:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F1020
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = B8A507000000007C

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706EFAA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_FRAMEBUFFER (24)
        objectHandle:                   uint64_t = 12970297657594478714
        pObjectName:                    const char* = "(wgpu internal) clear_texture clear pass"

Thread 0, Frame 0:
vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    pLabelInfo:                     const VkDebugUtilsLabelEXT* = 00000070706F1C40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (1000128002)
        pNext:                          const void* = NULL
        pLabelName:                     const char* = "(wgpu internal) clear_texture clear pass"
        color:                          float[4] = 00000070706F1C58
            color[0]:                       float = 0
            color[1]:                       float = 0
            color[2]:                       float = 0
            color[3]:                       float = 0

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706F2BB0
        pViewports[0]:                  const VkViewport = 00000070706F2BB0:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706F3360
        pScissors[0]:                   const VkRect2D = 00000070706F3360:
            offset:                         VkOffset2D = 00000070706F3360:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3368:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706F30E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = A182620000000079
        framebuffer:                    VkFramebuffer = B3FFC1000000007A [(wgpu internal) clear_texture clear pass]
        renderArea:                     VkRect2D = 00000070706F3100:
            offset:                         VkOffset2D = 00000070706F3100:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3108:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706F1E78
            pClearValues[0]:                const VkClearValue = 00000070706F1E78 (Union):
                color:                          VkClearColorValue = 00000070706F1E78 (Union):
                    float32:                        float[4] = 00000070706F1E78
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 00000070706F1E78
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 00000070706F1E78
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 00000070706F1E78:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706F3228:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706F1F90
                pAttachments[0]:                const VkImageView = 852B56000000006A [(wgpu internal) clear texture view]
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdEndDebugUtilsLabelEXT(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546280
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546280:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 4E4775000000006E [Storage Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD775462B0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    pLabelInfo:                     const VkDebugUtilsLabelEXT* = 00000070706F1C40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (1000128002)
        pNext:                          const void* = NULL
        pLabelName:                     const char* = "(wgpu internal) clear_texture clear pass"
        color:                          float[4] = 00000070706F1C58
            color[0]:                       float = 0
            color[1]:                       float = 0
            color[2]:                       float = 0
            color[3]:                       float = 0

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706F2BB0
        pViewports[0]:                  const VkViewport = 00000070706F2BB0:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706F3360
        pScissors[0]:                   const VkRect2D = 00000070706F3360:
            offset:                         VkOffset2D = 00000070706F3360:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3368:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706F30E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = A182620000000079
        framebuffer:                    VkFramebuffer = B3FFC1000000007A [(wgpu internal) clear_texture clear pass]
        renderArea:                     VkRect2D = 00000070706F3100:
            offset:                         VkOffset2D = 00000070706F3100:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3108:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706F1E78
            pClearValues[0]:                const VkClearValue = 00000070706F1E78 (Union):
                color:                          VkClearColorValue = 00000070706F1E78 (Union):
                    float32:                        float[4] = 00000070706F1E78
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 00000070706F1E78
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 00000070706F1E78
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 00000070706F1E78:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706F3228:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706F1F90
                pAttachments[0]:                const VkImageView = 2D93AC000000006F [(wgpu internal) clear texture view]
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdEndDebugUtilsLabelEXT(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7A6C9200
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7A6C9200:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 2C71F0000000006C [Sampled Texture Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001DD7A6C9238:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 44695A0000000071 [Storage Texture Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dstStageMask:                   VkPipelineStageFlags = 2184 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 2
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546280
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546280:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 564FDD0000000069 [Sampled Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD775462B0:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
        pImageMemoryBarriers[1]:        const VkImageMemoryBarrier = 000001DD775462C8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 96 (VK_ACCESS_SHADER_READ_BIT | VK_ACCESS_SHADER_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_GENERAL (1)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 4E4775000000006E [Storage Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD775462F8:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7A822690 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD7A91BF80
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 5
            pCommandBuffers:                const VkCommandBuffer* = 000001DD69115BE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD7A822690 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD7EE044B0 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD7EE05CC0 []
                pCommandBuffers[3]:             const VkCommandBuffer = 000001DD7EDFCC60 []
                pCommandBuffers[4]:             const VkCommandBuffer = 000001DD7EDF9C40 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = 5EF3070000000063
                pSignalSemaphores[1]:           const VkSemaphore = 5DBCF90000000065
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    semaphore:                      VkSemaphore = 5DBCF90000000065
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = 5DBCF90000000065
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    commandPool:                    VkCommandPool = 3F36830000000078
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7A90FD80
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = 5DBCF90000000065
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD7A900B00
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD7EFA2CD0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7EFA2CD0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7AF0F2A0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7EFA2CD0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD7AF0F2A0

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = B4AE2E000000007D

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 010AC5000000007E

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = B3C7BC000000007F

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = AD937B0000000080

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 0F3EAA0000000081

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7EFA2CD0
    buffer:                         VkBuffer = 0F3EAA0000000081
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = CC25C90000000082

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    buffer:                         VkBuffer = 0F3EAA0000000081
    memory:                         VkDeviceMemory = CC25C90000000082
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 1098502276101701761
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = AD937B0000000080
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD7AA13CE0
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7EE074D0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7EE08CE0
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7EDFE470
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7EE13550
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7EE0D510
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7EE0A4F0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7EE14D60
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7EE16570
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7EE0BD00
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7EE17D80
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7EE19590
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7EE11D40
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7EE10530
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7EE0ED20
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7EE225F0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7EE1C5B0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050828125616
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EE1C5B0 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE1C5B0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7F5760B0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7F5760B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 0F3EAA0000000081 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE1C5B0 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = 0F3EAA0000000081 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7EE1C5B0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7F5760B0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7F5760B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 0F3EAA0000000081 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkImageCreateInfo* = 00000070706F56A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:                         VkExtent3D = 00000070706F56BC:
            width:                          uint32_t = 64
            height:                         uint32_t = 64
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = A171580000000083

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7EFA2CD0
    image:                          VkImage = A171580000000083
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F53E8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    image:                          VkImage = A171580000000083
    memory:                         VkDeviceMemory = CC25C90000000082
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F50F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 11633176069497946243
        pObjectName:                    const char* = "Copy To Buffer Texture"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F5B28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = A171580000000083 [Copy To Buffer Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F5B50:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F5B60:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F5D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 13CC1F0000000084

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 1426549266830065796
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = CA0B160000000085

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7EFA2CD0
    buffer:                         VkBuffer = CA0B160000000085
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = A6B6CD0000000086

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    memory:                         VkDeviceMemory = A6B6CD0000000086
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD00113000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    buffer:                         VkBuffer = CA0B160000000085
    memory:                         VkDeviceMemory = A6B6CD0000000086
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 14558754409661071493
        pObjectName:                    const char* = "Copy to Buffer Buffer"

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 149D740000000087

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706F6F70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 149D740000000087
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD7F579D90
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7EE23E00
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7EE25610
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7EE1DDC0
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7EE1ADA0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7EE29E40
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7EE28630
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7EE1F5D0
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7EE26E20
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7EE2B650
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7EE20DE0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7EE2FE80
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7EE2CE60
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7EE2E670
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7EE31690
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7F8A7320
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7F8A12E0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F6B50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839155424
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A12E0 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F7078:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A12E0 []
    srcImage:                       VkImage = A171580000000083 [Copy To Buffer Texture]
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstBuffer:                      VkBuffer = CA0B160000000085 [Copy to Buffer Buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F69F8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F69F8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 64
            imageSubresource:               VkImageSubresourceLayers = 00000070706F6A08:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F6A18:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F6A24:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A12E0 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839180064
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546D30
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = A171580000000083 [Copy To Buffer Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD77546D60:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706F1860:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD7F57F400
            pAttachments[0]:                const VkAttachmentDescription = 000001DD7F57F400:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706F15C0
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706F15C0:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD7EFB05C0
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD7EFB05C0:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD7EFB0680
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD7EFB0680:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = C079B30000000088

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F1620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = C079B30000000088
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F15C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F1228
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F1228:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F1020
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 93D4F20000000089

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F1620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = C079B30000000088
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F15C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F1228
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F1228:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F1020
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = 1983B0000000008A

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706F1620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = C079B30000000088
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706F15C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706F1228
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706F1228:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706F1020
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = DE4E51000000008B

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706EFAA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_FRAMEBUFFER (24)
        objectHandle:                   uint64_t = 10652405100451987593
        pObjectName:                    const char* = "(wgpu internal) clear_texture clear pass"

Thread 0, Frame 0:
vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    pLabelInfo:                     const VkDebugUtilsLabelEXT* = 00000070706F1C40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (1000128002)
        pNext:                          const void* = NULL
        pLabelName:                     const char* = "(wgpu internal) clear_texture clear pass"
        color:                          float[4] = 00000070706F1C58
            color[0]:                       float = 0
            color[1]:                       float = 0
            color[2]:                       float = 0
            color[3]:                       float = 0

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706F2BB0
        pViewports[0]:                  const VkViewport = 00000070706F2BB0:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706F3360
        pScissors[0]:                   const VkRect2D = 00000070706F3360:
            offset:                         VkOffset2D = 00000070706F3360:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3368:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706F30E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = C079B30000000088
        framebuffer:                    VkFramebuffer = 93D4F20000000089 [(wgpu internal) clear_texture clear pass]
        renderArea:                     VkRect2D = 00000070706F3100:
            offset:                         VkOffset2D = 00000070706F3100:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3108:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706F1E78
            pClearValues[0]:                const VkClearValue = 00000070706F1E78 (Union):
                color:                          VkClearColorValue = 00000070706F1E78 (Union):
                    float32:                        float[4] = 00000070706F1E78
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 00000070706F1E78
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 00000070706F1E78
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 00000070706F1E78:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706F3228:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706F1F90
                pAttachments[0]:                const VkImageView = 13CC1F0000000084 [(wgpu internal) clear texture view]
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdEndDebugUtilsLabelEXT(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7F575750
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7F575750:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = CA0B160000000085 [Copy to Buffer Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD77546D30
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD77546D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = A171580000000083 [Copy To Buffer Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD77546D60:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7EE1C5B0 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD7AF0F2A0
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 3
            pCommandBuffers:                const VkCommandBuffer* = 000001DD7AB19370
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD7EE1C5B0 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD7F8A7320 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD7F8A12E0 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = B4AE2E000000007D
                pSignalSemaphores[1]:           const VkSemaphore = B3C7BC000000007F
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    semaphore:                      VkSemaphore = B3C7BC000000007F
    pValue:                         uint64_t* = 1

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    commandPool:                    VkCommandPool = 149D740000000087
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = B3C7BC000000007F
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7EFA2CD0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = B3C7BC000000007F
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000070706DB8F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000070706DC5D0
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000070706DC5D0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF66E1C10F8
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 3
        ppEnabledExtensionNames:        const char* const* = 000001DD7AB19CD0
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 00000070706DC450:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 0
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 0
            tessellationShader:             VkBool32 = 0
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 0
            logicOp:                        VkBool32 = 0
            multiDrawIndirect:              VkBool32 = 0
            drawIndirectFirstInstance:      VkBool32 = 0
            depthClamp:                     VkBool32 = 0
            depthBiasClamp:                 VkBool32 = 0
            fillModeNonSolid:               VkBool32 = 0
            depthBounds:                    VkBool32 = 0
            wideLines:                      VkBool32 = 0
            largePoints:                    VkBool32 = 0
            alphaToOne:                     VkBool32 = 0
            multiViewport:                  VkBool32 = 0
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 0
            occlusionQueryPrecise:          VkBool32 = 0
            pipelineStatisticsQuery:        VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended:      VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample:  VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:             VkBool32 = 0
            shaderCullDistance:             VkBool32 = 0
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 0
            shaderInt16:                    VkBool32 = 0
            shaderResourceResidency:        VkBool32 = 0
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 0
            sparseResidencyBuffer:          VkBool32 = 0
            sparseResidencyImage2D:         VkBool32 = 0
            sparseResidencyImage3D:         VkBool32 = 0
            sparseResidency2Samples:        VkBool32 = 0
            sparseResidency4Samples:        VkBool32 = 0
            sparseResidency8Samples:        VkBool32 = 0
            sparseResidency16Samples:       VkBool32 = 0
            sparseResidencyAliased:         VkBool32 = 0
            variableMultisampleRate:        VkBool32 = 0
            inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000070706DC438:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000070706DC2F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000070706DC2D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000070706DC2B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000070706DC290:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 000001DD7F95AAD0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000070706DB5C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000070706DB5E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000070706DB620:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000070706DB630:
            maxExtent:                      VkExtent3D = 00000070706DB630:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000070706DB600:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000070706DB610:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000070706DB620
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000070706DB620:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB62C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000070706DB638:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB644:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000070706DB650:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000070706DB668:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000070706DB680:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000070706DB68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000070706DB698:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000070706DB6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7F95AAD0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD028A8A40

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 000001DD67687FA0
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000070706CE678:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000070706CE67C
            memoryTypes[0]:                 VkMemoryType = 00000070706CE67C:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000070706CE684:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000070706CE68C:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000070706CE694:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000070706CE69C:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000070706CE6A4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000070706CE780
            memoryHeaps[0]:                 VkMemoryHeap = 00000070706CE780:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000070706CE790:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000070706CE7A0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 000001DD7F95AAD0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 000001DD028A8A40

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 9F1516000000008C

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706D07E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = E0601F000000008D

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000070706C4DE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000070706C4DA8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = D3DD54000000008E

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706C4AA8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = 993A4D000000008F

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706C4A30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = E647EA0000000090

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7F95AAD0
    buffer:                         VkBuffer = E647EA0000000090
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706C48B8:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706C3D68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = D68CBB0000000091

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    buffer:                         VkBuffer = E647EA0000000090
    memory:                         VkDeviceMemory = D68CBB0000000091
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C45C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 16593488637790781584
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706C4C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = 993A4D000000008F
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD7F57DA50
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7F89FAD0
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7F8A8B30
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7F8A5B10
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7F8A2AF0
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7F8A4300
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7F89E2C0
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7F8B0380
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7F8AA340
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7F8AD360
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7F8ABB50
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7F8B1B90
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7F8B7BD0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7F8B33A0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7F8B4BB0
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7F8B63C0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7F8B93E0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706C4870:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839253984
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8B93E0 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706C4D98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8B93E0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7F575480
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7F575480:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = E647EA0000000090 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8B93E0 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = E647EA0000000090 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8B93E0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD7F575480
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD7F575480:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = E647EA0000000090 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkImageCreateInfo* = 00000070706F56A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:                         VkExtent3D = 00000070706F56BC:
            width:                          uint32_t = 64
            height:                         uint32_t = 64
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 8168780000000092

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7F95AAD0
    image:                          VkImage = 8168780000000092
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F53E8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    image:                          VkImage = 8168780000000092
    memory:                         VkDeviceMemory = D68CBB0000000091
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F50F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 9324834969865945234
        pObjectName:                    const char* = "Render Target Texture"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F5B28:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 8168780000000092 [Render Target Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F5B50:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F5B60:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F5D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = EC25C90000000093

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F56D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 17016227768926470291
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000070706F7538:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 8168780000000092 [Render Target Texture]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:                     VkComponentMapping = 00000070706F7560:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000070706F7570:
            aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000070706F7740:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = E9B2EE0000000094

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000070706F5C30:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 16384
        usage:                          VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 8F5F070000000095

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 000001DD7F95AAD0
    buffer:                         VkBuffer = 8F5F070000000095
    pMemoryRequirements:            VkMemoryRequirements* = 00000070706F5AB8:
        size:                           VkDeviceSize = 16384
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000070706F4F68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = NULL
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 4
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = CE045C0000000096

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    memory:                         VkDeviceMemory = CE045C0000000096
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 000001DD00C4C000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    buffer:                         VkBuffer = 8F5F070000000095
    memory:                         VkDeviceMemory = CE045C0000000096
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F57C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 10330983766792601749
        pObjectName:                    const char* = "Render Target Buffer"

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000070706F79E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = E150C50000000097

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000070706EC890:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = E150C50000000097
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 000001DD7F57DA50
        pCommandBuffers[0]:             VkCommandBuffer = 000001DD7F8AEB70
        pCommandBuffers[1]:             VkCommandBuffer = 000001DD7F8C3C50
        pCommandBuffers[2]:             VkCommandBuffer = 000001DD7F8BF420
        pCommandBuffers[3]:             VkCommandBuffer = 000001DD7F8BC400
        pCommandBuffers[4]:             VkCommandBuffer = 000001DD7F8C0C30
        pCommandBuffers[5]:             VkCommandBuffer = 000001DD7F8BDC10
        pCommandBuffers[6]:             VkCommandBuffer = 000001DD7F8C5460
        pCommandBuffers[7]:             VkCommandBuffer = 000001DD7F8C2440
        pCommandBuffers[8]:             VkCommandBuffer = 000001DD7F8BABF0
        pCommandBuffers[9]:             VkCommandBuffer = 000001DD7F8CE4C0
        pCommandBuffers[10]:            VkCommandBuffer = 000001DD7F8CFCD0
        pCommandBuffers[11]:            VkCommandBuffer = 000001DD7F8D14E0
        pCommandBuffers[12]:            VkCommandBuffer = 000001DD7F8CB4A0
        pCommandBuffers[13]:            VkCommandBuffer = 000001DD7F8C6C70
        pCommandBuffers[14]:            VkCommandBuffer = 000001DD7F8D2CF0
        pCommandBuffers[15]:            VkCommandBuffer = 000001DD7F8C8480

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706EC470:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839315584
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C8480 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706EC998:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706E7FE0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD7F96C720
            pAttachments[0]:                const VkAttachmentDescription = 000001DD7F96C720:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706E7D40
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706E7D40:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD7FD64920
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD7FD64920:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD7FD64A20
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD7FD64A20:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 8BADA20000000098

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706E7DA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = 8BADA20000000098
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706E7D40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706E79A8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706E79A8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706E77A0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = C82A830000000099

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706E7DA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = 8BADA20000000098
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706E7D40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706E79A8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706E79A8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706E77A0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = E750A0000000009A

Thread 0, Frame 0:
vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkFramebufferCreateInfo* = 00000070706E7DA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (37)
        pNext:                          const void* = VkFramebufferAttachmentsCreateInfo
        flags:                          VkFramebufferCreateFlags = 1 (VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT)
        renderPass:                     VkRenderPass = 8BADA20000000098
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkImageView* = NULL
        width:                          uint32_t = 64
        height:                         uint32_t = 64
        layers:                         uint32_t = 1
        pNext:                          VkFramebufferAttachmentsCreateInfo = 00000070706E7D40:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO (1000108001)
            pNext:                          const void* = NULL
            attachmentImageInfoCount:       uint32_t = 1
            pAttachmentImageInfos:          const VkFramebufferAttachmentImageInfo* = 00000070706E79A8
                pAttachmentImageInfos[0]:       const VkFramebufferAttachmentImageInfo = 00000070706E79A8:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO (1000108002)
                    pNext:                          const void* = NULL
                    flags:                          VkImageCreateFlags = 0
                    usage:                          VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
                    width:                          uint32_t = 64
                    height:                         uint32_t = 64
                    layerCount:                     uint32_t = 1
                    viewFormatCount:                uint32_t = 1
                    pViewFormats:                   const VkFormat* = 00000070706E77A0
                        pViewFormats[0]:                const VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pFramebuffer:                   VkFramebuffer* = F6FBC1000000009B

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C8480 []
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706E9330
        pViewports[0]:                  const VkViewport = 00000070706E9330:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C8480 []
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706E9AE0
        pScissors[0]:                   const VkRect2D = 00000070706E9AE0:
            offset:                         VkOffset2D = 00000070706E9AE0:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706E9AE8:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C8480 []
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706E9860:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = 8BADA20000000098
        framebuffer:                    VkFramebuffer = C82A830000000099
        renderArea:                     VkRect2D = 00000070706E9880:
            offset:                         VkOffset2D = 00000070706E9880:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706E9888:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706E85F8
            pClearValues[0]:                const VkClearValue = 00000070706E85F8 (Union):
                color:                          VkClearColorValue = 00000070706E85F8 (Union):
                    float32:                        float[4] = 00000070706E85F8
                        float32[0]:                     float = 1
                        float32[1]:                     float = 1
                        float32[2]:                     float = 1
                        float32[3]:                     float = 1
                    int32:                          int32_t[4] = 00000070706E85F8
                        int32[0]:                       int32_t = 1065353216
                        int32[1]:                       int32_t = 1065353216
                        int32[2]:                       int32_t = 1065353216
                        int32[3]:                       int32_t = 1065353216
                    uint32:                         uint32_t[4] = 00000070706E85F8
                        uint32[0]:                      uint32_t = 1065353216
                        uint32[1]:                      uint32_t = 1065353216
                        uint32[2]:                      uint32_t = 1065353216
                        uint32[3]:                      uint32_t = 1065353216
                depthStencil:                   VkClearDepthStencilValue = 00000070706E85F8:
                    depth:                          float = 1
                    stencil:                        uint32_t = 1065353216
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706E99A8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706E8710
                pAttachments[0]:                const VkImageView = E9B2EE0000000094
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C8480 []

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C8480 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706EC450:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839358704
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8D2CF0 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706EC978:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8D2CF0 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F6B50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839309424
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C6C70 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F7078:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C6C70 []
    srcStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dstStageMask:                   VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD7FD6C0D0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD7FD6C0D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 8168780000000092 [Render Target Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD7FD6C100:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C6C70 []
    srcImage:                       VkImage = 8168780000000092 [Render Target Texture]
    srcImageLayout:                 VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstBuffer:                      VkBuffer = 8F5F070000000095 [Render Target Buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferImageCopy* = 00000070706F69F8
        pRegions[0]:                    const VkBufferImageCopy = 00000070706F69F8:
            bufferOffset:                   VkDeviceSize = 0
            bufferRowLength:                uint32_t = 64
            bufferImageHeight:              uint32_t = 64
            imageSubresource:               VkImageSubresourceLayers = 00000070706F6A08:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:                       uint32_t = 0
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1
            imageOffset:                    VkOffset3D = 00000070706F6A18:
                x:                              int32_t = 0
                y:                              int32_t = 0
                z:                              int32_t = 0
            imageExtent:                    VkExtent3D = 00000070706F6A24:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8C6C70 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000070706F3DC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 2050839327904
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000070706F42E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF66E107658
    imageMemoryBarrierCount:        uint32_t = 1
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 000001DD7FD6C0D0
        pImageMemoryBarriers[0]:        const VkImageMemoryBarrier = 000001DD7FD6C0D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 384 (VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:                      VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            image:                          VkImage = 8168780000000092 [Render Target Texture]
            subresourceRange:               VkImageSubresourceRange = 000001DD7FD6C100:
                aspectMask:                     VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:                   uint32_t = 0
                levelCount:                     uint32_t = 1
                baseArrayLayer:                 uint32_t = 0
                layerCount:                     uint32_t = 1

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000070706F1860:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 000001DD7F96B3C0
            pAttachments[0]:                const VkAttachmentDescription = 000001DD7F96B3C0:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000070706F15C0
            pSubpasses[0]:                  const VkSubpassDescription = 00000070706F15C0:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 000001DD7FD64900
                    pColorAttachments[0]:           const VkAttachmentReference = 000001DD7FD64900:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 000001DD7FD64730
                    pResolveAttachments[0]:         const VkAttachmentReference = 000001DD7FD64730:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = C25F26000000009C

Thread 0, Frame 0:
vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    pLabelInfo:                     const VkDebugUtilsLabelEXT* = 00000070706F1C40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (1000128002)
        pNext:                          const void* = NULL
        pLabelName:                     const char* = "(wgpu internal) clear_texture clear pass"
        color:                          float[4] = 00000070706F1C58
            color[0]:                       float = 0
            color[1]:                       float = 0
            color[2]:                       float = 0
            color[3]:                       float = 0

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    firstViewport:                  uint32_t = 0
    viewportCount:                  uint32_t = 1
    pViewports:                     const VkViewport* = 00000070706F2BB0
        pViewports[0]:                  const VkViewport = 00000070706F2BB0:
            x:                              float = 0
            y:                              float = 64
            width:                          float = 64
            height:                         float = -64
            minDepth:                       float = 0
            maxDepth:                       float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    firstScissor:                   uint32_t = 0
    scissorCount:                   uint32_t = 1
    pScissors:                      const VkRect2D* = 00000070706F3360
        pScissors[0]:                   const VkRect2D = 00000070706F3360:
            offset:                         VkOffset2D = 00000070706F3360:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3368:
                width:                          uint32_t = 64
                height:                         uint32_t = 64

Thread 0, Frame 0:
vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    pRenderPassBegin:               const VkRenderPassBeginInfo* = 00000070706F30E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (43)
        pNext:                          const void* = VkRenderPassAttachmentBeginInfo
        renderPass:                     VkRenderPass = C25F26000000009C
        framebuffer:                    VkFramebuffer = C82A830000000099
        renderArea:                     VkRect2D = 00000070706F3100:
            offset:                         VkOffset2D = 00000070706F3100:
                x:                              int32_t = 0
                y:                              int32_t = 0
            extent:                         VkExtent2D = 00000070706F3108:
                width:                          uint32_t = 64
                height:                         uint32_t = 64
        clearValueCount:                uint32_t = 1
        pClearValues:                   const VkClearValue* = 00000070706F1E78
            pClearValues[0]:                const VkClearValue = 00000070706F1E78 (Union):
                color:                          VkClearColorValue = 00000070706F1E78 (Union):
                    float32:                        float[4] = 00000070706F1E78
                        float32[0]:                     float = 0
                        float32[1]:                     float = 0
                        float32[2]:                     float = 0
                        float32[3]:                     float = 0
                    int32:                          int32_t[4] = 00000070706F1E78
                        int32[0]:                       int32_t = 0
                        int32[1]:                       int32_t = 0
                        int32[2]:                       int32_t = 0
                        int32[3]:                       int32_t = 0
                    uint32:                         uint32_t[4] = 00000070706F1E78
                        uint32[0]:                      uint32_t = 0
                        uint32[1]:                      uint32_t = 0
                        uint32[2]:                      uint32_t = 0
                        uint32[3]:                      uint32_t = 0
                depthStencil:                   VkClearDepthStencilValue = 00000070706F1E78:
                    depth:                          float = 0
                    stencil:                        uint32_t = 0
        pNext:                          VkRenderPassAttachmentBeginInfo = 00000070706F3228:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO (1000108003)
            pNext:                          const void* = NULL
            attachmentCount:                uint32_t = 1
            pAttachments:                   const VkImageView* = 00000070706F1F90
                pAttachments[0]:                const VkImageView = EC25C90000000093 [(wgpu internal) clear texture view]
    contents:                       VkSubpassContents = VK_SUBPASS_CONTENTS_INLINE (0)

Thread 0, Frame 0:
vkCmdEndRenderPass(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdEndDebugUtilsLabelEXT(commandBuffer) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF66E107658
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001DD02BEDD50
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001DD02BEDD50:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 8F5F070000000095 [Render Target Buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF66E107658

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 000001DD7F8B93E0 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 000001DD028A8A40
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000070706F4220
        pSubmits[0]:                    const VkSubmitInfo = 00000070706F4220:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 5
            pCommandBuffers:                const VkCommandBuffer* = 000001DD67689CE0
                pCommandBuffers[0]:             const VkCommandBuffer = 000001DD7F8B93E0 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 000001DD7F8CB4A0 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 000001DD7F8D2CF0 []
                pCommandBuffers[3]:             const VkCommandBuffer = 000001DD7F8C8480 []
                pCommandBuffers[4]:             const VkCommandBuffer = 000001DD7F8C6C70 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000070706F3E50
                pSignalSemaphores[0]:           const VkSemaphore = 9F1516000000008C
                pSignalSemaphores[1]:           const VkSemaphore = D3DD54000000008E
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000070706F40F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000070706F3E68
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    semaphore:                      VkSemaphore = D3DD54000000008E
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FA5D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FA5C0
            pSemaphores[0]:                 const VkSemaphore = D3DD54000000008E
        pValues:                        const uint64_t* = 00000070706FA5C8
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    commandPool:                    VkCommandPool = E150C50000000097
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 000001DD7F95AAD0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000070706FAFA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000070706FAF90
            pSemaphores[0]:                 const VkSemaphore = D3DD54000000008E
        pValues:                        const uint64_t* = 00000070706FAF98
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

