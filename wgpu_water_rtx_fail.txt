Launching Vulkan Application:
- Layers overridden by "API dump" configuration.
- Application: vkcube
- Executable: C:\Users\gamer\RustroverProjects\wgpu\target\debug\deps\wgpu_examples.exe
- Working Directory: C:\VulkanSDK\1.3.275.0\Bin
- Command-line Arguments: water_rtx
- Log file: C:\Users\gamer\VulkanSDK\wgpu_water_rtx_fail.txt
[2024-02-10T19:53:02Z INFO  wgpu_examples::framework] Initializing wgpu...
Thread 0, Frame 0:

vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):

    pCreateInfo:                    const VkInstanceCreateInfo* = 0000004D086F8DA0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)

        pNext:                          const void* = NULL

        flags:                          VkInstanceCreateFlags = 0

        pApplicationInfo:               const VkApplicationInfo* = 0000004D086F9560:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)

            pNext:                          const void* = NULL

            pApplicationName:               const char* = "wgpu"

            applicationVersion:             uint32_t = 1

            pEngineName:                    const char* = "wgpu-hal"

            engineVersion:                  uint32_t = 2

            apiVersion:                     uint32_t = 4206592

        enabledLayerCount:              uint32_t = 1

        ppEnabledLayerNames:            const char* const* = 000001C1C0FA4A40

            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_KHRONOS_validation"

        enabledExtensionCount:          uint32_t = 5

        ppEnabledExtensionNames:        const char* const* = 000001C1C0FA4A48

            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"

            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"

            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_debug_utils"

            ppEnabledExtensionNames[3]:     const char* const = "VK_EXT_swapchain_colorspace"

            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_get_physical_device_properties2"

        pNext:                          VkDebugUtilsMessengerCreateInfoEXT = 0000004D086F98B0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)

            pNext:                          const void* = NULL

            flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0

            messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)

            messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)

            pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF6721EC9C0

            pUserData:                      void* = 000001C1C101EF40

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pInstance:                      VkInstance* = 000001C1C110B510



Thread 0, Frame 0:

vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 000001C1C110B510

    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 0000004D086F89E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)

        pNext:                          const void* = NULL

        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0

        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)

        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)

        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF6721EC9C0

        pUserData:                      void* = 000001C1C101EF40

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMessenger:                     VkDebugUtilsMessengerEXT* = FD5B260000000001



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 000001C1C110B510

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = NULL



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 000001C1C110B510

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = 000001C1C3186DD0

        pPhysicalDevices[0]:            VkPhysicalDevice = 000001C1C2A76820

        pPhysicalDevices[1]:            VkPhysicalDevice = 000001C1C2A76850



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 000001C1C110B510

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = NULL



Thread 0, Frame 0:

vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 000001C1C110B510

    pPhysicalDeviceCount:           uint32_t* = 2

    pPhysicalDevices:               VkPhysicalDevice* = 000001C1C3187510

        pPhysicalDevices[0]:            VkPhysicalDevice = 000001C1C2A76820

        pPhysicalDevices[1]:            VkPhysicalDevice = 000001C1C2A76850



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pProperties:                    VkPhysicalDeviceProperties* = 0000004D086E9A48:

        apiVersion:                     uint32_t = 4206834

        driverVersion:                  uint32_t = 2252898304

        vendorID:                       uint32_t = 4318

        deviceID:                       uint32_t = 9479

        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)

        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"

        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000004D086E9B5C

            pipelineCacheUUID[0]:           uint8_t = 218

            pipelineCacheUUID[1]:           uint8_t = 176

            pipelineCacheUUID[2]:           uint8_t = 31

            pipelineCacheUUID[3]:           uint8_t = 61

            pipelineCacheUUID[4]:           uint8_t = 103

            pipelineCacheUUID[5]:           uint8_t = 121

            pipelineCacheUUID[6]:           uint8_t = 168

            pipelineCacheUUID[7]:           uint8_t = 246

            pipelineCacheUUID[8]:           uint8_t = 179

            pipelineCacheUUID[9]:           uint8_t = 114

            pipelineCacheUUID[10]:          uint8_t = 172

            pipelineCacheUUID[11]:          uint8_t = 249

            pipelineCacheUUID[12]:          uint8_t = 185

            pipelineCacheUUID[13]:          uint8_t = 210

            pipelineCacheUUID[14]:          uint8_t = 68

            pipelineCacheUUID[15]:          uint8_t = 21

        limits:                         VkPhysicalDeviceLimits = 0000004D086E9B70:

            maxImageDimension1D:            uint32_t = 32768

            maxImageDimension2D:            uint32_t = 32768

            maxImageDimension3D:            uint32_t = 16384

            maxImageDimensionCube:          uint32_t = 32768

            maxImageArrayLayers:            uint32_t = 2048

            maxTexelBufferElements:         uint32_t = 134217728

            maxUniformBufferRange:          uint32_t = 65536

            maxStorageBufferRange:          uint32_t = 4294967295

            maxPushConstantsSize:           uint32_t = 256

            maxMemoryAllocationCount:       uint32_t = 4096

            maxSamplerAllocationCount:      uint32_t = 4000

            bufferImageGranularity:         VkDeviceSize = 1024

            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775

            maxBoundDescriptorSets:         uint32_t = 32

            maxPerStageDescriptorSamplers:  uint32_t = 1048576

            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorSampledImages: uint32_t = 1048576

            maxPerStageDescriptorStorageImages: uint32_t = 1048576

            maxPerStageDescriptorInputAttachments: uint32_t = 1048576

            maxPerStageResources:           uint32_t = 4294967295

            maxDescriptorSetSamplers:       uint32_t = 1048576

            maxDescriptorSetUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15

            maxDescriptorSetStorageBuffers: uint32_t = 1048576

            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetSampledImages:  uint32_t = 1048576

            maxDescriptorSetStorageImages:  uint32_t = 1048576

            maxDescriptorSetInputAttachments: uint32_t = 1048576

            maxVertexInputAttributes:       uint32_t = 32

            maxVertexInputBindings:         uint32_t = 32

            maxVertexInputAttributeOffset:  uint32_t = 2047

            maxVertexInputBindingStride:    uint32_t = 2048

            maxVertexOutputComponents:      uint32_t = 128

            maxTessellationGenerationLevel: uint32_t = 64

            maxTessellationPatchSize:       uint32_t = 32

            maxTessellationControlPerVertexInputComponents: uint32_t = 128

            maxTessellationControlPerVertexOutputComponents: uint32_t = 128

            maxTessellationControlPerPatchOutputComponents: uint32_t = 120

            maxTessellationControlTotalOutputComponents: uint32_t = 4216

            maxTessellationEvaluationInputComponents: uint32_t = 128

            maxTessellationEvaluationOutputComponents: uint32_t = 128

            maxGeometryShaderInvocations:   uint32_t = 32

            maxGeometryInputComponents:     uint32_t = 128

            maxGeometryOutputComponents:    uint32_t = 128

            maxGeometryOutputVertices:      uint32_t = 1024

            maxGeometryTotalOutputComponents: uint32_t = 1024

            maxFragmentInputComponents:     uint32_t = 128

            maxFragmentOutputAttachments:   uint32_t = 8

            maxFragmentDualSrcAttachments:  uint32_t = 1

            maxFragmentCombinedOutputResources: uint32_t = 4294967295

            maxComputeSharedMemorySize:     uint32_t = 49152

            maxComputeWorkGroupCount:       uint32_t[3] = 0000004D086E9C4C

                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647

                maxComputeWorkGroupCount[1]:    uint32_t = 65535

                maxComputeWorkGroupCount[2]:    uint32_t = 65535

            maxComputeWorkGroupInvocations: uint32_t = 1024

            maxComputeWorkGroupSize:        uint32_t[3] = 0000004D086E9C5C

                maxComputeWorkGroupSize[0]:     uint32_t = 1024

                maxComputeWorkGroupSize[1]:     uint32_t = 1024

                maxComputeWorkGroupSize[2]:     uint32_t = 64

            subPixelPrecisionBits:          uint32_t = 8

            subTexelPrecisionBits:          uint32_t = 8

            mipmapPrecisionBits:            uint32_t = 8

            maxDrawIndexedIndexValue:       uint32_t = 4294967295

            maxDrawIndirectCount:           uint32_t = 4294967295

            maxSamplerLodBias:              float = 15

            maxSamplerAnisotropy:           float = 16

            maxViewports:                   uint32_t = 16

            maxViewportDimensions:          uint32_t[2] = 0000004D086E9C88

                maxViewportDimensions[0]:       uint32_t = 32768

                maxViewportDimensions[1]:       uint32_t = 32768

            viewportBoundsRange:            float[2] = 0000004D086E9C90

                viewportBoundsRange[0]:         float = -65536

                viewportBoundsRange[1]:         float = 65536

            viewportSubPixelBits:           uint32_t = 8

            minMemoryMapAlignment:          size_t = 64

            minTexelBufferOffsetAlignment:  VkDeviceSize = 16

            minUniformBufferOffsetAlignment: VkDeviceSize = 64

            minStorageBufferOffsetAlignment: VkDeviceSize = 16

            minTexelOffset:                 int32_t = -8

            maxTexelOffset:                 uint32_t = 7

            minTexelGatherOffset:           int32_t = -32

            maxTexelGatherOffset:           uint32_t = 31

            minInterpolationOffset:         float = -0.5

            maxInterpolationOffset:         float = 0.4375

            subPixelInterpolationOffsetBits: uint32_t = 4

            maxFramebufferWidth:            uint32_t = 32768

            maxFramebufferHeight:           uint32_t = 32768

            maxFramebufferLayers:           uint32_t = 2048

            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxColorAttachments:            uint32_t = 8

            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            maxSampleMaskWords:             uint32_t = 1

            timestampComputeAndGraphics:    VkBool32 = 1

            timestampPeriod:                float = 1

            maxClipDistances:               uint32_t = 8

            maxCullDistances:               uint32_t = 8

            maxCombinedClipAndCullDistances: uint32_t = 8

            discreteQueuePriorities:        uint32_t = 2

            pointSizeRange:                 float[2] = 0000004D086E9D2C

                pointSizeRange[0]:              float = 1

                pointSizeRange[1]:              float = 2047.94

            lineWidthRange:                 float[2] = 0000004D086E9D34

                lineWidthRange[0]:              float = 1

                lineWidthRange[1]:              float = 64

            pointSizeGranularity:           float = 0.0625

            lineWidthGranularity:           float = 0.0625

            strictLines:                    VkBool32 = 1

            standardSampleLocations:        VkBool32 = 1

            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1

            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1

            nonCoherentAtomSize:            VkDeviceSize = 64

        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000004D086E9D68:

            residencyStandard2DBlockShape:  VkBool32 = 1

            residencyStandard2DMultisampleBlockShape: VkBool32 = 1

            residencyStandard3DBlockShape:  VkBool32 = 1

            residencyAlignedMipSize:        VkBool32 = 0

            residencyNonResidentStrict:     VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pProperties:                    VkPhysicalDeviceProperties2* = 0000004D086EDBB0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)

        pNext:                          void* = VkPhysicalDeviceDriverProperties

        properties:                     VkPhysicalDeviceProperties = 0000004D086EDBC0:

            apiVersion:                     uint32_t = 4206834

            driverVersion:                  uint32_t = 2252898304

            vendorID:                       uint32_t = 4318

            deviceID:                       uint32_t = 9479

            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)

            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"

            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000004D086EDCD4

                pipelineCacheUUID[0]:           uint8_t = 218

                pipelineCacheUUID[1]:           uint8_t = 176

                pipelineCacheUUID[2]:           uint8_t = 31

                pipelineCacheUUID[3]:           uint8_t = 61

                pipelineCacheUUID[4]:           uint8_t = 103

                pipelineCacheUUID[5]:           uint8_t = 121

                pipelineCacheUUID[6]:           uint8_t = 168

                pipelineCacheUUID[7]:           uint8_t = 246

                pipelineCacheUUID[8]:           uint8_t = 179

                pipelineCacheUUID[9]:           uint8_t = 114

                pipelineCacheUUID[10]:          uint8_t = 172

                pipelineCacheUUID[11]:          uint8_t = 249

                pipelineCacheUUID[12]:          uint8_t = 185

                pipelineCacheUUID[13]:          uint8_t = 210

                pipelineCacheUUID[14]:          uint8_t = 68

                pipelineCacheUUID[15]:          uint8_t = 21

            limits:                         VkPhysicalDeviceLimits = 0000004D086EDCE8:

                maxImageDimension1D:            uint32_t = 32768

                maxImageDimension2D:            uint32_t = 32768

                maxImageDimension3D:            uint32_t = 16384

                maxImageDimensionCube:          uint32_t = 32768

                maxImageArrayLayers:            uint32_t = 2048

                maxTexelBufferElements:         uint32_t = 134217728

                maxUniformBufferRange:          uint32_t = 65536

                maxStorageBufferRange:          uint32_t = 4294967295

                maxPushConstantsSize:           uint32_t = 256

                maxMemoryAllocationCount:       uint32_t = 4096

                maxSamplerAllocationCount:      uint32_t = 4000

                bufferImageGranularity:         VkDeviceSize = 1024

                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775

                maxBoundDescriptorSets:         uint32_t = 32

                maxPerStageDescriptorSamplers:  uint32_t = 1048576

                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576

                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576

                maxPerStageDescriptorSampledImages: uint32_t = 1048576

                maxPerStageDescriptorStorageImages: uint32_t = 1048576

                maxPerStageDescriptorInputAttachments: uint32_t = 1048576

                maxPerStageResources:           uint32_t = 4294967295

                maxDescriptorSetSamplers:       uint32_t = 1048576

                maxDescriptorSetUniformBuffers: uint32_t = 1048576

                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15

                maxDescriptorSetStorageBuffers: uint32_t = 1048576

                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

                maxDescriptorSetSampledImages:  uint32_t = 1048576

                maxDescriptorSetStorageImages:  uint32_t = 1048576

                maxDescriptorSetInputAttachments: uint32_t = 1048576

                maxVertexInputAttributes:       uint32_t = 32

                maxVertexInputBindings:         uint32_t = 32

                maxVertexInputAttributeOffset:  uint32_t = 2047

                maxVertexInputBindingStride:    uint32_t = 2048

                maxVertexOutputComponents:      uint32_t = 128

                maxTessellationGenerationLevel: uint32_t = 64

                maxTessellationPatchSize:       uint32_t = 32

                maxTessellationControlPerVertexInputComponents: uint32_t = 128

                maxTessellationControlPerVertexOutputComponents: uint32_t = 128

                maxTessellationControlPerPatchOutputComponents: uint32_t = 120

                maxTessellationControlTotalOutputComponents: uint32_t = 4216

                maxTessellationEvaluationInputComponents: uint32_t = 128

                maxTessellationEvaluationOutputComponents: uint32_t = 128

                maxGeometryShaderInvocations:   uint32_t = 32

                maxGeometryInputComponents:     uint32_t = 128

                maxGeometryOutputComponents:    uint32_t = 128

                maxGeometryOutputVertices:      uint32_t = 1024

                maxGeometryTotalOutputComponents: uint32_t = 1024

                maxFragmentInputComponents:     uint32_t = 128

                maxFragmentOutputAttachments:   uint32_t = 8

                maxFragmentDualSrcAttachments:  uint32_t = 1

                maxFragmentCombinedOutputResources: uint32_t = 4294967295

                maxComputeSharedMemorySize:     uint32_t = 49152

                maxComputeWorkGroupCount:       uint32_t[3] = 0000004D086EDDC4

                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647

                    maxComputeWorkGroupCount[1]:    uint32_t = 65535

                    maxComputeWorkGroupCount[2]:    uint32_t = 65535

                maxComputeWorkGroupInvocations: uint32_t = 1024

                maxComputeWorkGroupSize:        uint32_t[3] = 0000004D086EDDD4

                    maxComputeWorkGroupSize[0]:     uint32_t = 1024

                    maxComputeWorkGroupSize[1]:     uint32_t = 1024

                    maxComputeWorkGroupSize[2]:     uint32_t = 64

                subPixelPrecisionBits:          uint32_t = 8

                subTexelPrecisionBits:          uint32_t = 8

                mipmapPrecisionBits:            uint32_t = 8

                maxDrawIndexedIndexValue:       uint32_t = 4294967295

                maxDrawIndirectCount:           uint32_t = 4294967295

                maxSamplerLodBias:              float = 15

                maxSamplerAnisotropy:           float = 16

                maxViewports:                   uint32_t = 16

                maxViewportDimensions:          uint32_t[2] = 0000004D086EDE00

                    maxViewportDimensions[0]:       uint32_t = 32768

                    maxViewportDimensions[1]:       uint32_t = 32768

                viewportBoundsRange:            float[2] = 0000004D086EDE08

                    viewportBoundsRange[0]:         float = -65536

                    viewportBoundsRange[1]:         float = 65536

                viewportSubPixelBits:           uint32_t = 8

                minMemoryMapAlignment:          size_t = 64

                minTexelBufferOffsetAlignment:  VkDeviceSize = 16

                minUniformBufferOffsetAlignment: VkDeviceSize = 64

                minStorageBufferOffsetAlignment: VkDeviceSize = 16

                minTexelOffset:                 int32_t = -8

                maxTexelOffset:                 uint32_t = 7

                minTexelGatherOffset:           int32_t = -32

                maxTexelGatherOffset:           uint32_t = 31

                minInterpolationOffset:         float = -0.5

                maxInterpolationOffset:         float = 0.4375

                subPixelInterpolationOffsetBits: uint32_t = 4

                maxFramebufferWidth:            uint32_t = 32768

                maxFramebufferHeight:           uint32_t = 32768

                maxFramebufferLayers:           uint32_t = 2048

                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                maxColorAttachments:            uint32_t = 8

                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

                maxSampleMaskWords:             uint32_t = 1

                timestampComputeAndGraphics:    VkBool32 = 1

                timestampPeriod:                float = 1

                maxClipDistances:               uint32_t = 8

                maxCullDistances:               uint32_t = 8

                maxCombinedClipAndCullDistances: uint32_t = 8

                discreteQueuePriorities:        uint32_t = 2

                pointSizeRange:                 float[2] = 0000004D086EDEA4

                    pointSizeRange[0]:              float = 1

                    pointSizeRange[1]:              float = 2047.94

                lineWidthRange:                 float[2] = 0000004D086EDEAC

                    lineWidthRange[0]:              float = 1

                    lineWidthRange[1]:              float = 64

                pointSizeGranularity:           float = 0.0625

                lineWidthGranularity:           float = 0.0625

                strictLines:                    VkBool32 = 1

                standardSampleLocations:        VkBool32 = 1

                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1

                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1

                nonCoherentAtomSize:            VkDeviceSize = 64

            sparseProperties:               VkPhysicalDeviceSparseProperties = 0000004D086EDEE0:

                residencyStandard2DBlockShape:  VkBool32 = 1

                residencyStandard2DMultisampleBlockShape: VkBool32 = 1

                residencyStandard3DBlockShape:  VkBool32 = 1

                residencyAlignedMipSize:        VkBool32 = 0

                residencyNonResidentStrict:     VkBool32 = 1

        pNext:                          VkPhysicalDeviceDriverProperties = 0000004D086EB230:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)

            pNext:                          void* = VkPhysicalDeviceAccelerationStructurePropertiesKHR

            driverID:                       VkDriverId = VK_DRIVER_ID_NVIDIA_PROPRIETARY (4)

            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "NVIDIA"

            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "537.34"

            conformanceVersion:             VkConformanceVersion = 0000004D086EB444:

                major:                          uint8_t = 1

                minor:                          uint8_t = 3

                subminor:                       uint8_t = 5

                patch:                          uint8_t = 0

        pNext:                          VkPhysicalDeviceAccelerationStructurePropertiesKHR = 0000004D086EB1E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR (1000150014)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties

            maxGeometryCount:               uint64_t = 16777215

            maxInstanceCount:               uint64_t = 16777215

            maxPrimitiveCount:              uint64_t = 536870911

            maxPerStageDescriptorAccelerationStructures: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32_t = 1048576

            maxDescriptorSetAccelerationStructures: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32_t = 1048576

            minAccelerationStructureScratchOffsetAlignment: uint32_t = 128

        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 0000004D086EB170:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)

            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties

            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 4294967295

            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 1

            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 1

            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 1

            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 1

            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 1

            robustBufferAccessUpdateAfterBind: VkBool32 = 1

            quadDivergentImplicitLod:       VkBool32 = 1

            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576

            maxPerStageUpdateAfterBindResources: uint32_t = 4294967295

            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 15

            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576

        pNext:                          VkPhysicalDeviceMaintenance3Properties = 0000004D086EB148:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)

            pNext:                          void* = NULL

            maxPerSetDescriptors:           uint32_t = 4294967295

            maxMemoryAllocationSize:        VkDeviceSize = 4292870144



Thread 0, Frame 0:

vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pFeatures:                      VkPhysicalDeviceFeatures2* = 0000004D086F0790:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)

        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

        features:                       VkPhysicalDeviceFeatures = 0000004D086F07A0:

            robustBufferAccess:             VkBool32 = 1

            fullDrawIndexUint32:            VkBool32 = 1

            imageCubeArray:                 VkBool32 = 1

            independentBlend:               VkBool32 = 1

            geometryShader:                 VkBool32 = 1

            tessellationShader:             VkBool32 = 1

            sampleRateShading:              VkBool32 = 1

            dualSrcBlend:                   VkBool32 = 1

            logicOp:                        VkBool32 = 1

            multiDrawIndirect:              VkBool32 = 1

            drawIndirectFirstInstance:      VkBool32 = 1

            depthClamp:                     VkBool32 = 1

            depthBiasClamp:                 VkBool32 = 1

            fillModeNonSolid:               VkBool32 = 1

            depthBounds:                    VkBool32 = 1

            wideLines:                      VkBool32 = 1

            largePoints:                    VkBool32 = 1

            alphaToOne:                     VkBool32 = 1

            multiViewport:                  VkBool32 = 1

            samplerAnisotropy:              VkBool32 = 1

            textureCompressionETC2:         VkBool32 = 0

            textureCompressionASTC_LDR:     VkBool32 = 0

            textureCompressionBC:           VkBool32 = 1

            occlusionQueryPrecise:          VkBool32 = 1

            pipelineStatisticsQuery:        VkBool32 = 1

            vertexPipelineStoresAndAtomics: VkBool32 = 1

            fragmentStoresAndAtomics:       VkBool32 = 1

            shaderTessellationAndGeometryPointSize: VkBool32 = 1

            shaderImageGatherExtended:      VkBool32 = 1

            shaderStorageImageExtendedFormats: VkBool32 = 1

            shaderStorageImageMultisample:  VkBool32 = 1

            shaderStorageImageReadWithoutFormat: VkBool32 = 1

            shaderStorageImageWriteWithoutFormat: VkBool32 = 1

            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1

            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1

            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1

            shaderClipDistance:             VkBool32 = 1

            shaderCullDistance:             VkBool32 = 1

            shaderFloat64:                  VkBool32 = 1

            shaderInt64:                    VkBool32 = 1

            shaderInt16:                    VkBool32 = 1

            shaderResourceResidency:        VkBool32 = 1

            shaderResourceMinLod:           VkBool32 = 1

            sparseBinding:                  VkBool32 = 1

            sparseResidencyBuffer:          VkBool32 = 1

            sparseResidencyImage2D:         VkBool32 = 1

            sparseResidencyImage3D:         VkBool32 = 1

            sparseResidency2Samples:        VkBool32 = 1

            sparseResidency4Samples:        VkBool32 = 1

            sparseResidency8Samples:        VkBool32 = 1

            sparseResidency16Samples:       VkBool32 = 1

            sparseResidencyAliased:         VkBool32 = 1

            variableMultisampleRate:        VkBool32 = 1

            inheritedQueries:               VkBool32 = 1

        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 0000004D086EE9B0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)

            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR

            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1

        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 0000004D086EE938:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)

            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures

            accelerationStructure:          VkBool32 = 1

            accelerationStructureCaptureReplay: VkBool32 = 1

            accelerationStructureIndirectBuild: VkBool32 = 0

            accelerationStructureHostCommands: VkBool32 = 0

            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 1

        pNext:                          VkPhysicalDevice16BitStorageFeatures = 0000004D086EE910:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)

            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features

            storageBuffer16BitAccess:       VkBool32 = 1

            uniformAndStorageBuffer16BitAccess: VkBool32 = 1

            storagePushConstant16:          VkBool32 = 1

            storageInputOutput16:           VkBool32 = 0

        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 0000004D086EE8F8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)

            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT

            shaderFloat16:                  VkBool32 = 1

            shaderInt8:                     VkBool32 = 1

        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 0000004D086EE868:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)

            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures

            robustBufferAccess2:            VkBool32 = 1

            robustImageAccess2:             VkBool32 = 1

            nullDescriptor:                 VkBool32 = 1

        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 0000004D086EE848:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)

            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures

            robustImageAccess:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 0000004D086EE828:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)

            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures

            timelineSemaphore:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 0000004D086EE808:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures

            imagelessFramebuffer:           VkBool32 = 1

        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 0000004D086EE7A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)

            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures

            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1

            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1

            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 1

            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1

            descriptorBindingPartiallyBound: VkBool32 = 1

            descriptorBindingVariableDescriptorCount: VkBool32 = 1

            runtimeDescriptorArray:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 0000004D086EE8B8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)

            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures

            samplerYcbcrConversion:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceMultiviewFeatures = 0000004D086EE890:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)

            pNext:                          void* = NULL

            multiview:                      VkBool32 = 1

            multiviewGeometryShader:        VkBool32 = 1

            multiviewTessellationShader:    VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DE8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

    pFormatProperties:              VkFormatProperties2* = 0000004D086F0EE8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)

        pNext:                          void* = VkFormatProperties3

        formatProperties:               VkFormatProperties = 0000004D086F0EF8:

            linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

        pNext:                          VkFormatProperties3 = 0000004D086F0EC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)

            pNext:                          void* = NULL

            linearTilingFeatures:           VkFormatFeatureFlags2 = 281320477699 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)

            optimalTilingFeatures:          VkFormatFeatureFlags2 = 1105954200963 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV)

            bufferFeatures:                 VkFormatFeatureFlags2 = 6442451032 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119815 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122247 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 120 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0DF8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119811 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)

    pFormatProperties:              VkFormatProperties* = 0000004D086F0E68:

        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pQueueFamilyPropertyCount:      uint32_t* = 5

    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pQueueFamilyPropertyCount:      uint32_t* = 5

    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001C1C1001AE0

        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001C1C1001AE0:

            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 16

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000001C1C1001AEC:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001C1C1001AF8:

            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 2

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000001C1C1001B04:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 000001C1C1001B10:

            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 8

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000001C1C1001B1C:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 000001C1C1001B28:

            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)

            queueCount:                     uint32_t = 1

            timestampValidBits:             uint32_t = 32

            minImageTransferGranularity:    VkExtent3D = 000001C1C1001B34:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 000001C1C1001B40:

            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)

            queueCount:                     uint32_t = 1

            timestampValidBits:             uint32_t = 64

            minImageTransferGranularity:    VkExtent3D = 000001C1C1001B4C:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)

    pFormatProperties:              VkFormatProperties* = 0000004D086F12A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000004D086F12A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000004D086F12A8:

        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    pProperties:                    VkPhysicalDeviceProperties* = 0000004D086E8278:

        apiVersion:                     uint32_t = 4206842

        driverVersion:                  uint32_t = 1659361

        vendorID:                       uint32_t = 32902

        deviceID:                       uint32_t = 18048

        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)

        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"

        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000004D086E838C

            pipelineCacheUUID[0]:           uint8_t = 208

            pipelineCacheUUID[1]:           uint8_t = 41

            pipelineCacheUUID[2]:           uint8_t = 212

            pipelineCacheUUID[3]:           uint8_t = 41

            pipelineCacheUUID[4]:           uint8_t = 214

            pipelineCacheUUID[5]:           uint8_t = 39

            pipelineCacheUUID[6]:           uint8_t = 231

            pipelineCacheUUID[7]:           uint8_t = 43

            pipelineCacheUUID[8]:           uint8_t = 216

            pipelineCacheUUID[9]:           uint8_t = 38

            pipelineCacheUUID[10]:          uint8_t = 219

            pipelineCacheUUID[11]:          uint8_t = 40

            pipelineCacheUUID[12]:          uint8_t = 220

            pipelineCacheUUID[13]:          uint8_t = 44

            pipelineCacheUUID[14]:          uint8_t = 222

            pipelineCacheUUID[15]:          uint8_t = 29

        limits:                         VkPhysicalDeviceLimits = 0000004D086E83A0:

            maxImageDimension1D:            uint32_t = 16384

            maxImageDimension2D:            uint32_t = 16384

            maxImageDimension3D:            uint32_t = 2048

            maxImageDimensionCube:          uint32_t = 16384

            maxImageArrayLayers:            uint32_t = 2048

            maxTexelBufferElements:         uint32_t = 134217728

            maxUniformBufferRange:          uint32_t = 134217724

            maxStorageBufferRange:          uint32_t = 1073741820

            maxPushConstantsSize:           uint32_t = 256

            maxMemoryAllocationCount:       uint32_t = 4197384

            maxSamplerAllocationCount:      uint32_t = 4000

            bufferImageGranularity:         VkDeviceSize = 1

            sparseAddressSpaceSize:         VkDeviceSize = 17523466567680

            maxBoundDescriptorSets:         uint32_t = 32

            maxPerStageDescriptorSamplers:  uint32_t = 64

            maxPerStageDescriptorUniformBuffers: uint32_t = 200

            maxPerStageDescriptorStorageBuffers: uint32_t = 200

            maxPerStageDescriptorSampledImages: uint32_t = 200

            maxPerStageDescriptorStorageImages: uint32_t = 16

            maxPerStageDescriptorInputAttachments: uint32_t = 7

            maxPerStageResources:           uint32_t = 200

            maxDescriptorSetSamplers:       uint32_t = 576

            maxDescriptorSetUniformBuffers: uint32_t = 1800

            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16

            maxDescriptorSetStorageBuffers: uint32_t = 1800

            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetSampledImages:  uint32_t = 1800

            maxDescriptorSetStorageImages:  uint32_t = 144

            maxDescriptorSetInputAttachments: uint32_t = 7

            maxVertexInputAttributes:       uint32_t = 32

            maxVertexInputBindings:         uint32_t = 32

            maxVertexInputAttributeOffset:  uint32_t = 2047

            maxVertexInputBindingStride:    uint32_t = 4095

            maxVertexOutputComponents:      uint32_t = 128

            maxTessellationGenerationLevel: uint32_t = 64

            maxTessellationPatchSize:       uint32_t = 32

            maxTessellationControlPerVertexInputComponents: uint32_t = 128

            maxTessellationControlPerVertexOutputComponents: uint32_t = 128

            maxTessellationControlPerPatchOutputComponents: uint32_t = 120

            maxTessellationControlTotalOutputComponents: uint32_t = 4096

            maxTessellationEvaluationInputComponents: uint32_t = 128

            maxTessellationEvaluationOutputComponents: uint32_t = 128

            maxGeometryShaderInvocations:   uint32_t = 32

            maxGeometryInputComponents:     uint32_t = 128

            maxGeometryOutputComponents:    uint32_t = 128

            maxGeometryOutputVertices:      uint32_t = 256

            maxGeometryTotalOutputComponents: uint32_t = 1024

            maxFragmentInputComponents:     uint32_t = 128

            maxFragmentOutputAttachments:   uint32_t = 8

            maxFragmentDualSrcAttachments:  uint32_t = 1

            maxFragmentCombinedOutputResources: uint32_t = 208

            maxComputeSharedMemorySize:     uint32_t = 32768

            maxComputeWorkGroupCount:       uint32_t[3] = 0000004D086E847C

                maxComputeWorkGroupCount[0]:    uint32_t = 65536

                maxComputeWorkGroupCount[1]:    uint32_t = 65536

                maxComputeWorkGroupCount[2]:    uint32_t = 65536

            maxComputeWorkGroupInvocations: uint32_t = 1024

            maxComputeWorkGroupSize:        uint32_t[3] = 0000004D086E848C

                maxComputeWorkGroupSize[0]:     uint32_t = 1024

                maxComputeWorkGroupSize[1]:     uint32_t = 1024

                maxComputeWorkGroupSize[2]:     uint32_t = 64

            subPixelPrecisionBits:          uint32_t = 8

            subTexelPrecisionBits:          uint32_t = 8

            mipmapPrecisionBits:            uint32_t = 8

            maxDrawIndexedIndexValue:       uint32_t = 4294967295

            maxDrawIndirectCount:           uint32_t = 4294967295

            maxSamplerLodBias:              float = 16

            maxSamplerAnisotropy:           float = 16

            maxViewports:                   uint32_t = 16

            maxViewportDimensions:          uint32_t[2] = 0000004D086E84B8

                maxViewportDimensions[0]:       uint32_t = 32768

                maxViewportDimensions[1]:       uint32_t = 32768

            viewportBoundsRange:            float[2] = 0000004D086E84C0

                viewportBoundsRange[0]:         float = -65536

                viewportBoundsRange[1]:         float = 65535

            viewportSubPixelBits:           uint32_t = 8

            minMemoryMapAlignment:          size_t = 64

            minTexelBufferOffsetAlignment:  VkDeviceSize = 64

            minUniformBufferOffsetAlignment: VkDeviceSize = 64

            minStorageBufferOffsetAlignment: VkDeviceSize = 64

            minTexelOffset:                 int32_t = -8

            maxTexelOffset:                 uint32_t = 7

            minTexelGatherOffset:           int32_t = -32

            maxTexelGatherOffset:           uint32_t = 31

            minInterpolationOffset:         float = -0.5

            maxInterpolationOffset:         float = 0.4375

            subPixelInterpolationOffsetBits: uint32_t = 4

            maxFramebufferWidth:            uint32_t = 16384

            maxFramebufferHeight:           uint32_t = 16384

            maxFramebufferLayers:           uint32_t = 2048

            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxColorAttachments:            uint32_t = 8

            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxSampleMaskWords:             uint32_t = 1

            timestampComputeAndGraphics:    VkBool32 = 1

            timestampPeriod:                float = 52.0833

            maxClipDistances:               uint32_t = 8

            maxCullDistances:               uint32_t = 8

            maxCombinedClipAndCullDistances: uint32_t = 8

            discreteQueuePriorities:        uint32_t = 2

            pointSizeRange:                 float[2] = 0000004D086E855C

                pointSizeRange[0]:              float = 0.125

                pointSizeRange[1]:              float = 255.875

            lineWidthRange:                 float[2] = 0000004D086E8564

                lineWidthRange[0]:              float = 0

                lineWidthRange[1]:              float = 7.99219

            pointSizeGranularity:           float = 0.125

            lineWidthGranularity:           float = 0.0078125

            strictLines:                    VkBool32 = 0

            standardSampleLocations:        VkBool32 = 1

            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64

            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64

            nonCoherentAtomSize:            VkDeviceSize = 1

        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000004D086E8598:

            residencyStandard2DBlockShape:  VkBool32 = 1

            residencyStandard2DMultisampleBlockShape: VkBool32 = 1

            residencyStandard3DBlockShape:  VkBool32 = 1

            residencyAlignedMipSize:        VkBool32 = 0

            residencyNonResidentStrict:     VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    pProperties:                    VkPhysicalDeviceProperties2* = 0000004D086EC3E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)

        pNext:                          void* = VkPhysicalDeviceDriverProperties

        properties:                     VkPhysicalDeviceProperties = 0000004D086EC3F0:

            apiVersion:                     uint32_t = 4206842

            driverVersion:                  uint32_t = 1659361

            vendorID:                       uint32_t = 32902

            deviceID:                       uint32_t = 18048

            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)

            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"

            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000004D086EC504

                pipelineCacheUUID[0]:           uint8_t = 208

                pipelineCacheUUID[1]:           uint8_t = 41

                pipelineCacheUUID[2]:           uint8_t = 212

                pipelineCacheUUID[3]:           uint8_t = 41

                pipelineCacheUUID[4]:           uint8_t = 214

                pipelineCacheUUID[5]:           uint8_t = 39

                pipelineCacheUUID[6]:           uint8_t = 231

                pipelineCacheUUID[7]:           uint8_t = 43

                pipelineCacheUUID[8]:           uint8_t = 216

                pipelineCacheUUID[9]:           uint8_t = 38

                pipelineCacheUUID[10]:          uint8_t = 219

                pipelineCacheUUID[11]:          uint8_t = 40

                pipelineCacheUUID[12]:          uint8_t = 220

                pipelineCacheUUID[13]:          uint8_t = 44

                pipelineCacheUUID[14]:          uint8_t = 222

                pipelineCacheUUID[15]:          uint8_t = 29

            limits:                         VkPhysicalDeviceLimits = 0000004D086EC518:

                maxImageDimension1D:            uint32_t = 16384

                maxImageDimension2D:            uint32_t = 16384

                maxImageDimension3D:            uint32_t = 2048

                maxImageDimensionCube:          uint32_t = 16384

                maxImageArrayLayers:            uint32_t = 2048

                maxTexelBufferElements:         uint32_t = 134217728

                maxUniformBufferRange:          uint32_t = 134217724

                maxStorageBufferRange:          uint32_t = 1073741820

                maxPushConstantsSize:           uint32_t = 256

                maxMemoryAllocationCount:       uint32_t = 4197384

                maxSamplerAllocationCount:      uint32_t = 4000

                bufferImageGranularity:         VkDeviceSize = 1

                sparseAddressSpaceSize:         VkDeviceSize = 17523466567680

                maxBoundDescriptorSets:         uint32_t = 32

                maxPerStageDescriptorSamplers:  uint32_t = 64

                maxPerStageDescriptorUniformBuffers: uint32_t = 200

                maxPerStageDescriptorStorageBuffers: uint32_t = 200

                maxPerStageDescriptorSampledImages: uint32_t = 200

                maxPerStageDescriptorStorageImages: uint32_t = 16

                maxPerStageDescriptorInputAttachments: uint32_t = 7

                maxPerStageResources:           uint32_t = 200

                maxDescriptorSetSamplers:       uint32_t = 576

                maxDescriptorSetUniformBuffers: uint32_t = 1800

                maxDescriptorSetUniformBuffersDynamic: uint32_t = 16

                maxDescriptorSetStorageBuffers: uint32_t = 1800

                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

                maxDescriptorSetSampledImages:  uint32_t = 1800

                maxDescriptorSetStorageImages:  uint32_t = 144

                maxDescriptorSetInputAttachments: uint32_t = 7

                maxVertexInputAttributes:       uint32_t = 32

                maxVertexInputBindings:         uint32_t = 32

                maxVertexInputAttributeOffset:  uint32_t = 2047

                maxVertexInputBindingStride:    uint32_t = 4095

                maxVertexOutputComponents:      uint32_t = 128

                maxTessellationGenerationLevel: uint32_t = 64

                maxTessellationPatchSize:       uint32_t = 32

                maxTessellationControlPerVertexInputComponents: uint32_t = 128

                maxTessellationControlPerVertexOutputComponents: uint32_t = 128

                maxTessellationControlPerPatchOutputComponents: uint32_t = 120

                maxTessellationControlTotalOutputComponents: uint32_t = 4096

                maxTessellationEvaluationInputComponents: uint32_t = 128

                maxTessellationEvaluationOutputComponents: uint32_t = 128

                maxGeometryShaderInvocations:   uint32_t = 32

                maxGeometryInputComponents:     uint32_t = 128

                maxGeometryOutputComponents:    uint32_t = 128

                maxGeometryOutputVertices:      uint32_t = 256

                maxGeometryTotalOutputComponents: uint32_t = 1024

                maxFragmentInputComponents:     uint32_t = 128

                maxFragmentOutputAttachments:   uint32_t = 8

                maxFragmentDualSrcAttachments:  uint32_t = 1

                maxFragmentCombinedOutputResources: uint32_t = 208

                maxComputeSharedMemorySize:     uint32_t = 32768

                maxComputeWorkGroupCount:       uint32_t[3] = 0000004D086EC5F4

                    maxComputeWorkGroupCount[0]:    uint32_t = 65536

                    maxComputeWorkGroupCount[1]:    uint32_t = 65536

                    maxComputeWorkGroupCount[2]:    uint32_t = 65536

                maxComputeWorkGroupInvocations: uint32_t = 1024

                maxComputeWorkGroupSize:        uint32_t[3] = 0000004D086EC604

                    maxComputeWorkGroupSize[0]:     uint32_t = 1024

                    maxComputeWorkGroupSize[1]:     uint32_t = 1024

                    maxComputeWorkGroupSize[2]:     uint32_t = 64

                subPixelPrecisionBits:          uint32_t = 8

                subTexelPrecisionBits:          uint32_t = 8

                mipmapPrecisionBits:            uint32_t = 8

                maxDrawIndexedIndexValue:       uint32_t = 4294967295

                maxDrawIndirectCount:           uint32_t = 4294967295

                maxSamplerLodBias:              float = 16

                maxSamplerAnisotropy:           float = 16

                maxViewports:                   uint32_t = 16

                maxViewportDimensions:          uint32_t[2] = 0000004D086EC630

                    maxViewportDimensions[0]:       uint32_t = 32768

                    maxViewportDimensions[1]:       uint32_t = 32768

                viewportBoundsRange:            float[2] = 0000004D086EC638

                    viewportBoundsRange[0]:         float = -65536

                    viewportBoundsRange[1]:         float = 65535

                viewportSubPixelBits:           uint32_t = 8

                minMemoryMapAlignment:          size_t = 64

                minTexelBufferOffsetAlignment:  VkDeviceSize = 64

                minUniformBufferOffsetAlignment: VkDeviceSize = 64

                minStorageBufferOffsetAlignment: VkDeviceSize = 64

                minTexelOffset:                 int32_t = -8

                maxTexelOffset:                 uint32_t = 7

                minTexelGatherOffset:           int32_t = -32

                maxTexelGatherOffset:           uint32_t = 31

                minInterpolationOffset:         float = -0.5

                maxInterpolationOffset:         float = 0.4375

                subPixelInterpolationOffsetBits: uint32_t = 4

                maxFramebufferWidth:            uint32_t = 16384

                maxFramebufferHeight:           uint32_t = 16384

                maxFramebufferLayers:           uint32_t = 2048

                framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                maxColorAttachments:            uint32_t = 8

                sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

                maxSampleMaskWords:             uint32_t = 1

                timestampComputeAndGraphics:    VkBool32 = 1

                timestampPeriod:                float = 52.0833

                maxClipDistances:               uint32_t = 8

                maxCullDistances:               uint32_t = 8

                maxCombinedClipAndCullDistances: uint32_t = 8

                discreteQueuePriorities:        uint32_t = 2

                pointSizeRange:                 float[2] = 0000004D086EC6D4

                    pointSizeRange[0]:              float = 0.125

                    pointSizeRange[1]:              float = 255.875

                lineWidthRange:                 float[2] = 0000004D086EC6DC

                    lineWidthRange[0]:              float = 0

                    lineWidthRange[1]:              float = 7.99219

                pointSizeGranularity:           float = 0.125

                lineWidthGranularity:           float = 0.0078125

                strictLines:                    VkBool32 = 0

                standardSampleLocations:        VkBool32 = 1

                optimalBufferCopyOffsetAlignment: VkDeviceSize = 64

                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64

                nonCoherentAtomSize:            VkDeviceSize = 1

            sparseProperties:               VkPhysicalDeviceSparseProperties = 0000004D086EC710:

                residencyStandard2DBlockShape:  VkBool32 = 1

                residencyStandard2DMultisampleBlockShape: VkBool32 = 1

                residencyStandard3DBlockShape:  VkBool32 = 1

                residencyAlignedMipSize:        VkBool32 = 0

                residencyNonResidentStrict:     VkBool32 = 1

        pNext:                          VkPhysicalDeviceDriverProperties = 0000004D086E9A60:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties

            driverID:                       VkDriverId = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS (5)

            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "Intel Corporation"

            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "Intel driver"

            conformanceVersion:             VkConformanceVersion = 0000004D086E9C74:

                major:                          uint8_t = 1

                minor:                          uint8_t = 3

                subminor:                       uint8_t = 5

                patch:                          uint8_t = 0

        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 0000004D086E99A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)

            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties

            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 1048576

            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 0

            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 0

            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 0

            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 0

            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 0

            robustBufferAccessUpdateAfterBind: VkBool32 = 1

            quadDivergentImplicitLod:       VkBool32 = 1

            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576

            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576

            maxPerStageUpdateAfterBindResources: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 16

            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576

            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576

        pNext:                          VkPhysicalDeviceMaintenance3Properties = 0000004D086E9978:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)

            pNext:                          void* = NULL

            maxPerSetDescriptors:           uint32_t = 6159

            maxMemoryAllocationSize:        VkDeviceSize = 17058269184



Thread 0, Frame 0:

vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    pFeatures:                      VkPhysicalDeviceFeatures2* = 0000004D086EEFC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)

        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

        features:                       VkPhysicalDeviceFeatures = 0000004D086EEFD0:

            robustBufferAccess:             VkBool32 = 1

            fullDrawIndexUint32:            VkBool32 = 1

            imageCubeArray:                 VkBool32 = 1

            independentBlend:               VkBool32 = 1

            geometryShader:                 VkBool32 = 1

            tessellationShader:             VkBool32 = 1

            sampleRateShading:              VkBool32 = 1

            dualSrcBlend:                   VkBool32 = 1

            logicOp:                        VkBool32 = 1

            multiDrawIndirect:              VkBool32 = 1

            drawIndirectFirstInstance:      VkBool32 = 1

            depthClamp:                     VkBool32 = 1

            depthBiasClamp:                 VkBool32 = 1

            fillModeNonSolid:               VkBool32 = 1

            depthBounds:                    VkBool32 = 1

            wideLines:                      VkBool32 = 1

            largePoints:                    VkBool32 = 1

            alphaToOne:                     VkBool32 = 1

            multiViewport:                  VkBool32 = 1

            samplerAnisotropy:              VkBool32 = 1

            textureCompressionETC2:         VkBool32 = 1

            textureCompressionASTC_LDR:     VkBool32 = 1

            textureCompressionBC:           VkBool32 = 1

            occlusionQueryPrecise:          VkBool32 = 1

            pipelineStatisticsQuery:        VkBool32 = 1

            vertexPipelineStoresAndAtomics: VkBool32 = 1

            fragmentStoresAndAtomics:       VkBool32 = 1

            shaderTessellationAndGeometryPointSize: VkBool32 = 1

            shaderImageGatherExtended:      VkBool32 = 1

            shaderStorageImageExtendedFormats: VkBool32 = 1

            shaderStorageImageMultisample:  VkBool32 = 1

            shaderStorageImageReadWithoutFormat: VkBool32 = 0

            shaderStorageImageWriteWithoutFormat: VkBool32 = 1

            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1

            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1

            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1

            shaderClipDistance:             VkBool32 = 1

            shaderCullDistance:             VkBool32 = 1

            shaderFloat64:                  VkBool32 = 0

            shaderInt64:                    VkBool32 = 1

            shaderInt16:                    VkBool32 = 1

            shaderResourceResidency:        VkBool32 = 1

            shaderResourceMinLod:           VkBool32 = 0

            sparseBinding:                  VkBool32 = 1

            sparseResidencyBuffer:          VkBool32 = 1

            sparseResidencyImage2D:         VkBool32 = 1

            sparseResidencyImage3D:         VkBool32 = 1

            sparseResidency2Samples:        VkBool32 = 1

            sparseResidency4Samples:        VkBool32 = 1

            sparseResidency8Samples:        VkBool32 = 1

            sparseResidency16Samples:       VkBool32 = 1

            sparseResidencyAliased:         VkBool32 = 1

            variableMultisampleRate:        VkBool32 = 1

            inheritedQueries:               VkBool32 = 1

        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 0000004D086ED1E0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)

            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures

            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1

        pNext:                          VkPhysicalDevice16BitStorageFeatures = 0000004D086ED140:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)

            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features

            storageBuffer16BitAccess:       VkBool32 = 1

            uniformAndStorageBuffer16BitAccess: VkBool32 = 1

            storagePushConstant16:          VkBool32 = 1

            storageInputOutput16:           VkBool32 = 1

        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 0000004D086ED128:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)

            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT

            shaderFloat16:                  VkBool32 = 1

            shaderInt8:                     VkBool32 = 1

        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 0000004D086ED098:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)

            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures

            robustBufferAccess2:            VkBool32 = 1

            robustImageAccess2:             VkBool32 = 1

            nullDescriptor:                 VkBool32 = 1

        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 0000004D086ED078:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)

            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures

            robustImageAccess:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 0000004D086ED058:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)

            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures

            timelineSemaphore:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 0000004D086ED038:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)

            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures

            imagelessFramebuffer:           VkBool32 = 1

        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 0000004D086ECFD0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)

            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures

            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1

            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1

            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1

            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 0

            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1

            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1

            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1

            descriptorBindingPartiallyBound: VkBool32 = 1

            descriptorBindingVariableDescriptorCount: VkBool32 = 1

            runtimeDescriptorArray:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 0000004D086ED0E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)

            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures

            samplerYcbcrConversion:         VkBool32 = 1

        pNext:                          VkPhysicalDeviceMultiviewFeatures = 0000004D086ED0C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)

            pNext:                          void* = NULL

            multiview:                      VkBool32 = 1

            multiviewGeometryShader:        VkBool32 = 1

            multiviewTessellationShader:    VkBool32 = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF618:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF618:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF618:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF618:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF618:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF618:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 0

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 24 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

    pFormatProperties:              VkFormatProperties2* = 0000004D086EF718:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)

        pNext:                          void* = VkFormatProperties3

        formatProperties:               VkFormatProperties = 0000004D086EF728:

            linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

        pNext:                          VkFormatProperties3 = 0000004D086EF6F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)

            pNext:                          void* = NULL

            linearTilingFeatures:           VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)

            optimalTilingFeatures:          VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)

            bufferFeatures:                 VkFormatFeatureFlags2 = 88 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF628:

        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)

    pFormatProperties:              VkFormatProperties* = 0000004D086EF698:

        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        optimalTilingFeatures:          VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    pQueueFamilyPropertyCount:      uint32_t* = 2

    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    pQueueFamilyPropertyCount:      uint32_t* = 2

    pQueueFamilyProperties:         VkQueueFamilyProperties* = 000001C1C2A45950

        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 000001C1C2A45950:

            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)

            queueCount:                     uint32_t = 1

            timestampValidBits:             uint32_t = 36

            minImageTransferGranularity:    VkExtent3D = 000001C1C2A4595C:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1

        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 000001C1C2A45968:

            queueFlags:                     VkQueueFlags = 32 (VK_QUEUE_VIDEO_DECODE_BIT_KHR)

            queueCount:                     uint32_t = 2

            timestampValidBits:             uint32_t = 36

            minImageTransferGranularity:    VkExtent3D = 000001C1C2A45974:

                width:                          uint32_t = 1

                height:                         uint32_t = 1

                depth:                          uint32_t = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)

    pFormatProperties:              VkFormatProperties* = 0000004D086EFAD8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)

    pFormatProperties:              VkFormatProperties* = 0000004D086EFAD8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)

        bufferFeatures:                 VkFormatFeatureFlags = 0



Thread 0, Frame 0:

vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76850

    format:                         VkFormat = VK_FORMAT_S8_UINT (127)

    pFormatProperties:              VkFormatProperties* = 0000004D086EFAD8:

        linearTilingFeatures:           VkFormatFeatureFlags = 0

        optimalTilingFeatures:          VkFormatFeatureFlags = 0

        bufferFeatures:                 VkFormatFeatureFlags = 0



[2024-02-10T19:53:02Z INFO  wgpu_core::instance] Adapter Vulkan AdapterInfo { name: "NVIDIA GeForce RTX 3050", vendor: 4318, device: 9479, device_type: DiscreteGpu, driver: "NVIDIA", driver_info: "537.34", backend: Vulkan }
[2024-02-10T19:53:02Z INFO  wgpu_examples::framework] Using NVIDIA GeForce RTX 3050 (Vulkan)
Thread 0, Frame 0:

vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pCreateInfo:                    const VkDeviceCreateInfo* = 0000004D086DCBC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)

        pNext:                          const void* = NULL

        flags:                          VkDeviceCreateFlags = 0

        queueCreateInfoCount:           uint32_t = 1

        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 0000004D086DD8A0

            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 0000004D086DD8A0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)

                pNext:                          const void* = NULL

                flags:                          VkDeviceQueueCreateFlags = 0

                queueFamilyIndex:               uint32_t = 0

                queueCount:                     uint32_t = 1

                pQueuePriorities:               const float* = 00007FF672AE45C8

                    pQueuePriorities[0]:            const float = 1

        enabledLayerCount:              uint32_t = 0

        ppEnabledLayerNames:            const char* const* = NULL

        enabledExtensionCount:          uint32_t = 7

        ppEnabledExtensionNames:        const char* const* = 000001C1C9CF9000

            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"

            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"

            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"

            ppEnabledExtensionNames[3]:     const char* const = "VK_KHR_deferred_host_operations"

            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_acceleration_structure"

            ppEnabledExtensionNames[5]:     const char* const = "VK_KHR_buffer_device_address"

            ppEnabledExtensionNames[6]:     const char* const = "VK_KHR_ray_query"

        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = 0000004D086DD720:

            robustBufferAccess:             VkBool32 = 1

            fullDrawIndexUint32:            VkBool32 = 0

            imageCubeArray:                 VkBool32 = 1

            independentBlend:               VkBool32 = 1

            geometryShader:                 VkBool32 = 0

            tessellationShader:             VkBool32 = 0

            sampleRateShading:              VkBool32 = 1

            dualSrcBlend:                   VkBool32 = 0

            logicOp:                        VkBool32 = 0

            multiDrawIndirect:              VkBool32 = 0

            drawIndirectFirstInstance:      VkBool32 = 0

            depthClamp:                     VkBool32 = 0

            depthBiasClamp:                 VkBool32 = 0

            fillModeNonSolid:               VkBool32 = 0

            depthBounds:                    VkBool32 = 0

            wideLines:                      VkBool32 = 0

            largePoints:                    VkBool32 = 0

            alphaToOne:                     VkBool32 = 0

            multiViewport:                  VkBool32 = 0

            samplerAnisotropy:              VkBool32 = 1

            textureCompressionETC2:         VkBool32 = 0

            textureCompressionASTC_LDR:     VkBool32 = 0

            textureCompressionBC:           VkBool32 = 0

            occlusionQueryPrecise:          VkBool32 = 0

            pipelineStatisticsQuery:        VkBool32 = 0

            vertexPipelineStoresAndAtomics: VkBool32 = 0

            fragmentStoresAndAtomics:       VkBool32 = 1

            shaderTessellationAndGeometryPointSize: VkBool32 = 0

            shaderImageGatherExtended:      VkBool32 = 0

            shaderStorageImageExtendedFormats: VkBool32 = 0

            shaderStorageImageMultisample:  VkBool32 = 0

            shaderStorageImageReadWithoutFormat: VkBool32 = 0

            shaderStorageImageWriteWithoutFormat: VkBool32 = 0

            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0

            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0

            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0

            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0

            shaderClipDistance:             VkBool32 = 0

            shaderCullDistance:             VkBool32 = 0

            shaderFloat64:                  VkBool32 = 0

            shaderInt64:                    VkBool32 = 0

            shaderInt16:                    VkBool32 = 0

            shaderResourceResidency:        VkBool32 = 0

            shaderResourceMinLod:           VkBool32 = 0

            sparseBinding:                  VkBool32 = 0

            sparseResidencyBuffer:          VkBool32 = 0

            sparseResidencyImage2D:         VkBool32 = 0

            sparseResidencyImage3D:         VkBool32 = 0

            sparseResidency2Samples:        VkBool32 = 0

            sparseResidency4Samples:        VkBool32 = 0

            sparseResidency8Samples:        VkBool32 = 0

            sparseResidency16Samples:       VkBool32 = 0

            sparseResidencyAliased:         VkBool32 = 0

            variableMultisampleRate:        VkBool32 = 0

            inheritedQueries:               VkBool32 = 0

        pNext:                          VkPhysicalDeviceRayQueryFeaturesKHR = 0000004D086DD6E8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR (1000348013)

            pNext:                          void* = VkPhysicalDeviceBufferDeviceAddressFeatures

            rayQuery:                       VkBool32 = 1

        pNext:                          VkPhysicalDeviceBufferDeviceAddressFeatures = 0000004D086DD6C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES (1000257000)

            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR

            bufferDeviceAddress:            VkBool32 = 1

            bufferDeviceAddressCaptureReplay: VkBool32 = 0

            bufferDeviceAddressMultiDevice: VkBool32 = 0

        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 0000004D086DD690:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)

            pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

            accelerationStructure:          VkBool32 = 1

            accelerationStructureCaptureReplay: VkBool32 = 0

            accelerationStructureIndirectBuild: VkBool32 = 0

            accelerationStructureHostCommands: VkBool32 = 0

            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 0

        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 0000004D086DD708:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)

            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT

            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1

        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 0000004D086DD5C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)

            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures

            robustBufferAccess2:            VkBool32 = 1

            robustImageAccess2:             VkBool32 = 1

            nullDescriptor:                 VkBool32 = 0

        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 0000004D086DD5A0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)

            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures

            robustImageAccess:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 0000004D086DD580:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)

            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures

            timelineSemaphore:              VkBool32 = 1

        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 0000004D086DD560:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)

            pNext:                          void* = NULL

            imagelessFramebuffer:           VkBool32 = 1

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pDevice:                        VkDevice* = 000001C1C30F8930



Thread 0, Frame 0:

vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pProperties:                    VkPhysicalDeviceProperties* = 0000004D086DC6C8:

        apiVersion:                     uint32_t = 4206834

        driverVersion:                  uint32_t = 2252898304

        vendorID:                       uint32_t = 4318

        deviceID:                       uint32_t = 9479

        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)

        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"

        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 0000004D086DC7DC

            pipelineCacheUUID[0]:           uint8_t = 218

            pipelineCacheUUID[1]:           uint8_t = 176

            pipelineCacheUUID[2]:           uint8_t = 31

            pipelineCacheUUID[3]:           uint8_t = 61

            pipelineCacheUUID[4]:           uint8_t = 103

            pipelineCacheUUID[5]:           uint8_t = 121

            pipelineCacheUUID[6]:           uint8_t = 168

            pipelineCacheUUID[7]:           uint8_t = 246

            pipelineCacheUUID[8]:           uint8_t = 179

            pipelineCacheUUID[9]:           uint8_t = 114

            pipelineCacheUUID[10]:          uint8_t = 172

            pipelineCacheUUID[11]:          uint8_t = 249

            pipelineCacheUUID[12]:          uint8_t = 185

            pipelineCacheUUID[13]:          uint8_t = 210

            pipelineCacheUUID[14]:          uint8_t = 68

            pipelineCacheUUID[15]:          uint8_t = 21

        limits:                         VkPhysicalDeviceLimits = 0000004D086DC7F0:

            maxImageDimension1D:            uint32_t = 32768

            maxImageDimension2D:            uint32_t = 32768

            maxImageDimension3D:            uint32_t = 16384

            maxImageDimensionCube:          uint32_t = 32768

            maxImageArrayLayers:            uint32_t = 2048

            maxTexelBufferElements:         uint32_t = 134217728

            maxUniformBufferRange:          uint32_t = 65536

            maxStorageBufferRange:          uint32_t = 4294967295

            maxPushConstantsSize:           uint32_t = 256

            maxMemoryAllocationCount:       uint32_t = 4096

            maxSamplerAllocationCount:      uint32_t = 4000

            bufferImageGranularity:         VkDeviceSize = 1024

            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775

            maxBoundDescriptorSets:         uint32_t = 32

            maxPerStageDescriptorSamplers:  uint32_t = 1048576

            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576

            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576

            maxPerStageDescriptorSampledImages: uint32_t = 1048576

            maxPerStageDescriptorStorageImages: uint32_t = 1048576

            maxPerStageDescriptorInputAttachments: uint32_t = 1048576

            maxPerStageResources:           uint32_t = 4294967295

            maxDescriptorSetSamplers:       uint32_t = 1048576

            maxDescriptorSetUniformBuffers: uint32_t = 1048576

            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15

            maxDescriptorSetStorageBuffers: uint32_t = 1048576

            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16

            maxDescriptorSetSampledImages:  uint32_t = 1048576

            maxDescriptorSetStorageImages:  uint32_t = 1048576

            maxDescriptorSetInputAttachments: uint32_t = 1048576

            maxVertexInputAttributes:       uint32_t = 32

            maxVertexInputBindings:         uint32_t = 32

            maxVertexInputAttributeOffset:  uint32_t = 2047

            maxVertexInputBindingStride:    uint32_t = 2048

            maxVertexOutputComponents:      uint32_t = 128

            maxTessellationGenerationLevel: uint32_t = 64

            maxTessellationPatchSize:       uint32_t = 32

            maxTessellationControlPerVertexInputComponents: uint32_t = 128

            maxTessellationControlPerVertexOutputComponents: uint32_t = 128

            maxTessellationControlPerPatchOutputComponents: uint32_t = 120

            maxTessellationControlTotalOutputComponents: uint32_t = 4216

            maxTessellationEvaluationInputComponents: uint32_t = 128

            maxTessellationEvaluationOutputComponents: uint32_t = 128

            maxGeometryShaderInvocations:   uint32_t = 32

            maxGeometryInputComponents:     uint32_t = 128

            maxGeometryOutputComponents:    uint32_t = 128

            maxGeometryOutputVertices:      uint32_t = 1024

            maxGeometryTotalOutputComponents: uint32_t = 1024

            maxFragmentInputComponents:     uint32_t = 128

            maxFragmentOutputAttachments:   uint32_t = 8

            maxFragmentDualSrcAttachments:  uint32_t = 1

            maxFragmentCombinedOutputResources: uint32_t = 4294967295

            maxComputeSharedMemorySize:     uint32_t = 49152

            maxComputeWorkGroupCount:       uint32_t[3] = 0000004D086DC8CC

                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647

                maxComputeWorkGroupCount[1]:    uint32_t = 65535

                maxComputeWorkGroupCount[2]:    uint32_t = 65535

            maxComputeWorkGroupInvocations: uint32_t = 1024

            maxComputeWorkGroupSize:        uint32_t[3] = 0000004D086DC8DC

                maxComputeWorkGroupSize[0]:     uint32_t = 1024

                maxComputeWorkGroupSize[1]:     uint32_t = 1024

                maxComputeWorkGroupSize[2]:     uint32_t = 64

            subPixelPrecisionBits:          uint32_t = 8

            subTexelPrecisionBits:          uint32_t = 8

            mipmapPrecisionBits:            uint32_t = 8

            maxDrawIndexedIndexValue:       uint32_t = 4294967295

            maxDrawIndirectCount:           uint32_t = 4294967295

            maxSamplerLodBias:              float = 15

            maxSamplerAnisotropy:           float = 16

            maxViewports:                   uint32_t = 16

            maxViewportDimensions:          uint32_t[2] = 0000004D086DC908

                maxViewportDimensions[0]:       uint32_t = 32768

                maxViewportDimensions[1]:       uint32_t = 32768

            viewportBoundsRange:            float[2] = 0000004D086DC910

                viewportBoundsRange[0]:         float = -65536

                viewportBoundsRange[1]:         float = 65536

            viewportSubPixelBits:           uint32_t = 8

            minMemoryMapAlignment:          size_t = 64

            minTexelBufferOffsetAlignment:  VkDeviceSize = 16

            minUniformBufferOffsetAlignment: VkDeviceSize = 64

            minStorageBufferOffsetAlignment: VkDeviceSize = 16

            minTexelOffset:                 int32_t = -8

            maxTexelOffset:                 uint32_t = 7

            minTexelGatherOffset:           int32_t = -32

            maxTexelGatherOffset:           uint32_t = 31

            minInterpolationOffset:         float = -0.5

            maxInterpolationOffset:         float = 0.4375

            subPixelInterpolationOffsetBits: uint32_t = 4

            maxFramebufferWidth:            uint32_t = 32768

            maxFramebufferHeight:           uint32_t = 32768

            maxFramebufferLayers:           uint32_t = 2048

            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            maxColorAttachments:            uint32_t = 8

            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)

            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)

            maxSampleMaskWords:             uint32_t = 1

            timestampComputeAndGraphics:    VkBool32 = 1

            timestampPeriod:                float = 1

            maxClipDistances:               uint32_t = 8

            maxCullDistances:               uint32_t = 8

            maxCombinedClipAndCullDistances: uint32_t = 8

            discreteQueuePriorities:        uint32_t = 2

            pointSizeRange:                 float[2] = 0000004D086DC9AC

                pointSizeRange[0]:              float = 1

                pointSizeRange[1]:              float = 2047.94

            lineWidthRange:                 float[2] = 0000004D086DC9B4

                lineWidthRange[0]:              float = 1

                lineWidthRange[1]:              float = 64

            pointSizeGranularity:           float = 0.0625

            lineWidthGranularity:           float = 0.0625

            strictLines:                    VkBool32 = 1

            standardSampleLocations:        VkBool32 = 1

            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1

            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1

            nonCoherentAtomSize:            VkDeviceSize = 64

        sparseProperties:               VkPhysicalDeviceSparseProperties = 0000004D086DC9E8:

            residencyStandard2DBlockShape:  VkBool32 = 1

            residencyStandard2DMultisampleBlockShape: VkBool32 = 1

            residencyStandard3DBlockShape:  VkBool32 = 1

            residencyAlignedMipSize:        VkBool32 = 0

            residencyNonResidentStrict:     VkBool32 = 1



max_vertex_input_binding_stride: 2048
Thread 0, Frame 0:

vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 0000004D086CF958:

        memoryTypeCount:                uint32_t = 5

        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 0000004D086CF95C

            memoryTypes[0]:                 VkMemoryType = 0000004D086CF95C:

                propertyFlags:                  VkMemoryPropertyFlags = 0

                heapIndex:                      uint32_t = 1

            memoryTypes[1]:                 VkMemoryType = 0000004D086CF964:

                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)

                heapIndex:                      uint32_t = 0

            memoryTypes[2]:                 VkMemoryType = 0000004D086CF96C:

                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)

                heapIndex:                      uint32_t = 1

            memoryTypes[3]:                 VkMemoryType = 0000004D086CF974:

                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)

                heapIndex:                      uint32_t = 1

            memoryTypes[4]:                 VkMemoryType = 0000004D086CF97C:

                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)

                heapIndex:                      uint32_t = 2

        memoryHeapCount:                uint32_t = 3

        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 0000004D086CFA60

            memoryHeaps[0]:                 VkMemoryHeap = 0000004D086CFA60:

                size:                           VkDeviceSize = 8447328256

                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

            memoryHeaps[1]:                 VkMemoryHeap = 0000004D086CFA70:

                size:                           VkDeviceSize = 17058267136

                flags:                          VkMemoryHeapFlags = 0

            memoryHeaps[2]:                 VkMemoryHeap = 0000004D086CFA80:

                size:                           VkDeviceSize = 224395264

                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)



Thread 0, Frame 0:

vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:

    device:                         VkDevice = 000001C1C30F8930

    queueFamilyIndex:               uint32_t = 0

    queueIndex:                     uint32_t = 0

    pQueue:                         VkQueue* = 000001C1C9F2ED40



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086D1AC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = FAB64D0000000002



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086D1AC0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = FA21A40000000003



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086C68A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = VkSemaphoreTypeCreateInfo

        flags:                          VkSemaphoreCreateFlags = 0

        pNext:                          VkSemaphoreTypeCreateInfo = 0000004D086C6868:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)

            pNext:                          const void* = NULL

            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)

            initialValue:                   uint64_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = F56C9B0000000004



Thread 0, Frame 0:

vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0000004D086C6568:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)

        pNext:                          const void* = NULL

        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)

        queueFamilyIndex:               uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pCommandPool:                   VkCommandPool* = E7F79A0000000005



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086C64F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 524288

        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = F443490000000006



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = F443490000000006

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086C6378:

        size:                           VkDeviceSize = 524288

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000004D086C5828:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 8388608

        memoryTypeIndex:                uint32_t = 1

        pNext:                          VkMemoryAllocateFlagsInfo = 0000004D086C5888:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = CB3EE80000000007



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = F443490000000006

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086C6080:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 17600992033042857990

        pObjectName:                    const char* = "(wgpu internal) zero init buffer"



Thread 0, Frame 0:

vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000004D086C6750:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)

        pNext:                          const void* = NULL

        commandPool:                    VkCommandPool = E7F79A0000000005

        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)

        commandBufferCount:             uint32_t = 16

    pCommandBuffers:                VkCommandBuffer* = 000001C1C2D36E80

        pCommandBuffers[0]:             VkCommandBuffer = 000001C1C88F7D60

        pCommandBuffers[1]:             VkCommandBuffer = 000001C1C88F9D60

        pCommandBuffers[2]:             VkCommandBuffer = 000001C1C88FBD60

        pCommandBuffers[3]:             VkCommandBuffer = 000001C1C88FDD60

        pCommandBuffers[4]:             VkCommandBuffer = 000001C1C88C36A0

        pCommandBuffers[5]:             VkCommandBuffer = 000001C1C88C4D90

        pCommandBuffers[6]:             VkCommandBuffer = 000001C1C88C6480

        pCommandBuffers[7]:             VkCommandBuffer = 000001C1C88C8480

        pCommandBuffers[8]:             VkCommandBuffer = 000001C1C88CA480

        pCommandBuffers[9]:             VkCommandBuffer = 000001C1C88CC480

        pCommandBuffers[10]:            VkCommandBuffer = 000001C1C88CE480

        pCommandBuffers[11]:            VkCommandBuffer = 000001C1D52A35E0

        pCommandBuffers[12]:            VkCommandBuffer = 000001C1D52A4CD0

        pCommandBuffers[13]:            VkCommandBuffer = 000001C1D52A83D0

        pCommandBuffers[14]:            VkCommandBuffer = 000001C1D52ADAD0

        pCommandBuffers[15]:            VkCommandBuffer = 000001C1D52B11D0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086C6330:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 1932016685520

        pObjectName:                    const char* = "(wgpu internal) PendingWrites"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000004D086C6858:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1C2AFD530

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1C2AFD530:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    dstBuffer:                      VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]

    dstOffset:                      VkDeviceSize = 0

    size:                           VkDeviceSize = 524288

    data:                           uint32_t = 0



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1C2AFD530

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1C2AFD530:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):

    instance:                       VkInstance = 000001C1C110B510

    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 0000004D086F9338:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)

        pNext:                          const void* = NULL

        flags:                          VkWin32SurfaceCreateFlagsKHR = 0

        hinstance:                      HINSTANCE = 00007FF671380000

        hwnd:                           HWND = 0000000000E30A54

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSurface:                       VkSurfaceKHR* = EAD9370000000008



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000004D086F9A18:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000004D086F9A20:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000004D086F9A28:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000004D086F9A30:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000001C1D5159940

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001C1D51595C0

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001C1D51595C0:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001C1D51595C8:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001C1D51595D0:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000004D086F9638:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000004D086F9640:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000004D086F9648:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000004D086F9650:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000001C1D5159900

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult[2024-02-10T19:53:02Z INFO  wgpu_examples::framework] Entering event loop...
[2024-02-10T19:53:02Z INFO  wgpu_examples::framework] Surface resume PhysicalSize { width: 800, height: 600 }
 VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001C1D51595C0

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001C1D51595C0:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001C1D51595C8:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001C1D51595D0:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000004D086F8E60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000004D086F8E50

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000004D086F8E58

            pValues[0]:                     const uint64_t = 0

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 0000004D086F88A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)

        pNext:                          const void* = NULL

        flags:                          VkSwapchainCreateFlagsKHR = 0

        surface:                        VkSurfaceKHR = EAD9370000000008

        minImageCount:                  uint32_t = 3

        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        imageExtent:                    VkExtent2D = 0000004D086F88CC:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        imageArrayLayers:               uint32_t = 1

        imageUsage:                     VkImageUsageFlags = 16 (VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)

        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        clipped:                        VkBool32 = 1

        oldSwapchain:                   VkSwapchainKHR = 0000000000000000

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSwapchain:                     VkSwapchainKHR* = EE647E0000000009



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    swapchain:                      VkSwapchainKHR = EE647E0000000009

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = NULL



Thread 0, Frame 0:

vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    swapchain:                      VkSwapchainKHR = EE647E0000000009

    pSwapchainImageCount:           uint32_t* = 3

    pSwapchainImages:               VkImage* = 000001C1D5159940

        pSwapchainImages[0]:            VkImage = CFEF35000000000A

        pSwapchainImages[1]:            VkImage = EC4BEC000000000B

        pSwapchainImages[2]:            VkImage = E88693000000000C



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086F7E20:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = CAD092000000000D



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086F7CD0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = 967DD1000000000E



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086F7CD0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = E7E6D0000000000F



Thread 0, Frame 0:

vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSemaphoreCreateInfo* = 0000004D086F7CD0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreCreateFlags = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSemaphore:                     VkSemaphore* = D5B26F0000000010



hi
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6080:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 212764

        usage:                          VkBufferUsageFlags = 655506 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 980F360000000011



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 980F360000000011

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F5F08:

        size:                           VkDeviceSize = 212992

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 980F360000000011

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 524288



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5C10:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 10957035792043606033

        pObjectName:                    const char* = "Water vertices"



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6080:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 212760

        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = DCC8FD0000000012



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = DCC8FD0000000012

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F5F08:

        size:                           VkDeviceSize = 212760

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000004D086F5558:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 8388608

        memoryTypeIndex:                uint32_t = 2

        pNext:                          VkMemoryAllocateFlagsInfo = 0000004D086F55B8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = D175B40000000013



Thread 0, Frame 0:

vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    memory:                         VkDeviceMemory = D175B40000000013

    offset:                         VkDeviceSize = 0

    size:                           VkDeviceSize = 8388608

    flags:                          VkMemoryMapFlags = 0

    ppData:                         void** = 000001C1D8E00000



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = DCC8FD0000000012

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 8175848



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5C10:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 15909243860128104466

        pObjectName:                    const char* = "(wgpu internal) initializing unmappable buffer"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1C2AFD530

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1C2AFD530:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001C1C2AFD568:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 980F360000000011 [Water vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]

    dstBuffer:                      VkBuffer = 980F360000000011 [Water vertices]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000004D086F8768

        pRegions[0]:                    const VkBufferCopy = 0000004D086F8768:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 212760



Thread 0, Frame 0:

vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)

    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 0000004D086F81E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

        pNext:                          const void* = NULL

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        geometryCount:                  uint32_t = 1

        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000004D086F5F20

            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000004D086F5F20:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                pNext:                          const void* = NULL

                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                geometry:                       VkAccelerationStructureGeometryDataKHR = 0000004D086F5F38 (Union):

                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000004D086F5F38:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                        vertexData:                     VkDeviceOrHostAddressConstKHR = 0000004D086F5F50 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        vertexStride:                   VkDeviceSize = 0

                        maxVertex:                      uint32_t = 17730

                        indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                        indexData:                      VkDeviceOrHostAddressConstKHR = 0000004D086F5F68 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        transformData:                  VkDeviceOrHostAddressConstKHR = 0000004D086F5F70 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000004D086F5F38:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F5F48 (Union):

                            deviceAddress:                  VkDeviceAddress = 1928440316010

                            hostAddress:                    const void* = 000001C10000006A

                        stride:                         VkDeviceSize = 0

                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000004D086F5F38:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        arrayOfPointers:                VkBool32 = 106

                        data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F5F50 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

        scratchData:                    VkDeviceOrHostAddressKHR = 0000004D086F8228 (Union):

            deviceAddress:                  VkDeviceAddress = 0

            hostAddress:                    void* = NULL

    pMaxPrimitiveCounts:            const uint32_t* = 0000004D086F6228

        pMaxPrimitiveCounts[0]:         const uint32_t = 17730

    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 0000004D086F5D38:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)

        pNext:                          const void* = NULL

        accelerationStructureSize:      VkDeviceSize = 1031680

        updateScratchSize:              VkDeviceSize = 0

        buildScratchSize:               VkDeviceSize = 145664



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F7E30:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 1031680

        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 9FDE6B0000000014



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 9FDE6B0000000014

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F7C88:

        size:                           VkDeviceSize = 1031680

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 9FDE6B0000000014

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 1048576



Thread 0, Frame 0:

vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 0000004D086F80A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)

        pNext:                          const void* = NULL

        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0

        buffer:                         VkBuffer = 9FDE6B0000000014

        offset:                         VkDeviceSize = 0

        size:                           VkDeviceSize = 1031680

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        deviceAddress:                  VkDeviceAddress = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pAccelerationStructure:         VkAccelerationStructureKHR* = DD3A8A0000000015



Thread 0, Frame 0:

vkGetAccelerationStructureDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 273481728:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkAccelerationStructureDeviceAddressInfoKHR* = 0000004D086F8370:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR (1000150002)

        pNext:                          const void* = NULL

        accelerationStructure:          VkAccelerationStructureKHR = DD3A8A0000000015



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6080:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 2978644

        usage:                          VkBufferUsageFlags = 655506 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = D897D90000000016



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = D897D90000000016

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F5F08:

        size:                           VkDeviceSize = 2978816

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = D897D90000000016

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 4194304



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5C10:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 15607181627698970646

        pObjectName:                    const char* = "Terrain vertices"



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6080:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 2978640

        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 84C0580000000017



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 84C0580000000017

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F5F08:

        size:                           VkDeviceSize = 2978640

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 84C0580000000017

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 5197208



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5C10:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 9565742365558177815

        pObjectName:                    const char* = "(wgpu internal) initializing unmappable buffer"



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1C2AFD530

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1C2AFD530:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001C1C2AFD568:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]

    dstBuffer:                      VkBuffer = D897D90000000016 [Terrain vertices]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000004D086F8768

        pRegions[0]:                    const VkBufferCopy = 0000004D086F8768:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 2978640



17730, 106380
Thread 0, Frame 0:

vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)

    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 0000004D086F81E0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

        pNext:                          const void* = NULL

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        geometryCount:                  uint32_t = 1

        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000004D086F5F20

            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000004D086F5F20:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                pNext:                          const void* = NULL

                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                geometry:                       VkAccelerationStructureGeometryDataKHR = 0000004D086F5F38 (Union):

                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000004D086F5F38:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                        vertexData:                     VkDeviceOrHostAddressConstKHR = 0000004D086F5F50 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        vertexStride:                   VkDeviceSize = 0

                        maxVertex:                      uint32_t = 106380

                        indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                        indexData:                      VkDeviceOrHostAddressConstKHR = 0000004D086F5F68 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        transformData:                  VkDeviceOrHostAddressConstKHR = 0000004D086F5F70 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000004D086F5F38:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F5F48 (Union):

                            deviceAddress:                  VkDeviceAddress = 1928440316010

                            hostAddress:                    const void* = 000001C10000006A

                        stride:                         VkDeviceSize = 0

                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000004D086F5F38:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                        pNext:                          const void* = NULL

                        arrayOfPointers:                VkBool32 = 106

                        data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F5F50 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

        scratchData:                    VkDeviceOrHostAddressKHR = 0000004D086F8228 (Union):

            deviceAddress:                  VkDeviceAddress = 0

            hostAddress:                    void* = NULL

    pMaxPrimitiveCounts:            const uint32_t* = 0000004D086F6228

        pMaxPrimitiveCounts[0]:         const uint32_t = 106380

    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 0000004D086F5D38:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)

        pNext:                          const void* = NULL

        accelerationStructureSize:      VkDeviceSize = 6177152

        updateScratchSize:              VkDeviceSize = 0

        buildScratchSize:               VkDeviceSize = 865792



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F7E30:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 6177152

        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = D10D270000000018



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = D10D270000000018

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F7C88:

        size:                           VkDeviceSize = 6177280

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000004D086F7138:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 16777216

        memoryTypeIndex:                uint32_t = 1

        pNext:                          VkMemoryAllocateFlagsInfo = 0000004D086F7198:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = 27D60E0000000019



[2024-02-10T19:53:02Z INFO  wgpu_core::device::ray_tracing] Created blas Id(0,1,vk) with CreateBlasDescriptor { label: None, flags: AccelerationStructureFlags(PREFER_FAST_BUILD), update_mode: Build }
Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = D10D270000000018

    memory:                         VkDeviceMemory = 27D60E0000000019

    memoryOffset:                   VkDeviceSize = 0



Thread 0, Frame 0:

vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 0000004D086F80A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)

        pNext:                          const void* = NULL

        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0

        buffer:                         VkBuffer = D10D270000000018

        offset:                         VkDeviceSize = 0

        size:                           VkDeviceSize = 6177152

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

        deviceAddress:                  VkDeviceAddress = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pAccelerationStructure:         VkAccelerationStructureKHR* = 95A125000000001A



Thread 0, Frame 0:

vkGetAccelerationStructureDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 297795584:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkAccelerationStructureDeviceAddressInfoKHR* = 0000004D086F8370:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR (1000150002)

        pNext:                          const void* = NULL

        accelerationStructure:          VkAccelerationStructureKHR = 95A125000000001A



Thread 0, Frame 0:

vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)

    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 0000004D086F7FF0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

        pNext:                          const void* = NULL

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)

        flags:                          VkBuildAccelerationStructureFlagsKHR = 4 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR)

        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

        geometryCount:                  uint32_t = 1

        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000004D086F5D30

            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000004D086F5D30:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                pNext:                          const void* = NULL

                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_INSTANCES_KHR (2)

                geometry:                       VkAccelerationStructureGeometryDataKHR = 0000004D086F5D48 (Union):

                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000004D086F5D48:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                        pNext:                          const void* = NULL

                        vertexFormat:                   VkFormat = VK_FORMAT_UNDEFINED (0)

                        vertexData:                     VkDeviceOrHostAddressConstKHR = 0000004D086F5D60 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        vertexStride:                   VkDeviceSize = 7305999817851800077

                        maxVertex:                      uint32_t = 1701013878

                        indexType:                      VkIndexType = UNKNOWN (538976314)

                        indexData:                      VkDeviceOrHostAddressConstKHR = 0000004D086F5D78 (Union):

                            deviceAddress:                  VkDeviceAddress = 2314885530818453536

                            hostAddress:                    const void* = 2020202020202020

                        transformData:                  VkDeviceOrHostAddressConstKHR = 0000004D086F5D80 (Union):

                            deviceAddress:                  VkDeviceAddress = 2314885530818453536

                            hostAddress:                    const void* = 2020202020202020

                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000004D086F5D48:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                        pNext:                          const void* = NULL

                        data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F5D58 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                        stride:                         VkDeviceSize = 0

                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000004D086F5D48:

                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                        pNext:                          const void* = NULL

                        arrayOfPointers:                VkBool32 = 0

                        data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F5D60 (Union):

                            deviceAddress:                  VkDeviceAddress = 0

                            hostAddress:                    const void* = NULL

                flags:                          VkGeometryFlagsKHR = 0

        scratchData:                    VkDeviceOrHostAddressKHR = 0000004D086F8038 (Union):

            deviceAddress:                  VkDeviceAddress = 0

            hostAddress:                    void* = NULL

    pMaxPrimitiveCounts:            const uint32_t* = 0000004D086F6038

        pMaxPrimitiveCounts[0]:         const uint32_t = 2

    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 0000004D086F5B48:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)

        pNext:                          const void* = NULL

        accelerationStructureSize:      VkDeviceSize = 2048

        updateScratchSize:              VkDeviceSize = 0

        buildScratchSize:               VkDeviceSize = 2176



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F7C40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 2048

        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = CB1C7C000000001B



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = CB1C7C000000001B

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F7A98:

        size:                           VkDeviceSize = 2048

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = CB1C7C000000001B

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 786432



Thread 0, Frame 0:

vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 0000004D086F7EB8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)

        pNext:                          const void* = NULL

        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0

        buffer:                         VkBuffer = CB1C7C000000001B

        offset:                         VkDeviceSize = 0

        size:                           VkDeviceSize = 2048

        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)

        deviceAddress:                  VkDeviceAddress = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pAccelerationStructure:         VkAccelerationStructureKHR* = 2CFBA2000000001C



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F7D60:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 655362 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 908683000000001D



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 908683000000001D

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F7BE8:

        size:                           VkDeviceSize = 256

        alignment:                      VkDeviceSize = 256

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 908683000000001D

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 788480



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F78F0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 10414155224364089373

        pObjectName:                    const char* = "(wgpu-core) instances_buffer"



Thread 0, Frame 0:

vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0000004D086F7228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorSetLayoutCreateFlags = 0

        bindingCount:                   uint32_t = 1

        pBindings:                      const VkDescriptorSetLayoutBinding* = 000001C1D51599C0

            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000001C1D51599C0:

                binding:                        uint32_t = 0

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR (1000150000)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSetLayout:                     VkDescriptorSetLayout* = CFCDA0000000001E



Thread 0, Frame 0:

vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0000004D086F5528:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)

        maxSets:                        uint32_t = 64

        poolSizeCount:                  uint32_t = 0

        pPoolSizes:                     const VkDescriptorPoolSize* = 0000004D086F54E0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pDescriptorPool:                VkDescriptorPool* = 2E2941000000001F



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000004D086F5428:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = 2E2941000000001F

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000004D086F54C8

            pSetLayouts[0]:                 const VkDescriptorSetLayout = CFCDA0000000001E

    pDescriptorSets:                VkDescriptorSet* = 000001C1D52C6110

        pDescriptorSets[0]:             VkDescriptorSet = AB64DE0000000020



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 000001C1C30F8930

    descriptorWriteCount:           uint32_t = 1

    pDescriptorWrites:              const VkWriteDescriptorSet* = 000001C1C84FBB00

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000001C1C84FBB00:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = VkWriteDescriptorSetAccelerationStructureKHR

            dstSet:                         VkDescriptorSet = AB64DE0000000020

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR (1000150000)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pNext:                          VkWriteDescriptorSetAccelerationStructureKHR = 000001C1D4085060:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR (1000150007)

            pNext:                          const void* = NULL

            accelerationStructureCount:     uint32_t = 1

            pAccelerationStructures:        const VkAccelerationStructureKHR* = 000001C1D52C5FB0

                pAccelerationStructures[0]:     const VkAccelerationStructureKHR = 2CFBA2000000001C

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF672AE4920



Thread 0, Frame 0:

vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkCommandPoolCreateInfo* = 0000004D086F7F08:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)

        pNext:                          const void* = NULL

        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)

        queueFamilyIndex:               uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pCommandPool:                   VkCommandPool* = C4F3070000000021



212760
1031680, 145664, false
2978640
6177152, 865792, false
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6260:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 1011456

        usage:                          VkBufferUsageFlags = 131104 (VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = 301E6C0000000022



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 301E6C0000000022

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F60E8:

        size:                           VkDeviceSize = 1011456

        alignment:                      VkDeviceSize = 16

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkMemoryAllocateInfo* = 0000004D086F5598:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)

        pNext:                          const void* = VkMemoryAllocateFlagsInfo

        allocationSize:                 VkDeviceSize = 8388608

        memoryTypeIndex:                uint32_t = 2

        pNext:                          VkMemoryAllocateFlagsInfo = 0000004D086F55F8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)

            pNext:                          const void* = NULL

            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)

            deviceMask:                     uint32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pMemory:                        VkDeviceMemory* = A7C5450000000023



Thread 0, Frame 0:

vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    memory:                         VkDeviceMemory = A7C5450000000023

    offset:                         VkDeviceSize = 0

    size:                           VkDeviceSize = 8388608

    flags:                          VkMemoryMapFlags = 0

    ppData:                         void** = 000001C1D9600000



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 301E6C0000000022

    memory:                         VkDeviceMemory = A7C5450000000023

    memoryOffset:                   VkDeviceSize = 0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5DF0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 3467327510377660450

        pObjectName:                    const char* = "(wgpu) scratch buffer"



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6260:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = B991FA0000000024



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = B991FA0000000024

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F60E8:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = B991FA0000000024

    memory:                         VkDeviceMemory = A7C5450000000023

    memoryOffset:                   VkDeviceSize = 1048576



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5DF0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 13371743646546657316

        pObjectName:                    const char* = "(wgpu) instance staging buffer"



Thread 0, Frame 0:

vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 0000004D086F64A0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)

        pNext:                          const void* = NULL

        commandPool:                    VkCommandPool = C4F3070000000021

        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)

        commandBufferCount:             uint32_t = 16

    pCommandBuffers:                VkCommandBuffer* = 000001C1C2E25C40

        pCommandBuffers[0]:             VkCommandBuffer = 000001C1D52FF180

        pCommandBuffers[1]:             VkCommandBuffer = 000001C1D533C5C0

        pCommandBuffers[2]:             VkCommandBuffer = 000001C1D533DCD0

        pCommandBuffers[3]:             VkCommandBuffer = 000001C1D5340AF0

        pCommandBuffers[4]:             VkCommandBuffer = 000001C1D533F3E0

        pCommandBuffers[5]:             VkCommandBuffer = 000001C1D5342200

        pCommandBuffers[6]:             VkCommandBuffer = 000001C1D5338090

        pCommandBuffers[7]:             VkCommandBuffer = 000001C1D5343910

        pCommandBuffers[8]:             VkCommandBuffer = 000001C1D53397A0

        pCommandBuffers[9]:             VkCommandBuffer = 000001C1D533AEB0

        pCommandBuffers[10]:            VkCommandBuffer = 000001C1D5345020

        pCommandBuffers[11]:            VkCommandBuffer = 000001C1D5346730

        pCommandBuffers[12]:            VkCommandBuffer = 000001C1D53ADFB0

        pCommandBuffers[13]:            VkCommandBuffer = 000001C1D53AF6C0

        pCommandBuffers[14]:            VkCommandBuffer = 000001C1D53B6A10

        pCommandBuffers[15]:            VkCommandBuffer = 000001C1D53B0DD0



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F6080:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 1932017733072

        pObjectName:                    const char* = ""



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000004D086F65A8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



2
Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 1

    pMemoryBarriers:                const VkMemoryBarrier* = 0000004D086F6628

        pMemoryBarriers[0]:             const VkMemoryBarrier = 0000004D086F6628:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 2097152 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 4194304 (VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF672AE4920

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AE4920



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 272957440:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000004D086F4700:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 980F360000000011 [Water vertices]



alignment: 16
Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 316735488:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000004D086F6330:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 276627456:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000004D086F4700:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]



alignment: 0
Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 316735488:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000004D086F6330:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]



Thread 0, Frame 0:

vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    infoCount:                      uint32_t = 2

    pInfos:                         const VkAccelerationStructureBuildGeometryInfoKHR* = 0000004D086F4E58

        pInfos[0]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 0000004D086F4E58:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

            pNext:                          const void* = NULL

            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

            flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

            dstAccelerationStructure:       VkAccelerationStructureKHR = DD3A8A0000000015

            geometryCount:                  uint32_t = 1

            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000004D086F4B10

                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000004D086F4B10:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                    pNext:                          const void* = NULL

                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                    geometry:                       VkAccelerationStructureGeometryDataKHR = 0000004D086F4B28 (Union):

                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000004D086F4B28:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                            vertexData:                     VkDeviceOrHostAddressConstKHR = 0000004D086F4B40 (Union):

                                deviceAddress:                  VkDeviceAddress = 272957440

                                hostAddress:                    const void* = 0000000010450000

                            vertexStride:                   VkDeviceSize = 12

                            maxVertex:                      uint32_t = 17730

                            indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                            indexData:                      VkDeviceOrHostAddressConstKHR = 0000004D086F4B58 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                            transformData:                  VkDeviceOrHostAddressConstKHR = 0000004D086F4B60 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000004D086F4B28:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F4B38 (Union):

                                deviceAddress:                  VkDeviceAddress = 1928440316010

                                hostAddress:                    const void* = 000001C10000006A

                            stride:                         VkDeviceSize = 272957440

                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000004D086F4B28:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            arrayOfPointers:                VkBool32 = 106

                            data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F4B40 (Union):

                                deviceAddress:                  VkDeviceAddress = 272957440

                                hostAddress:                    const void* = 0000000010450000

                    flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

            scratchData:                    VkDeviceOrHostAddressKHR = 0000004D086F4EA0 (Union):

                deviceAddress:                  VkDeviceAddress = 316735488

                hostAddress:                    void* = 0000000012E10000

        pInfos[1]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 0000004D086F4EA8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

            pNext:                          const void* = NULL

            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)

            flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)

            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

            dstAccelerationStructure:       VkAccelerationStructureKHR = 95A125000000001A

            geometryCount:                  uint32_t = 1

            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000004D086F4B78

                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000004D086F4B78:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                    pNext:                          const void* = NULL

                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)

                    geometry:                       VkAccelerationStructureGeometryDataKHR = 0000004D086F4B90 (Union):

                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000004D086F4B90:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)

                            vertexData:                     VkDeviceOrHostAddressConstKHR = 0000004D086F4BA8 (Union):

                                deviceAddress:                  VkDeviceAddress = 276627456

                                hostAddress:                    const void* = 00000000107D0000

                            vertexStride:                   VkDeviceSize = 28

                            maxVertex:                      uint32_t = 106380

                            indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)

                            indexData:                      VkDeviceOrHostAddressConstKHR = 0000004D086F4BC0 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                            transformData:                  VkDeviceOrHostAddressConstKHR = 0000004D086F4BC8 (Union):

                                deviceAddress:                  VkDeviceAddress = 0

                                hostAddress:                    const void* = NULL

                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000004D086F4B90:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F4BA0 (Union):

                                deviceAddress:                  VkDeviceAddress = 1928440316010

                                hostAddress:                    const void* = 000001C10000006A

                            stride:                         VkDeviceSize = 276627456

                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000004D086F4B90:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)

                            pNext:                          const void* = NULL

                            arrayOfPointers:                VkBool32 = 106

                            data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F4BA8 (Union):

                                deviceAddress:                  VkDeviceAddress = 276627456

                                hostAddress:                    const void* = 00000000107D0000

                    flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)

            scratchData:                    VkDeviceOrHostAddressKHR = 0000004D086F4EF0 (Union):

                deviceAddress:                  VkDeviceAddress = 316881152

                hostAddress:                    void* = 0000000012E33900



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1D52F7080

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1D52F7080:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcStageMask:                   VkPipelineStageFlags = 33556617 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 1

    pMemoryBarriers:                const VkMemoryBarrier* = 0000004D086F6628

        pMemoryBarriers[0]:             const VkMemoryBarrier = 0000004D086F6628:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF672AE4920

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AE4920



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1D52F7080

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1D52F7080:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcBuffer:                      VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]

    dstBuffer:                      VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000004D086F6378

        pRegions[0]:                    const VkBufferCopy = 0000004D086F6378:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 1

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1D52F7080

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1D52F7080:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 273221632:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000004D086F4700:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]



Thread 0, Frame 0:

vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 316735488:

    device:                         VkDevice = 000001C1C30F8930

    pInfo:                          const VkBufferDeviceAddressInfo* = 0000004D086F6330:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)

        pNext:                          const void* = NULL

        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]



Thread 0, Frame 0:

vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    infoCount:                      uint32_t = 1

    pInfos:                         const VkAccelerationStructureBuildGeometryInfoKHR* = 0000004D086F4E58

        pInfos[0]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 0000004D086F4E58:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)

            pNext:                          const void* = NULL

            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)

            flags:                          VkBuildAccelerationStructureFlagsKHR = 4 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR)

            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)

            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000

            dstAccelerationStructure:       VkAccelerationStructureKHR = 2CFBA2000000001C

            geometryCount:                  uint32_t = 1

            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 0000004D086F4B10

                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 0000004D086F4B10:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)

                    pNext:                          const void* = NULL

                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_INSTANCES_KHR (2)

                    geometry:                       VkAccelerationStructureGeometryDataKHR = 0000004D086F4B28 (Union):

                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 0000004D086F4B28:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                            pNext:                          const void* = NULL

                            vertexFormat:                   VkFormat = VK_FORMAT_UNDEFINED (0)

                            vertexData:                     VkDeviceOrHostAddressConstKHR = 0000004D086F4B40 (Union):

                                deviceAddress:                  VkDeviceAddress = 273221632

                                hostAddress:                    const void* = 0000000010490800

                            vertexStride:                   VkDeviceSize = 148

                            maxVertex:                      uint32_t = 0

                            indexType:                      VkIndexType = UNKNOWN (48893)

                            indexData:                      VkDeviceOrHostAddressConstKHR = 0000004D086F4B58 (Union):

                                deviceAddress:                  VkDeviceAddress = 1931684895520

                                hostAddress:                    const void* = 000001C1C1645B20

                            transformData:                  VkDeviceOrHostAddressConstKHR = 0000004D086F4B60 (Union):

                                deviceAddress:                  VkDeviceAddress = 140735965800766

                                hostAddress:                    const void* = 00007FFFA53FA93E

                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 0000004D086F4B28:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                            pNext:                          const void* = NULL

                            data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F4B38 (Union):

                                deviceAddress:                  VkDeviceAddress = 330712481792

                                hostAddress:                    const void* = 0000004D00000000

                            stride:                         VkDeviceSize = 273221632

                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 0000004D086F4B28:

                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)

                            pNext:                          const void* = NULL

                            arrayOfPointers:                VkBool32 = 0

                            data:                           VkDeviceOrHostAddressConstKHR = 0000004D086F4B40 (Union):

                                deviceAddress:                  VkDeviceAddress = 273221632

                                hostAddress:                    const void* = 0000000010490800

                    flags:                          VkGeometryFlagsKHR = 0

            scratchData:                    VkDeviceOrHostAddressKHR = 0000004D086F4EA0 (Union):

                deviceAddress:                  VkDeviceAddress = 316735488

                hostAddress:                    void* = 0000000012E10000



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []

    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dstStageMask:                   VkPipelineStageFlags = 10376 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 1

    pMemoryBarriers:                const VkMemoryBarrier* = 0000004D086F6628

        pMemoryBarriers[0]:             const VkMemoryBarrier = 0000004D086F6628:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4194304 (VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            dstAccessMask:                  VkAccessFlags = 2097152 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR)

    bufferMemoryBarrierCount:       uint32_t = 0

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF672AE4920

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AE4920



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D53B0DD0 []



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F44C0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 1932017756688

        pObjectName:                    const char* = "(wgpu internal) Transit"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D53B6A10 [(wgpu internal) Transit]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000004D086F49E8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D53B6A10 [(wgpu internal) Transit]

    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)

    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1D52F7080

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1D52F7080:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = 980F360000000011 [Water vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001C1D52F70B8:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D53B6A10 [(wgpu internal) Transit]



Thread 0, Frame 0:

vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]



Thread 0, Frame 0:

vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):

    queue:                          VkQueue = 000001C1C9F2ED40

    submitCount:                    uint32_t = 1

    pSubmits:                       const VkSubmitInfo* = 0000004D086F4920

        pSubmits[0]:                    const VkSubmitInfo = 0000004D086F4920:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)

            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo

            waitSemaphoreCount:             uint32_t = 0

            pWaitSemaphores:                const VkSemaphore* = 0000000000000008

            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004

            commandBufferCount:             uint32_t = 3

            pCommandBuffers:                const VkCommandBuffer* = 000001C1D52F9AC0

                pCommandBuffers[0]:             const VkCommandBuffer = 000001C1D52B11D0 [(wgpu internal) PendingWrites]

                pCommandBuffers[1]:             const VkCommandBuffer = 000001C1D53B6A10 [(wgpu internal) Transit]

                pCommandBuffers[2]:             const VkCommandBuffer = 000001C1D53B0DD0 []

            signalSemaphoreCount:           uint32_t = 2

            pSignalSemaphores:              const VkSemaphore* = 0000004D086F4550

                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002

                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004

        pNext:                          VkTimelineSemaphoreSubmitInfo = 0000004D086F47F0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)

            pNext:                          const void* = NULL

            waitSemaphoreValueCount:        uint32_t = 0

            pWaitSemaphoreValues:           const uint64_t* = NULL

            signalSemaphoreValueCount:      uint32_t = 2

            pSignalSemaphoreValues:         const uint64_t* = 0000004D086F4568

                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615

                pSignalSemaphoreValues[1]:      const uint64_t = 1

    fence:                          VkFence = 0000000000000000



Thread 0, Frame 0:

vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    semaphore:                      VkSemaphore = F56C9B0000000004

    pValue:                         uint64_t* = 0



Thread 0, Frame 0:

vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 0000004D086F7228:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorSetLayoutCreateFlags = 0

        bindingCount:                   uint32_t = 3

        pBindings:                      const VkDescriptorSetLayoutBinding* = 000001C1C84FB8D0

            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 000001C1C84FB8D0:

                binding:                        uint32_t = 0

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = UNUSED

            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 000001C1C84FB8E8:

                binding:                        uint32_t = 1

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = UNUSED

            pBindings[2]:                   const VkDescriptorSetLayoutBinding = 000001C1C84FB900:

                binding:                        uint32_t = 2

                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

                descriptorCount:                uint32_t = 1

                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                pImmutableSamplers:             const VkSampler* = NULL

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSetLayout:                     VkDescriptorSetLayout* = 3A6CBB0000000025



Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F6250:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 18 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = A2EB680000000026



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = A2EB680000000026

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F60D8:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 64

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = A2EB680000000026

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 789504



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5DE0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 11739591202880618534

        pObjectName:                    const char* = "Water Uniforms"



elapsed before init 58ms
RTUniforms { view_inverse: [[0.08838836, -0.0, 0.08838836, -0.0], [0.02123436, 0.64714247, -0.02123436, 0.0], [-0.085799776, 0.16015957, 0.085799776, -0.0], [-24.999998, 46.666664, 25.000002, 1.0000001]], proj_inverse: [[0.7543638, 0.0, -0.0, 0.0], [0.0, 0.56577283, 0.0, -0.0], [-0.0, 0.0, -0.0, -999.9991], [0.0, -0.0, -1.0, 1000.0]] }
Thread 0, Frame 0:

vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkBufferCreateInfo* = 0000004D086F7C20:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)

        pNext:                          const void* = NULL

        flags:                          VkBufferCreateFlags = 0

        size:                           VkDeviceSize = 128

        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pBuffer:                        VkBuffer* = B097C90000000027



Thread 0, Frame 0:

vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = B097C90000000027

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F7AA8:

        size:                           VkDeviceSize = 128

        alignment:                      VkDeviceSize = 4

        memoryTypeBits:                 uint32_t = 31



Thread 0, Frame 0:

vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = B097C90000000027

    memory:                         VkDeviceMemory = D175B40000000013

    memoryOffset:                   VkDeviceSize = 5197080



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F77B0:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)

        objectHandle:                   uint64_t = 12724860273995808807

        pObjectName:                    const char* = "(wgpu internal) Staging"



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F7A40:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)

        objectHandle:                   uint64_t = 1932016671440

        pObjectName:                    const char* = "(wgpu internal) PendingWrites"



Thread 0, Frame 0:

vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):

    commandBuffer:                  VkCommandBuffer = 000001C1D52ADAD0 [(wgpu internal) PendingWrites]

    pBeginInfo:                     const VkCommandBufferBeginInfo* = 0000004D086F7F68:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)

        pNext:                          const void* = NULL

        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)

        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED



Thread 0, Frame 0:

vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52ADAD0 [(wgpu internal) PendingWrites]

    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)

    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)

    dependencyFlags:                VkDependencyFlags = 0

    memoryBarrierCount:             uint32_t = 0

    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF672AB83E8

    bufferMemoryBarrierCount:       uint32_t = 2

    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 000001C1C2AFD530

        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 000001C1C2AFD530:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)

            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = B097C90000000027 [(wgpu internal) Staging]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 000001C1C2AFD568:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)

            pNext:                          const void* = NULL

            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)

            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)

            srcQueueFamilyIndex:            uint32_t = 0

            dstQueueFamilyIndex:            uint32_t = 0

            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

            offset:                         VkDeviceSize = 0

            size:                           VkDeviceSize = 18446744073709551615

    imageMemoryBarrierCount:        uint32_t = 0

    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF672AB83E8



Thread 0, Frame 0:

vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:

    commandBuffer:                  VkCommandBuffer = 000001C1D52ADAD0 [(wgpu internal) PendingWrites]

    srcBuffer:                      VkBuffer = B097C90000000027 [(wgpu internal) Staging]

    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]

    regionCount:                    uint32_t = 1

    pRegions:                       const VkBufferCopy* = 0000004D086F7D18

        pRegions[0]:                    const VkBufferCopy = 0000004D086F7D18:

            srcOffset:                      VkDeviceSize = 0

            dstOffset:                      VkDeviceSize = 0

            size:                           VkDeviceSize = 128



Thread 0, Frame 0:

vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkImageCreateInfo* = 0000004D086F5530:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)

        pNext:                          const void* = NULL

        flags:                          VkImageCreateFlags = 0

        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        extent:                         VkExtent3D = 0000004D086F554C:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

            depth:                          uint32_t = 1

        mipLevels:                      uint32_t = 1

        arrayLayers:                    uint32_t = 1

        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)

        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)

        queueFamilyIndexCount:          uint32_t = 0

        pQueueFamilyIndices:            const uint32_t* = UNUSED

        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pImage:                         VkImage* = 3FBCD60000000028



Thread 0, Frame 0:

vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:

    device:                         VkDevice = 000001C1C30F8930

    image:                          VkImage = 3FBCD60000000028

    pMemoryRequirements:            VkMemoryRequirements* = 0000004D086F5278:

        size:                           VkDeviceSize = 2048000

        alignment:                      VkDeviceSize = 1024

        memoryTypeBits:                 uint32_t = 3



Thread 0, Frame 0:

vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult[2024-02-10T19:53:02Z INFO  wgpu_core::device::ray_tracing] Created blas Id(1,1,vk) with CreateBlasDescriptor { label: None, flags: AccelerationStructureFlags(PREFER_FAST_BUILD), update_mode: Build }
[2024-02-10T19:53:02Z INFO  wgpu_core::device::ray_tracing] Created tlas Id(0,1,vk) with CreateTlasDescriptor { label: None, max_instances: 2, flags: AccelerationStructureFlags(PREFER_FAST_TRACE), update_mode: Build }
 VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    image:                          VkImage = 3FBCD60000000028

    memory:                         VkDeviceMemory = CB3EE80000000007

    memoryOffset:                   VkDeviceSize = 2097152



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F4F80:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)

        objectHandle:                   uint64_t = 4592781015499407400

        pObjectName:                    const char* = "Depth Buffer"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000004D086F59B8:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 3FBCD60000000028 [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000004D086F59E0:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000004D086F59F0:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000004D086F5BC0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = B9181F0000000029



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5560:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)

        objectHandle:                   uint64_t = 13337444381318185001

        pObjectName:                    const char* = "(wgpu internal) clear texture view"



Thread 0, Frame 0:

vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkSamplerCreateInfo* = 0000004D086F8120:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)

        pNext:                          const void* = NULL

        flags:                          VkSamplerCreateFlags = 0

        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)

        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)

        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)

        mipLodBias:                     float = 0

        anisotropyEnable:               VkBool32 = 0

        maxAnisotropy:                  float = 0

        compareEnable:                  VkBool32 = 0

        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

        minLod:                         float = 0

        maxLod:                         float = 32

        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)

        unnormalizedCoordinates:        VkBool32 = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pSampler:                       VkSampler* = BA7514000000002A



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F7D10:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)

        objectHandle:                   uint64_t = 13435667053562298410

        pObjectName:                    const char* = "Depth Sampler"



Thread 0, Frame 0:

vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkImageViewCreateInfo* = 0000004D086F7558:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)

        pNext:                          const void* = VkImageViewUsageCreateInfo

        flags:                          VkImageViewCreateFlags = 0

        image:                          VkImage = 3FBCD60000000028 [Depth Buffer]

        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)

        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)

        components:                     VkComponentMapping = 0000004D086F7580:

            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)

        subresourceRange:               VkImageSubresourceRange = 0000004D086F7590:

            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)

            baseMipLevel:                   uint32_t = 0

            levelCount:                     uint32_t = 1

            baseArrayLayer:                 uint32_t = 0

            layerCount:                     uint32_t = 1

        pNext:                          VkImageViewUsageCreateInfo = 0000004D086F7760:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)

            pNext:                          const void* = NULL

            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pView:                          VkImageView* = 02E2CD000000002B



Thread 0, Frame 0:

vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 0000004D086F4E38:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)

        pNext:                          const void* = NULL

        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)

        maxSets:                        uint32_t = 64

        poolSizeCount:                  uint32_t = 3

        pPoolSizes:                     const VkDescriptorPoolSize* = 0000004D086F4DF0

            pPoolSizes[0]:                  const VkDescriptorPoolSize = 0000004D086F4DF0:

                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

                descriptorCount:                uint32_t = 64

            pPoolSizes[1]:                  const VkDescriptorPoolSize = 0000004D086F4DF8:

                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

                descriptorCount:                uint32_t = 64

            pPoolSizes[2]:                  const VkDescriptorPoolSize = 0000004D086F4E00:

                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

                descriptorCount:                uint32_t = 64

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pDescriptorPool:                VkDescriptorPool* = B12FB2000000002C



Thread 0, Frame 0:

vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 0000004D086F4D38:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)

        pNext:                          const void* = NULL

        descriptorPool:                 VkDescriptorPool = B12FB2000000002C

        descriptorSetCount:             uint32_t = 1

        pSetLayouts:                    const VkDescriptorSetLayout* = 0000004D086F4DD8

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

    pDescriptorSets:                VkDescriptorSet* = 000001C1D52C61A0

        pDescriptorSets[0]:             VkDescriptorSet = A43473000000002D



Thread 0, Frame 0:

vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 0000004D086F5460:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)

        pNext:                          const void* = NULL

        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)

        objectHandle:                   uint64_t = 11832208564846329901

        pObjectName:                    const char* = "Water Bind Group"



Thread 0, Frame 0:

vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:

    device:                         VkDevice = 000001C1C30F8930

    descriptorWriteCount:           uint32_t = 3

    pDescriptorWrites:              const VkWriteDescriptorSet* = 000001C1C812C980

        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 000001C1C812C980:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]

            dstBinding:                     uint32_t = 0

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)

            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED

            pBufferInfo:                    const VkDescriptorBufferInfo* = 000001C1D52F9B80

                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 000001C1D52F9B80:

                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]

                    offset:                         VkDeviceSize = 0

                    range:                          VkDeviceSize = 18446744073709551615

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 000001C1C812C9C0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]

            dstBinding:                     uint32_t = 1

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)

            pImageInfo:                     const VkDescriptorImageInfo* = 000001C1D52F9C40

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000001C1D52F9C40:

                    sampler:                        VkSampler = 0000000000000000

                    imageView:                      VkImageView = 02E2CD000000002B

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 000001C1C812CA00:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)

            pNext:                          const void* = NULL

            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]

            dstBinding:                     uint32_t = 2

            dstArrayElement:                uint32_t = 0

            descriptorCount:                uint32_t = 1

            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)

            pImageInfo:                     const VkDescriptorImageInfo* = 000001C1D52F9C00

                pImageInfo[0]:                  const VkDescriptorImageInfo = 000001C1D52F9C00:

                    sampler:                        VkSampler = BA7514000000002A [Depth Sampler]

                    imageView:                      VkImageView = 0000000000000000

                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED

            pTexelBufferView:               const VkBufferView* = UNUSED

    descriptorCopyCount:            uint32_t = 0

    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF672AE4920



elapsed after init 552ms
Thread 0, Frame 0:

vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 0000004D086F8308:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)

        pNext:                          const void* = NULL

        flags:                          VkPipelineLayoutCreateFlags = 0

        setLayoutCount:                 uint32_t = 2

        pSetLayouts:                    const VkDescriptorSetLayout* = 000001C1D52FA5E0

            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025

            pSetLayouts[1]:                 const VkDescriptorSetLayout = CFCDA0000000001E

        pushConstantRangeCount:         uint32_t = 0

        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pPipelineLayout:                VkPipelineLayout* = 0980B0000000002E



elapsed targets 0ms
elapsed before loop 0ms
elapsed before frag 0ms
elapsed before raw 0ms
Thread 0, Frame 0:

vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0000004D086F1940:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)

        pNext:                          const void* = NULL

        flags:                          VkShaderModuleCreateFlags = 0

        codeSize:                       size_t = 8464

        pCode:                          const uint32_t* = SHADER DATA

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pShaderModule:                  VkShaderModule* = 4B7DF1000000002F



Thread 0, Frame 0:

vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkShaderModuleCreateInfo* = 0000004D086F1940:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)

        pNext:                          const void* = NULL

        flags:                          VkShaderModuleCreateFlags = 0

        codeSize:                       size_t = 11436

        pCode:                          const uint32_t* = SHADER DATA

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pShaderModule:                  VkShaderModule* = A21A4E0000000030



Thread 0, Frame 0:

vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pCreateInfo:                    const VkRenderPassCreateInfo* = 0000004D086F1B20:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)

        pNext:                          const void* = NULL

        flags:                          VkRenderPassCreateFlags = 0

        attachmentCount:                uint32_t = 1

        pAttachments:                   const VkAttachmentDescription* = 000001C1D4CA1C10

            pAttachments[0]:                const VkAttachmentDescription = 000001C1D4CA1C10:

                flags:                          VkAttachmentDescriptionFlags = 0

                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)

                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)

                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)

                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

        subpassCount:                   uint32_t = 1

        pSubpasses:                     const VkSubpassDescription* = 0000004D086F1880

            pSubpasses[0]:                  const VkSubpassDescription = 0000004D086F1880:

                flags:                          VkSubpassDescriptionFlags = 0

                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)

                inputAttachmentCount:           uint32_t = 0

                pInputAttachments:              const VkAttachmentReference* = NULL

                colorAttachmentCount:           uint32_t = 1

                pColorAttachments:              const VkAttachmentReference* = 000001C1D52C63F0

                    pColorAttachments[0]:           const VkAttachmentReference = 000001C1D52C63F0:

                        attachment:                     uint32_t = 0

                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)

                pResolveAttachments:            const VkAttachmentReference* = 000001C1D52C6590

                    pResolveAttachments[0]:         const VkAttachmentReference = 000001C1D52C6590:

                        attachment:                     uint32_t = 4294967295

                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)

                pDepthStencilAttachment:        const VkAttachmentReference* = NULL

                preserveAttachmentCount:        uint32_t = 0

                pPreserveAttachments:           const uint32_t* = NULL

        dependencyCount:                uint32_t = 0

        pDependencies:                  const VkSubpassDependency* = NULL

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pRenderPass:                    VkRenderPass* = 0EA7170000000031



Thread 0, Frame 0:

vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    pipelineCache:                  VkPipelineCache = 0000000000000000

    createInfoCount:                uint32_t = 1

    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0000004D086F3AB0

        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0000004D086F3AB0:

            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)

            pNext:                          const void* = NULL

            flags:                          VkPipelineCreateFlags = 0

            stageCount:                     uint32_t = 2

            pStages:                        const VkPipelineShaderStageCreateInfo* = 0000004D086F2458

                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0000004D086F2458:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)

                    pNext:                          const void* = NULL

                    flags:                          VkPipelineShaderStageCreateFlags = 0

                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)

                    module:                         VkShaderModule = 4B7DF1000000002F

                    pName:                          const char* = "vs_main"

                    pSpecializationInfo:            const VkSpecializationInfo* = NULL

                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0000004D086F2488:

                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)

                    pNext:                          const void* = NULL

                    flags:                          VkPipelineShaderStageCreateFlags = 0

                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)

                    module:                         VkShaderModule = A21A4E0000000030

                    pName:                          const char* = "fs_main"

                    pSpecializationInfo:            const VkSpecializationInfo* = NULL

            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0000004D086F2580:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)

                pNext:                          const void* = NULL

                flags:                          VkPipelineVertexInputStateCreateFlags = 0

                vertexBindingDescriptionCount:  uint32_t = 0

                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0000000000000004

                vertexAttributeDescriptionCount: uint32_t = 0

                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0000000000000004

            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0000004D086F2640:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)

                pNext:                          const void* = NULL

                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0

                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)

                primitiveRestartEnable:         VkBool32 = 0

            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL

            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0000004D086F3378:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)

                pNext:                          const void* = NULL

                flags:                          VkPipelineViewportStateCreateFlags = 0

                viewportCount:                  uint32_t = 1

                pViewports:                     const VkViewport* = UNUSED

                scissorCount:                   uint32_t = 1

                pScissors:                      const VkRect2D* = UNUSED

            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0000004D086F2AA0:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)

                pNext:                          const void* = NULL

                flags:                          VkPipelineRasterizationStateCreateFlags = 0

                depthClampEnable:               VkBool32 = 0

                rasterizerDiscardEnable:        VkBool32 = 0

                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)

                cullMode:                       VkCullModeFlags = 0 (VK_CULL_MODE_NONE)

                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)

                depthBiasEnable:                VkBool32 = 0

                depthBiasConstantFactor:        float = 0

                depthBiasClamp:                 float = 0

                depthBiasSlopeFactor:           float = 0

                lineWidth:                      float = 1

            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0000004D086F3470:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)

                pNext:                          const void* = NULL

                flags:                          VkPipelineMultisampleStateCreateFlags = 0

                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)

                sampleShadingEnable:            VkBool32 = 0

                minSampleShading:               float = 0

                pSampleMask:                    const VkSampleMask* = 0000004D086F3468

                    pSampleMask[0]:                 const VkSampleMask = 4294967295

                alphaToCoverageEnable:          VkBool32 = 0

                alphaToOneEnable:               VkBool32 = 0

            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0000004D086F2D58:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)

                pNext:                          const void* = NULL

                flags:                          VkPipelineDepthStencilStateCreateFlags = 0

                depthTestEnable:                VkBool32 = 0

                depthWriteEnable:               VkBool32 = 0

                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_NEVER (0)

                depthBoundsTestEnable:          VkBool32 = 0

                stencilTestEnable:              VkBool32 = 0

                front:                          VkStencilOpState = 0000004D086F2D80:

                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

                    compareMask:                    uint32_t = 0

                    writeMask:                      uint32_t = 0

                    reference:                      uint32_t = 0

                back:                           VkStencilOpState = 0000004D086F2D9C:

                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)

                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)

                    compareMask:                    uint32_t = 0

                    writeMask:                      uint32_t = 0

                    reference:                      uint32_t = 0

                minDepthBounds:                 float = 0

                maxDepthBounds:                 float = 0

            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0000004D086F3878:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)

                pNext:                          const void* = NULL

                flags:                          VkPipelineColorBlendStateCreateFlags = 0

                logicOpEnable:                  VkBool32 = 0

                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)

                attachmentCount:                uint32_t = 1

                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 000001C1D54D1CD0

                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 000001C1D54D1CD0:

                        blendEnable:                    VkBool32 = 0

                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)

                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)

                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)

                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)

                blendConstants:                 float[4] = 0000004D086F38A0

                    blendConstants[0]:              float = 0

                    blendConstants[1]:              float = 0

                    blendConstants[2]:              float = 0

                    blendConstants[3]:              float = 0

            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 0000004D086F3920:

                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)

                pNext:                          const void* = NULL

                flags:                          VkPipelineDynamicStateCreateFlags = 0

                dynamicStateCount:              uint32_t = 4

                pDynamicStates:                 const VkDynamicState* = 0000004D086F2240

                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)

                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)

                    pDynamicStates[2]:              const VkDynamicState = VK_DYNAMIC_STATE_BLEND_CONSTANTS (4)

                    pDynamicStates[3]:              const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)

            layout:                         VkPipelineLayout = 0980B0000000002E

            renderPass:                     VkRenderPass = 0EA7170000000031

            subpass:                        uint32_t = 0

            basePipelineHandle:             VkPipeline = 0000000000000000

            basePipelineIndex:              int32_t = 0

    pAllocator:                     const VkAllocationCallbacks* = NULL

    pPipelines:                     VkPipeline* = 000001C1D52C6520

        pPipelines[0]:                  VkPipeline = 4FAC1C0000000032



Thread 0, Frame 0:

vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    shaderModule:                   VkShaderModule = 4B7DF1000000002F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    shaderModule:                   VkShaderModule = A21A4E0000000030

    pAllocator:                     const VkAllocationCallbacks* = NULL



elapsed end 6213ms
elapsed after raw 6216ms
Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    queueFamilyIndex:               uint32_t = 0

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSupported:                     VkBool32* = 1



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 0000004D086F9358:

        minImageCount:                  uint32_t = 2

        maxImageCount:                  uint32_t = 8

        currentExtent:                  VkExtent2D = 0000004D086F9360:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        minImageExtent:                 VkExtent2D = 0000004D086F9368:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageExtent:                 VkExtent2D = 0000004D086F9370:

            width:                          uint32_t = 800

            height:                         uint32_t = 600

        maxImageArrayLayers:            uint32_t = 1

        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)

        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)

        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pPresentModeCount:              uint32_t* = 4

    pPresentModes:                  VkPresentModeKHR* = 000001C1D52FA2E0

        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)

        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)

        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)

        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL



Thread 0, Frame 0:

vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):

    physicalDevice:                 VkPhysicalDevice = 000001C1C2A76820

    surface:                        VkSurfaceKHR = EAD9370000000008

    pSurfaceFormatCount:            uint32_t* = 3

    pSurfaceFormats:                VkSurfaceFormatKHR* = 000001C1D52FA700

        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 000001C1D52FA700:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 000001C1D52FA708:

            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 000001C1D52FA710:

            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)

            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)



Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_ERROR_DEVICE_LOST (-4):

    device:                         VkDevice = 000001C1C30F8930

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000004D086F8B80:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000004D086F8B70

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000004D086F8B78

            pValues[0]:                     const uint64_t = 1

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_ERROR_DEVICE_LOST (-4):

    device:                         VkDevice = 000001C1C30F8930

    pWaitInfo:                      const VkSemaphoreWaitInfo* = 0000004D086F7270:

        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)

        pNext:                          const void* = NULL

        flags:                          VkSemaphoreWaitFlags = 0

        semaphoreCount:                 uint32_t = 1

        pSemaphores:                    const VkSemaphore* = 0000004D086F7260

            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004

        pValues:                        const uint64_t* = 0000004D086F7268

            pValues[0]:                     const uint64_t = 1

    timeout:                        uint64_t = 5000000000



wait time 0ms
Thread 0, Frame 0:

vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):

    device:                         VkDevice = 000001C1C30F8930

    commandPool:                    VkCommandPool = C4F3070000000021

    flags:                          VkCommandPoolResetFlags = 0



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroyBuffer(device, buffer, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkFreeMemory(device, memory, pAllocator) returns void[2024-02-10T19:53:09Z INFO  wgpu_examples::framework] Surface resize PhysicalSize { width: 1424, height: 714 }
thread 'main' panicked at 'Error in Surface::configure: Validation Error

Caused by:
    Parent device is lost
', wgpu\src\backend\wgpu_core.rs:726:18
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
[2024-02-10T19:53:09Z ERROR wgpu_core::device::resource] failed to wait for the device: Device is lost
:

    device:                         VkDevice = 000001C1C30F8930

    memory:                         VkDeviceMemory = A7C5450000000023

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDeviceWaitIdle(device) returns VkResult VK_ERROR_DEVICE_LOST (-4):

    device:                         VkDevice = 000001C1C30F8930



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    semaphore:                      VkSemaphore = CAD092000000000D

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    semaphore:                      VkSemaphore = 967DD1000000000E

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    semaphore:                      VkSemaphore = E7E6D0000000000F

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySemaphore(device, semaphore, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    semaphore:                      VkSemaphore = D5B26F0000000010

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:

    device:                         VkDevice = 000001C1C30F8930

    swapchain:                      VkSwapchainKHR = EE647E0000000009

    pAllocator:                     const VkAllocationCallbacks* = NULL



Thread 0, Frame 0:

vkDestroySurfaceKHR(instance, surface, pAllocator) returns void:

    instance:                       VkInstance = 000001C1C110B510

    surface:                        VkSurfaceKHR = EAD9370000000008

    pAllocator:                     const VkAllocationCallbacks* = NULL



Process terminated