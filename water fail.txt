Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo:                    const VkInstanceCreateInfo* = 00000025172F55B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:                          const void* = NULL
        flags:                          VkInstanceCreateFlags = 0
        pApplicationInfo:               const VkApplicationInfo* = 00000025172F5580:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:                          const void* = NULL
            pApplicationName:               const char* = "wgpu"
            applicationVersion:             uint32_t = 1
            pEngineName:                    const char* = "wgpu-hal"
            engineVersion:                  uint32_t = 2
            apiVersion:                     uint32_t = 4206592
        enabledLayerCount:              uint32_t = 1
        ppEnabledLayerNames:            const char* const* = 0000012CF176D930
            ppEnabledLayerNames[0]:         const char* const = "VK_LAYER_KHRONOS_validation"
        enabledExtensionCount:          uint32_t = 5
        ppEnabledExtensionNames:        const char* const* = 0000012CF176D938
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_win32_surface"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_debug_utils"
            ppEnabledExtensionNames[3]:     const char* const = "VK_EXT_swapchain_colorspace"
            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_get_physical_device_properties2"
        pNext:                          VkDebugUtilsMessengerCreateInfoEXT = 00000025172F97C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
            pNext:                          const void* = NULL
            flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
            messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
            messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
            pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF6AA85B590
            pUserData:                      void* = 0000012CF17C2180
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pInstance:                      VkInstance* = 0000012CF1767870

Thread 0, Frame 0:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0000012CF1767870
    pCreateInfo:                    const VkDebugUtilsMessengerCreateInfoEXT* = 00000025172F87F8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
        pNext:                          const void* = NULL
        flags:                          VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity:                VkDebugUtilsMessageSeverityFlagsEXT = 4368 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType:                    VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback:                PFN_vkDebugUtilsMessengerCallbackEXT = 00007FF6AA85B590
        pUserData:                      void* = 0000012CF17C2180
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMessenger:                     VkDebugUtilsMessengerEXT* = FD5B260000000001

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0000012CF1767870
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0000012CF1767870
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0000012CF335C3F0
        pPhysicalDevices[0]:            VkPhysicalDevice = 0000012CF2B92C50
        pPhysicalDevices[1]:            VkPhysicalDevice = 0000012CF2B92F20

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0000012CF1767870
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0000012CF1767870
    pPhysicalDeviceCount:           uint32_t* = 2
    pPhysicalDevices:               VkPhysicalDevice* = 0000012CF335C1D0
        pPhysicalDevices[0]:            VkPhysicalDevice = 0000012CF2B92C50
        pPhysicalDevices[1]:            VkPhysicalDevice = 0000012CF2B92F20

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pProperties:                    VkPhysicalDeviceProperties* = 00000025172E9908:
        apiVersion:                     uint32_t = 4206863
        driverVersion:                  uint32_t = 2311585792
        vendorID:                       uint32_t = 4318
        deviceID:                       uint32_t = 9479
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000025172E9A1C
            pipelineCacheUUID[0]:           uint8_t = 218
            pipelineCacheUUID[1]:           uint8_t = 176
            pipelineCacheUUID[2]:           uint8_t = 31
            pipelineCacheUUID[3]:           uint8_t = 61
            pipelineCacheUUID[4]:           uint8_t = 103
            pipelineCacheUUID[5]:           uint8_t = 121
            pipelineCacheUUID[6]:           uint8_t = 168
            pipelineCacheUUID[7]:           uint8_t = 246
            pipelineCacheUUID[8]:           uint8_t = 87
            pipelineCacheUUID[9]:           uint8_t = 92
            pipelineCacheUUID[10]:          uint8_t = 163
            pipelineCacheUUID[11]:          uint8_t = 25
            pipelineCacheUUID[12]:          uint8_t = 122
            pipelineCacheUUID[13]:          uint8_t = 41
            pipelineCacheUUID[14]:          uint8_t = 246
            pipelineCacheUUID[15]:          uint8_t = 253
        limits:                         VkPhysicalDeviceLimits = 00000025172E9A30:
            maxImageDimension1D:            uint32_t = 32768
            maxImageDimension2D:            uint32_t = 32768
            maxImageDimension3D:            uint32_t = 16384
            maxImageDimensionCube:          uint32_t = 32768
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 65536
            maxStorageBufferRange:          uint32_t = 4294967295
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4096
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1024
            sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:           uint32_t = 4294967295
            maxDescriptorSetSamplers:       uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1048576
            maxDescriptorSetStorageImages:  uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 2048
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize:     uint32_t = 49152
            maxComputeWorkGroupCount:       uint32_t[3] = 00000025172E9B0C
                maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                maxComputeWorkGroupCount[1]:    uint32_t = 65535
                maxComputeWorkGroupCount[2]:    uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 00000025172E9B1C
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 15
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 00000025172E9B48
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 00000025172E9B50
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65536
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 32768
            maxFramebufferHeight:           uint32_t = 32768
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 1
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 00000025172E9BEC
                pointSizeRange[0]:              float = 1
                pointSizeRange[1]:              float = 2047.94
            lineWidthRange:                 float[2] = 00000025172E9BF4
                lineWidthRange[0]:              float = 1
                lineWidthRange[1]:              float = 64
            pointSizeGranularity:           float = 0.0625
            lineWidthGranularity:           float = 0.0625
            strictLines:                    VkBool32 = 1
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize:            VkDeviceSize = 64
        sparseProperties:               VkPhysicalDeviceSparseProperties = 00000025172E9C28:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pProperties:                    VkPhysicalDeviceProperties2* = 00000025172EDA70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceDriverProperties
        properties:                     VkPhysicalDeviceProperties = 00000025172EDA80:
            apiVersion:                     uint32_t = 4206863
            driverVersion:                  uint32_t = 2311585792
            vendorID:                       uint32_t = 4318
            deviceID:                       uint32_t = 9479
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000025172EDB94
                pipelineCacheUUID[0]:           uint8_t = 218
                pipelineCacheUUID[1]:           uint8_t = 176
                pipelineCacheUUID[2]:           uint8_t = 31
                pipelineCacheUUID[3]:           uint8_t = 61
                pipelineCacheUUID[4]:           uint8_t = 103
                pipelineCacheUUID[5]:           uint8_t = 121
                pipelineCacheUUID[6]:           uint8_t = 168
                pipelineCacheUUID[7]:           uint8_t = 246
                pipelineCacheUUID[8]:           uint8_t = 87
                pipelineCacheUUID[9]:           uint8_t = 92
                pipelineCacheUUID[10]:          uint8_t = 163
                pipelineCacheUUID[11]:          uint8_t = 25
                pipelineCacheUUID[12]:          uint8_t = 122
                pipelineCacheUUID[13]:          uint8_t = 41
                pipelineCacheUUID[14]:          uint8_t = 246
                pipelineCacheUUID[15]:          uint8_t = 253
            limits:                         VkPhysicalDeviceLimits = 00000025172EDBA8:
                maxImageDimension1D:            uint32_t = 32768
                maxImageDimension2D:            uint32_t = 32768
                maxImageDimension3D:            uint32_t = 16384
                maxImageDimensionCube:          uint32_t = 32768
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 65536
                maxStorageBufferRange:          uint32_t = 4294967295
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4096
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1024
                sparseAddressSpaceSize:         VkDeviceSize = 1099511627775
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 1048576
                maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
                maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
                maxPerStageDescriptorSampledImages: uint32_t = 1048576
                maxPerStageDescriptorStorageImages: uint32_t = 1048576
                maxPerStageDescriptorInputAttachments: uint32_t = 1048576
                maxPerStageResources:           uint32_t = 4294967295
                maxDescriptorSetSamplers:       uint32_t = 1048576
                maxDescriptorSetUniformBuffers: uint32_t = 1048576
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
                maxDescriptorSetStorageBuffers: uint32_t = 1048576
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1048576
                maxDescriptorSetStorageImages:  uint32_t = 1048576
                maxDescriptorSetInputAttachments: uint32_t = 1048576
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 2048
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4216
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 1024
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 4294967295
                maxComputeSharedMemorySize:     uint32_t = 49152
                maxComputeWorkGroupCount:       uint32_t[3] = 00000025172EDC84
                    maxComputeWorkGroupCount[0]:    uint32_t = 2147483647
                    maxComputeWorkGroupCount[1]:    uint32_t = 65535
                    maxComputeWorkGroupCount[2]:    uint32_t = 65535
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 00000025172EDC94
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 15
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 00000025172EDCC0
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 00000025172EDCC8
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65536
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 16
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 16
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 32768
                maxFramebufferHeight:           uint32_t = 32768
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 1
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 00000025172EDD64
                    pointSizeRange[0]:              float = 1
                    pointSizeRange[1]:              float = 2047.94
                lineWidthRange:                 float[2] = 00000025172EDD6C
                    lineWidthRange[0]:              float = 1
                    lineWidthRange[1]:              float = 64
                pointSizeGranularity:           float = 0.0625
                lineWidthGranularity:           float = 0.0625
                strictLines:                    VkBool32 = 1
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
                nonCoherentAtomSize:            VkDeviceSize = 64
            sparseProperties:               VkPhysicalDeviceSparseProperties = 00000025172EDDA0:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceDriverProperties = 00000025172EB0F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)
            pNext:                          void* = VkPhysicalDeviceAccelerationStructurePropertiesKHR
            driverID:                       VkDriverId = VK_DRIVER_ID_NVIDIA_PROPRIETARY (4)
            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "NVIDIA"
            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "551.32"
            conformanceVersion:             VkConformanceVersion = 00000025172EB304:
                major:                          uint8_t = 1
                minor:                          uint8_t = 3
                subminor:                       uint8_t = 7
                patch:                          uint8_t = 1
        pNext:                          VkPhysicalDeviceAccelerationStructurePropertiesKHR = 00000025172EB0A8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR (1000150014)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties
            maxGeometryCount:               uint64_t = 16777215
            maxInstanceCount:               uint64_t = 16777215
            maxPrimitiveCount:              uint64_t = 536870911
            maxPerStageDescriptorAccelerationStructures: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32_t = 1048576
            maxDescriptorSetAccelerationStructures: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32_t = 1048576
            minAccelerationStructureScratchOffsetAlignment: uint32_t = 128
        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 00000025172EB030:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)
            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties
            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 4294967295
            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 1
            robustBufferAccessUpdateAfterBind: VkBool32 = 1
            quadDivergentImplicitLod:       VkBool32 = 1
            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576
            maxPerStageUpdateAfterBindResources: uint32_t = 4294967295
            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576
        pNext:                          VkPhysicalDeviceMaintenance3Properties = 00000025172EB008:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)
            pNext:                          void* = NULL
            maxPerSetDescriptors:           uint32_t = 4294967295
            maxMemoryAllocationSize:        VkDeviceSize = 4292870144

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pFeatures:                      VkPhysicalDeviceFeatures2* = 00000025172F0650:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
        features:                       VkPhysicalDeviceFeatures = 00000025172F0660:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 1
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 1
            tessellationShader:             VkBool32 = 1
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 1
            logicOp:                        VkBool32 = 1
            multiDrawIndirect:              VkBool32 = 1
            drawIndirectFirstInstance:      VkBool32 = 1
            depthClamp:                     VkBool32 = 1
            depthBiasClamp:                 VkBool32 = 1
            fillModeNonSolid:               VkBool32 = 1
            depthBounds:                    VkBool32 = 1
            wideLines:                      VkBool32 = 1
            largePoints:                    VkBool32 = 1
            alphaToOne:                     VkBool32 = 1
            multiViewport:                  VkBool32 = 1
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 0
            textureCompressionASTC_LDR:     VkBool32 = 0
            textureCompressionBC:           VkBool32 = 1
            occlusionQueryPrecise:          VkBool32 = 1
            pipelineStatisticsQuery:        VkBool32 = 1
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended:      VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample:  VkBool32 = 1
            shaderStorageImageReadWithoutFormat: VkBool32 = 1
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance:             VkBool32 = 1
            shaderCullDistance:             VkBool32 = 1
            shaderFloat64:                  VkBool32 = 1
            shaderInt64:                    VkBool32 = 1
            shaderInt16:                    VkBool32 = 1
            shaderResourceResidency:        VkBool32 = 1
            shaderResourceMinLod:           VkBool32 = 1
            sparseBinding:                  VkBool32 = 1
            sparseResidencyBuffer:          VkBool32 = 1
            sparseResidencyImage2D:         VkBool32 = 1
            sparseResidencyImage3D:         VkBool32 = 1
            sparseResidency2Samples:        VkBool32 = 1
            sparseResidency4Samples:        VkBool32 = 1
            sparseResidency8Samples:        VkBool32 = 1
            sparseResidency16Samples:       VkBool32 = 1
            sparseResidencyAliased:         VkBool32 = 1
            variableMultisampleRate:        VkBool32 = 1
            inheritedQueries:               VkBool32 = 1
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000025172EE870:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 00000025172EE7F8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)
            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures
            accelerationStructure:          VkBool32 = 1
            accelerationStructureCaptureReplay: VkBool32 = 1
            accelerationStructureIndirectBuild: VkBool32 = 0
            accelerationStructureHostCommands: VkBool32 = 0
            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 1
        pNext:                          VkPhysicalDevice16BitStorageFeatures = 00000025172EE7D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)
            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features
            storageBuffer16BitAccess:       VkBool32 = 1
            uniformAndStorageBuffer16BitAccess: VkBool32 = 1
            storagePushConstant16:          VkBool32 = 1
            storageInputOutput16:           VkBool32 = 0
        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 00000025172EE7B8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderFloat16:                  VkBool32 = 1
            shaderInt8:                     VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000025172EE728:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 1
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000025172EE708:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000025172EE6E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000025172EE6C8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures
            imagelessFramebuffer:           VkBool32 = 1
        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 00000025172EE660:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)
            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures
            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1
            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 1
            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1
            descriptorBindingPartiallyBound: VkBool32 = 1
            descriptorBindingVariableDescriptorCount: VkBool32 = 1
            runtimeDescriptorArray:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 00000025172EE778:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)
            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures
            samplerYcbcrConversion:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceMultiviewFeatures = 00000025172EE750:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)
            pNext:                          void* = NULL
            multiview:                      VkBool32 = 1
            multiviewGeometryShader:        VkBool32 = 1
            multiviewTessellationShader:    VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C18:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C18:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C18:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C18:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C18:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C18:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C98:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties:              VkFormatProperties2* = 00000025172F0D18:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 00000025172F0D28:
            linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 00000025172F0CF0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 70650064657667 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT | VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 71474698378627 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT | VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV)
            bufferFeatures:                 VkFormatFeatureFlags2 = 6442451032 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 121863 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122247 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 120 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C28:
        linearTilingFeatures:           VkFormatFeatureFlags = 121859 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122243 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)
    pFormatProperties:              VkFormatProperties* = 00000025172F0C98:
        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 516935681 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR | VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR | VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR | VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0000012CF2B4B3E0
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0000012CF2B4B3E0:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000012CF2B4B3EC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0000012CF2B4B3F8:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000012CF2B4B404:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 0000012CF2B4B410:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000012CF2B4B41C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 0000012CF2B4B428:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0000012CF2B4B434:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 0000012CF2B4B440:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 0000012CF2B4B44C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 0000012CF2B4B458:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 0000012CF2B4B464:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)
    pFormatProperties:              VkFormatProperties* = 00000025172F1168:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000025172F1168:
        linearTilingFeatures:           VkFormatFeatureFlags = 119809 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000025172F1168:
        linearTilingFeatures:           VkFormatFeatureFlags = 115713 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 118273 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    pProperties:                    VkPhysicalDeviceProperties* = 00000025172E8108:
        apiVersion:                     uint32_t = 4206842
        driverVersion:                  uint32_t = 1659361
        vendorID:                       uint32_t = 32902
        deviceID:                       uint32_t = 18048
        deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"
        pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000025172E821C
            pipelineCacheUUID[0]:           uint8_t = 208
            pipelineCacheUUID[1]:           uint8_t = 41
            pipelineCacheUUID[2]:           uint8_t = 212
            pipelineCacheUUID[3]:           uint8_t = 41
            pipelineCacheUUID[4]:           uint8_t = 214
            pipelineCacheUUID[5]:           uint8_t = 39
            pipelineCacheUUID[6]:           uint8_t = 231
            pipelineCacheUUID[7]:           uint8_t = 43
            pipelineCacheUUID[8]:           uint8_t = 216
            pipelineCacheUUID[9]:           uint8_t = 38
            pipelineCacheUUID[10]:          uint8_t = 219
            pipelineCacheUUID[11]:          uint8_t = 40
            pipelineCacheUUID[12]:          uint8_t = 220
            pipelineCacheUUID[13]:          uint8_t = 44
            pipelineCacheUUID[14]:          uint8_t = 222
            pipelineCacheUUID[15]:          uint8_t = 29
        limits:                         VkPhysicalDeviceLimits = 00000025172E8230:
            maxImageDimension1D:            uint32_t = 16384
            maxImageDimension2D:            uint32_t = 16384
            maxImageDimension3D:            uint32_t = 2048
            maxImageDimensionCube:          uint32_t = 16384
            maxImageArrayLayers:            uint32_t = 2048
            maxTexelBufferElements:         uint32_t = 134217728
            maxUniformBufferRange:          uint32_t = 134217724
            maxStorageBufferRange:          uint32_t = 1073741820
            maxPushConstantsSize:           uint32_t = 256
            maxMemoryAllocationCount:       uint32_t = 4197384
            maxSamplerAllocationCount:      uint32_t = 4000
            bufferImageGranularity:         VkDeviceSize = 1
            sparseAddressSpaceSize:         VkDeviceSize = 17523466567680
            maxBoundDescriptorSets:         uint32_t = 32
            maxPerStageDescriptorSamplers:  uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 7
            maxPerStageResources:           uint32_t = 200
            maxDescriptorSetSamplers:       uint32_t = 576
            maxDescriptorSetUniformBuffers: uint32_t = 1800
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1800
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages:  uint32_t = 1800
            maxDescriptorSetStorageImages:  uint32_t = 144
            maxDescriptorSetInputAttachments: uint32_t = 7
            maxVertexInputAttributes:       uint32_t = 32
            maxVertexInputBindings:         uint32_t = 32
            maxVertexInputAttributeOffset:  uint32_t = 2047
            maxVertexInputBindingStride:    uint32_t = 4095
            maxVertexOutputComponents:      uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize:       uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations:   uint32_t = 32
            maxGeometryInputComponents:     uint32_t = 128
            maxGeometryOutputComponents:    uint32_t = 128
            maxGeometryOutputVertices:      uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents:     uint32_t = 128
            maxFragmentOutputAttachments:   uint32_t = 8
            maxFragmentDualSrcAttachments:  uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 208
            maxComputeSharedMemorySize:     uint32_t = 32768
            maxComputeWorkGroupCount:       uint32_t[3] = 00000025172E830C
                maxComputeWorkGroupCount[0]:    uint32_t = 65536
                maxComputeWorkGroupCount[1]:    uint32_t = 65536
                maxComputeWorkGroupCount[2]:    uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize:        uint32_t[3] = 00000025172E831C
                maxComputeWorkGroupSize[0]:     uint32_t = 1024
                maxComputeWorkGroupSize[1]:     uint32_t = 1024
                maxComputeWorkGroupSize[2]:     uint32_t = 64
            subPixelPrecisionBits:          uint32_t = 8
            subTexelPrecisionBits:          uint32_t = 8
            mipmapPrecisionBits:            uint32_t = 8
            maxDrawIndexedIndexValue:       uint32_t = 4294967295
            maxDrawIndirectCount:           uint32_t = 4294967295
            maxSamplerLodBias:              float = 16
            maxSamplerAnisotropy:           float = 16
            maxViewports:                   uint32_t = 16
            maxViewportDimensions:          uint32_t[2] = 00000025172E8348
                maxViewportDimensions[0]:       uint32_t = 32768
                maxViewportDimensions[1]:       uint32_t = 32768
            viewportBoundsRange:            float[2] = 00000025172E8350
                viewportBoundsRange[0]:         float = -65536
                viewportBoundsRange[1]:         float = 65535
            viewportSubPixelBits:           uint32_t = 8
            minMemoryMapAlignment:          size_t = 64
            minTexelBufferOffsetAlignment:  VkDeviceSize = 64
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 64
            minTexelOffset:                 int32_t = -8
            maxTexelOffset:                 uint32_t = 7
            minTexelGatherOffset:           int32_t = -32
            maxTexelGatherOffset:           uint32_t = 31
            minInterpolationOffset:         float = -0.5
            maxInterpolationOffset:         float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:            uint32_t = 16384
            maxFramebufferHeight:           uint32_t = 16384
            maxFramebufferLayers:           uint32_t = 2048
            framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:            uint32_t = 8
            sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:             uint32_t = 1
            timestampComputeAndGraphics:    VkBool32 = 1
            timestampPeriod:                float = 52.0833
            maxClipDistances:               uint32_t = 8
            maxCullDistances:               uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities:        uint32_t = 2
            pointSizeRange:                 float[2] = 00000025172E83EC
                pointSizeRange[0]:              float = 0.125
                pointSizeRange[1]:              float = 255.875
            lineWidthRange:                 float[2] = 00000025172E83F4
                lineWidthRange[0]:              float = 0
                lineWidthRange[1]:              float = 7.99219
            pointSizeGranularity:           float = 0.125
            lineWidthGranularity:           float = 0.0078125
            strictLines:                    VkBool32 = 0
            standardSampleLocations:        VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
            nonCoherentAtomSize:            VkDeviceSize = 1
        sparseProperties:               VkPhysicalDeviceSparseProperties = 00000025172E8428:
            residencyStandard2DBlockShape:  VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape:  VkBool32 = 1
            residencyAlignedMipSize:        VkBool32 = 0
            residencyNonResidentStrict:     VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    pProperties:                    VkPhysicalDeviceProperties2* = 00000025172EC270:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (1000059001)
        pNext:                          void* = VkPhysicalDeviceDriverProperties
        properties:                     VkPhysicalDeviceProperties = 00000025172EC280:
            apiVersion:                     uint32_t = 4206842
            driverVersion:                  uint32_t = 1659361
            vendorID:                       uint32_t = 32902
            deviceID:                       uint32_t = 18048
            deviceType:                     VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
            deviceName:                     char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) UHD Graphics 770"
            pipelineCacheUUID:              uint8_t[VK_UUID_SIZE] = 00000025172EC394
                pipelineCacheUUID[0]:           uint8_t = 208
                pipelineCacheUUID[1]:           uint8_t = 41
                pipelineCacheUUID[2]:           uint8_t = 212
                pipelineCacheUUID[3]:           uint8_t = 41
                pipelineCacheUUID[4]:           uint8_t = 214
                pipelineCacheUUID[5]:           uint8_t = 39
                pipelineCacheUUID[6]:           uint8_t = 231
                pipelineCacheUUID[7]:           uint8_t = 43
                pipelineCacheUUID[8]:           uint8_t = 216
                pipelineCacheUUID[9]:           uint8_t = 38
                pipelineCacheUUID[10]:          uint8_t = 219
                pipelineCacheUUID[11]:          uint8_t = 40
                pipelineCacheUUID[12]:          uint8_t = 220
                pipelineCacheUUID[13]:          uint8_t = 44
                pipelineCacheUUID[14]:          uint8_t = 222
                pipelineCacheUUID[15]:          uint8_t = 29
            limits:                         VkPhysicalDeviceLimits = 00000025172EC3A8:
                maxImageDimension1D:            uint32_t = 16384
                maxImageDimension2D:            uint32_t = 16384
                maxImageDimension3D:            uint32_t = 2048
                maxImageDimensionCube:          uint32_t = 16384
                maxImageArrayLayers:            uint32_t = 2048
                maxTexelBufferElements:         uint32_t = 134217728
                maxUniformBufferRange:          uint32_t = 134217724
                maxStorageBufferRange:          uint32_t = 1073741820
                maxPushConstantsSize:           uint32_t = 256
                maxMemoryAllocationCount:       uint32_t = 4197384
                maxSamplerAllocationCount:      uint32_t = 4000
                bufferImageGranularity:         VkDeviceSize = 1
                sparseAddressSpaceSize:         VkDeviceSize = 17523466567680
                maxBoundDescriptorSets:         uint32_t = 32
                maxPerStageDescriptorSamplers:  uint32_t = 64
                maxPerStageDescriptorUniformBuffers: uint32_t = 200
                maxPerStageDescriptorStorageBuffers: uint32_t = 200
                maxPerStageDescriptorSampledImages: uint32_t = 200
                maxPerStageDescriptorStorageImages: uint32_t = 16
                maxPerStageDescriptorInputAttachments: uint32_t = 7
                maxPerStageResources:           uint32_t = 200
                maxDescriptorSetSamplers:       uint32_t = 576
                maxDescriptorSetUniformBuffers: uint32_t = 1800
                maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
                maxDescriptorSetStorageBuffers: uint32_t = 1800
                maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
                maxDescriptorSetSampledImages:  uint32_t = 1800
                maxDescriptorSetStorageImages:  uint32_t = 144
                maxDescriptorSetInputAttachments: uint32_t = 7
                maxVertexInputAttributes:       uint32_t = 32
                maxVertexInputBindings:         uint32_t = 32
                maxVertexInputAttributeOffset:  uint32_t = 2047
                maxVertexInputBindingStride:    uint32_t = 4095
                maxVertexOutputComponents:      uint32_t = 128
                maxTessellationGenerationLevel: uint32_t = 64
                maxTessellationPatchSize:       uint32_t = 32
                maxTessellationControlPerVertexInputComponents: uint32_t = 128
                maxTessellationControlPerVertexOutputComponents: uint32_t = 128
                maxTessellationControlPerPatchOutputComponents: uint32_t = 120
                maxTessellationControlTotalOutputComponents: uint32_t = 4096
                maxTessellationEvaluationInputComponents: uint32_t = 128
                maxTessellationEvaluationOutputComponents: uint32_t = 128
                maxGeometryShaderInvocations:   uint32_t = 32
                maxGeometryInputComponents:     uint32_t = 128
                maxGeometryOutputComponents:    uint32_t = 128
                maxGeometryOutputVertices:      uint32_t = 256
                maxGeometryTotalOutputComponents: uint32_t = 1024
                maxFragmentInputComponents:     uint32_t = 128
                maxFragmentOutputAttachments:   uint32_t = 8
                maxFragmentDualSrcAttachments:  uint32_t = 1
                maxFragmentCombinedOutputResources: uint32_t = 208
                maxComputeSharedMemorySize:     uint32_t = 32768
                maxComputeWorkGroupCount:       uint32_t[3] = 00000025172EC484
                    maxComputeWorkGroupCount[0]:    uint32_t = 65536
                    maxComputeWorkGroupCount[1]:    uint32_t = 65536
                    maxComputeWorkGroupCount[2]:    uint32_t = 65536
                maxComputeWorkGroupInvocations: uint32_t = 1024
                maxComputeWorkGroupSize:        uint32_t[3] = 00000025172EC494
                    maxComputeWorkGroupSize[0]:     uint32_t = 1024
                    maxComputeWorkGroupSize[1]:     uint32_t = 1024
                    maxComputeWorkGroupSize[2]:     uint32_t = 64
                subPixelPrecisionBits:          uint32_t = 8
                subTexelPrecisionBits:          uint32_t = 8
                mipmapPrecisionBits:            uint32_t = 8
                maxDrawIndexedIndexValue:       uint32_t = 4294967295
                maxDrawIndirectCount:           uint32_t = 4294967295
                maxSamplerLodBias:              float = 16
                maxSamplerAnisotropy:           float = 16
                maxViewports:                   uint32_t = 16
                maxViewportDimensions:          uint32_t[2] = 00000025172EC4C0
                    maxViewportDimensions[0]:       uint32_t = 32768
                    maxViewportDimensions[1]:       uint32_t = 32768
                viewportBoundsRange:            float[2] = 00000025172EC4C8
                    viewportBoundsRange[0]:         float = -65536
                    viewportBoundsRange[1]:         float = 65535
                viewportSubPixelBits:           uint32_t = 8
                minMemoryMapAlignment:          size_t = 64
                minTexelBufferOffsetAlignment:  VkDeviceSize = 64
                minUniformBufferOffsetAlignment: VkDeviceSize = 64
                minStorageBufferOffsetAlignment: VkDeviceSize = 64
                minTexelOffset:                 int32_t = -8
                maxTexelOffset:                 uint32_t = 7
                minTexelGatherOffset:           int32_t = -32
                maxTexelGatherOffset:           uint32_t = 31
                minInterpolationOffset:         float = -0.5
                maxInterpolationOffset:         float = 0.4375
                subPixelInterpolationOffsetBits: uint32_t = 4
                maxFramebufferWidth:            uint32_t = 16384
                maxFramebufferHeight:           uint32_t = 16384
                maxFramebufferLayers:           uint32_t = 2048
                framebufferColorSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferDepthSampleCounts:   VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxColorAttachments:            uint32_t = 8
                sampledImageColorSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                sampledImageDepthSampleCounts:  VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                storageImageSampleCounts:       VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
                maxSampleMaskWords:             uint32_t = 1
                timestampComputeAndGraphics:    VkBool32 = 1
                timestampPeriod:                float = 52.0833
                maxClipDistances:               uint32_t = 8
                maxCullDistances:               uint32_t = 8
                maxCombinedClipAndCullDistances: uint32_t = 8
                discreteQueuePriorities:        uint32_t = 2
                pointSizeRange:                 float[2] = 00000025172EC564
                    pointSizeRange[0]:              float = 0.125
                    pointSizeRange[1]:              float = 255.875
                lineWidthRange:                 float[2] = 00000025172EC56C
                    lineWidthRange[0]:              float = 0
                    lineWidthRange[1]:              float = 7.99219
                pointSizeGranularity:           float = 0.125
                lineWidthGranularity:           float = 0.0078125
                strictLines:                    VkBool32 = 0
                standardSampleLocations:        VkBool32 = 1
                optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
                optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
                nonCoherentAtomSize:            VkDeviceSize = 1
            sparseProperties:               VkPhysicalDeviceSparseProperties = 00000025172EC5A0:
                residencyStandard2DBlockShape:  VkBool32 = 1
                residencyStandard2DMultisampleBlockShape: VkBool32 = 1
                residencyStandard3DBlockShape:  VkBool32 = 1
                residencyAlignedMipSize:        VkBool32 = 0
                residencyNonResidentStrict:     VkBool32 = 1
        pNext:                          VkPhysicalDeviceDriverProperties = 00000025172E98F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES (1000196000)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingProperties
            driverID:                       VkDriverId = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS (5)
            driverName:                     char[VK_MAX_DRIVER_NAME_SIZE] = "Intel Corporation"
            driverInfo:                     char[VK_MAX_DRIVER_INFO_SIZE] = "Intel driver"
            conformanceVersion:             VkConformanceVersion = 00000025172E9B04:
                major:                          uint8_t = 1
                minor:                          uint8_t = 3
                subminor:                       uint8_t = 5
                patch:                          uint8_t = 0
        pNext:                          VkPhysicalDeviceDescriptorIndexingProperties = 00000025172E9830:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES (1000161002)
            pNext:                          void* = VkPhysicalDeviceMaintenance3Properties
            maxUpdateAfterBindDescriptorsInAllPools: uint32_t = 1048576
            shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = 0
            shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = 0
            shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = 0
            shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = 0
            shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = 0
            robustBufferAccessUpdateAfterBind: VkBool32 = 1
            quadDivergentImplicitLod:       VkBool32 = 1
            maxPerStageDescriptorUpdateAfterBindSamplers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindSampledImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindStorageImages: uint32_t = 1048576
            maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32_t = 1048576
            maxPerStageUpdateAfterBindResources: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindSamplers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindStorageBuffers: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetUpdateAfterBindSampledImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindStorageImages: uint32_t = 1048576
            maxDescriptorSetUpdateAfterBindInputAttachments: uint32_t = 1048576
        pNext:                          VkPhysicalDeviceMaintenance3Properties = 00000025172E9808:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (1000168000)
            pNext:                          void* = NULL
            maxPerSetDescriptors:           uint32_t = 6159
            maxMemoryAllocationSize:        VkDeviceSize = 17058269184

Thread 0, Frame 0:
vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    pFeatures:                      VkPhysicalDeviceFeatures2* = 00000025172EEE50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
        pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
        features:                       VkPhysicalDeviceFeatures = 00000025172EEE60:
            robustBufferAccess:             VkBool32 = 1
            fullDrawIndexUint32:            VkBool32 = 1
            imageCubeArray:                 VkBool32 = 1
            independentBlend:               VkBool32 = 1
            geometryShader:                 VkBool32 = 1
            tessellationShader:             VkBool32 = 1
            sampleRateShading:              VkBool32 = 1
            dualSrcBlend:                   VkBool32 = 1
            logicOp:                        VkBool32 = 1
            multiDrawIndirect:              VkBool32 = 1
            drawIndirectFirstInstance:      VkBool32 = 1
            depthClamp:                     VkBool32 = 1
            depthBiasClamp:                 VkBool32 = 1
            fillModeNonSolid:               VkBool32 = 1
            depthBounds:                    VkBool32 = 1
            wideLines:                      VkBool32 = 1
            largePoints:                    VkBool32 = 1
            alphaToOne:                     VkBool32 = 1
            multiViewport:                  VkBool32 = 1
            samplerAnisotropy:              VkBool32 = 1
            textureCompressionETC2:         VkBool32 = 1
            textureCompressionASTC_LDR:     VkBool32 = 1
            textureCompressionBC:           VkBool32 = 1
            occlusionQueryPrecise:          VkBool32 = 1
            pipelineStatisticsQuery:        VkBool32 = 1
            vertexPipelineStoresAndAtomics: VkBool32 = 1
            fragmentStoresAndAtomics:       VkBool32 = 1
            shaderTessellationAndGeometryPointSize: VkBool32 = 1
            shaderImageGatherExtended:      VkBool32 = 1
            shaderStorageImageExtendedFormats: VkBool32 = 1
            shaderStorageImageMultisample:  VkBool32 = 1
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 1
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 1
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 1
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 1
            shaderClipDistance:             VkBool32 = 1
            shaderCullDistance:             VkBool32 = 1
            shaderFloat64:                  VkBool32 = 0
            shaderInt64:                    VkBool32 = 1
            shaderInt16:                    VkBool32 = 1
            shaderResourceResidency:        VkBool32 = 1
            shaderResourceMinLod:           VkBool32 = 0
            sparseBinding:                  VkBool32 = 1
            sparseResidencyBuffer:          VkBool32 = 1
            sparseResidencyImage2D:         VkBool32 = 1
            sparseResidencyImage3D:         VkBool32 = 1
            sparseResidency2Samples:        VkBool32 = 1
            sparseResidency4Samples:        VkBool32 = 1
            sparseResidency8Samples:        VkBool32 = 1
            sparseResidency16Samples:       VkBool32 = 1
            sparseResidencyAliased:         VkBool32 = 1
            variableMultisampleRate:        VkBool32 = 1
            inheritedQueries:               VkBool32 = 1
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000025172ED070:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDevice16BitStorageFeatures
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDevice16BitStorageFeatures = 00000025172ECFD0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (1000083000)
            pNext:                          void* = VkPhysicalDeviceShaderFloat16Int8Features
            storageBuffer16BitAccess:       VkBool32 = 1
            uniformAndStorageBuffer16BitAccess: VkBool32 = 1
            storagePushConstant16:          VkBool32 = 1
            storageInputOutput16:           VkBool32 = 1
        pNext:                          VkPhysicalDeviceShaderFloat16Int8Features = 00000025172ECFB8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES (1000082000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderFloat16:                  VkBool32 = 1
            shaderInt8:                     VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000025172ECF28:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 1
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000025172ECF08:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000025172ECEE8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000025172ECEC8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = VkPhysicalDeviceDescriptorIndexingFeatures
            imagelessFramebuffer:           VkBool32 = 1
        pNext:                          VkPhysicalDeviceDescriptorIndexingFeatures = 00000025172ECE60:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES (1000161001)
            pNext:                          void* = VkPhysicalDeviceSamplerYcbcrConversionFeatures
            shaderInputAttachmentArrayDynamicIndexing: VkBool32 = 1
            shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = 1
            shaderUniformBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderSampledImageArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageImageArrayNonUniformIndexing: VkBool32 = 1
            shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = 0
            shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = 1
            descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingSampledImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageImageUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = 1
            descriptorBindingUpdateUnusedWhilePending: VkBool32 = 1
            descriptorBindingPartiallyBound: VkBool32 = 1
            descriptorBindingVariableDescriptorCount: VkBool32 = 1
            runtimeDescriptorArray:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceSamplerYcbcrConversionFeatures = 00000025172ECF78:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (1000156004)
            pNext:                          void* = VkPhysicalDeviceMultiviewFeatures
            samplerYcbcrConversion:         VkBool32 = 1
        pNext:                          VkPhysicalDeviceMultiviewFeatures = 00000025172ECF50:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (1000053001)
            pNext:                          void* = NULL
            multiview:                      VkBool32 = 1
            multiviewGeometryShader:        VkBool32 = 1
            multiviewTessellationShader:    VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R16_UNORM (70)
    pFormatProperties:              VkFormatProperties* = 00000025172EF418:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R16_SNORM (71)
    pFormatProperties:              VkFormatProperties* = 00000025172EF418:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R16G16_UNORM (77)
    pFormatProperties:              VkFormatProperties* = 00000025172EF418:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R16G16_SNORM (78)
    pFormatProperties:              VkFormatProperties* = 00000025172EF418:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_UNORM (91)
    pFormatProperties:              VkFormatProperties* = 00000025172EF418:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R16G16B16A16_SNORM (92)
    pFormatProperties:              VkFormatProperties* = 00000025172EF418:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 122369 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_D32_SFLOAT_S8_UINT (130)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_B10G11R11_UFLOAT_PACK32 (122)
    pFormatProperties:              VkFormatProperties* = 00000025172EF498:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 24 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
    pFormatProperties:              VkFormatProperties2* = 00000025172EF518:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (1000059002)
        pNext:                          void* = VkFormatProperties3
        formatProperties:               VkFormatProperties = 00000025172EF528:
            linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
            bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)
        pNext:                          VkFormatProperties3 = 00000025172EF4F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 (1000360000)
            pNext:                          void* = NULL
            linearTilingFeatures:           VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)
            optimalTilingFeatures:          VkFormatFeatureFlags2 = 6442573187 (VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_2_BLIT_SRC_BIT | VK_FORMAT_FEATURE_2_BLIT_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT | VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT | VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT)
            bufferFeatures:                 VkFormatFeatureFlags2 = 88 (VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R32_SFLOAT (100)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361401 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 88 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
    pFormatProperties:              VkFormatProperties* = 00000025172EF428:
        linearTilingFeatures:           VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = -2147361405 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 536871000 (VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR)

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM (1000156003)
    pFormatProperties:              VkFormatProperties* = 00000025172EF498:
        linearTilingFeatures:           VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        optimalTilingFeatures:          VkFormatFeatureFlags = 13619201 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | VK_FORMAT_FEATURE_DISJOINT_BIT | VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    pQueueFamilyPropertyCount:      uint32_t* = 2
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 0000012CF2BC6930
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 0000012CF2BC6930:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 36
            minImageTransferGranularity:    VkExtent3D = 0000012CF2BC693C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 0000012CF2BC6948:
            queueFlags:                     VkQueueFlags = 32 (VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 36
            minImageTransferGranularity:    VkExtent3D = 0000012CF2BC6954:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_X8_D24_UNORM_PACK32 (125)
    pFormatProperties:              VkFormatProperties* = 00000025172EF968:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_D24_UNORM_S8_UINT (129)
    pFormatProperties:              VkFormatProperties* = 00000025172EF968:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 120321 (VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | VK_FORMAT_FEATURE_TRANSFER_DST_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT)
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92F20
    format:                         VkFormat = VK_FORMAT_S8_UINT (127)
    pFormatProperties:              VkFormatProperties* = 00000025172EF968:
        linearTilingFeatures:           VkFormatFeatureFlags = 0
        optimalTilingFeatures:          VkFormatFeatureFlags = 0
        bufferFeatures:                 VkFormatFeatureFlags = 0

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pCreateInfo:                    const VkDeviceCreateInfo* = 00000025172DC920:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:                          const void* = NULL
        flags:                          VkDeviceCreateFlags = 0
        queueCreateInfoCount:           uint32_t = 1
        pQueueCreateInfos:              const VkDeviceQueueCreateInfo* = 00000025172DD600
            pQueueCreateInfos[0]:           const VkDeviceQueueCreateInfo = 00000025172DD600:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:                          const void* = NULL
                flags:                          VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:               uint32_t = 0
                queueCount:                     uint32_t = 1
                pQueuePriorities:               const float* = 00007FF6AB19B388
                    pQueuePriorities[0]:            const float = 1
        enabledLayerCount:              uint32_t = 0
        ppEnabledLayerNames:            const char* const* = NULL
        enabledExtensionCount:          uint32_t = 7
        ppEnabledExtensionNames:        const char* const* = 0000012CF3058300
            ppEnabledExtensionNames[0]:     const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]:     const char* const = "VK_KHR_swapchain_mutable_format"
            ppEnabledExtensionNames[2]:     const char* const = "VK_EXT_robustness2"
            ppEnabledExtensionNames[3]:     const char* const = "VK_KHR_deferred_host_operations"
            ppEnabledExtensionNames[4]:     const char* const = "VK_KHR_acceleration_structure"
            ppEnabledExtensionNames[5]:     const char* const = "VK_KHR_buffer_device_address"
            ppEnabledExtensionNames[6]:     const char* const = "VK_KHR_ray_query"
        pEnabledFeatures:               const VkPhysicalDeviceFeatures* = NULL
        pNext:                          VkPhysicalDeviceFeatures2 = 00000025172DD948:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (1000059000)
            pNext:                          void* = VkPhysicalDeviceRayQueryFeaturesKHR
            features:                       VkPhysicalDeviceFeatures = 00000025172DD958:
                robustBufferAccess:             VkBool32 = 1
                fullDrawIndexUint32:            VkBool32 = 0
                imageCubeArray:                 VkBool32 = 1
                independentBlend:               VkBool32 = 1
                geometryShader:                 VkBool32 = 0
                tessellationShader:             VkBool32 = 0
                sampleRateShading:              VkBool32 = 1
                dualSrcBlend:                   VkBool32 = 0
                logicOp:                        VkBool32 = 0
                multiDrawIndirect:              VkBool32 = 0
                drawIndirectFirstInstance:      VkBool32 = 0
                depthClamp:                     VkBool32 = 0
                depthBiasClamp:                 VkBool32 = 0
                fillModeNonSolid:               VkBool32 = 0
                depthBounds:                    VkBool32 = 0
                wideLines:                      VkBool32 = 0
                largePoints:                    VkBool32 = 0
                alphaToOne:                     VkBool32 = 0
                multiViewport:                  VkBool32 = 0
                samplerAnisotropy:              VkBool32 = 1
                textureCompressionETC2:         VkBool32 = 0
                textureCompressionASTC_LDR:     VkBool32 = 0
                textureCompressionBC:           VkBool32 = 0
                occlusionQueryPrecise:          VkBool32 = 0
                pipelineStatisticsQuery:        VkBool32 = 0
                vertexPipelineStoresAndAtomics: VkBool32 = 0
                fragmentStoresAndAtomics:       VkBool32 = 1
                shaderTessellationAndGeometryPointSize: VkBool32 = 0
                shaderImageGatherExtended:      VkBool32 = 0
                shaderStorageImageExtendedFormats: VkBool32 = 0
                shaderStorageImageMultisample:  VkBool32 = 0
                shaderStorageImageReadWithoutFormat: VkBool32 = 0
                shaderStorageImageWriteWithoutFormat: VkBool32 = 0
                shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
                shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
                shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
                shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
                shaderClipDistance:             VkBool32 = 0
                shaderCullDistance:             VkBool32 = 0
                shaderFloat64:                  VkBool32 = 0
                shaderInt64:                    VkBool32 = 0
                shaderInt16:                    VkBool32 = 0
                shaderResourceResidency:        VkBool32 = 0
                shaderResourceMinLod:           VkBool32 = 0
                sparseBinding:                  VkBool32 = 0
                sparseResidencyBuffer:          VkBool32 = 0
                sparseResidencyImage2D:         VkBool32 = 0
                sparseResidencyImage3D:         VkBool32 = 0
                sparseResidency2Samples:        VkBool32 = 0
                sparseResidency4Samples:        VkBool32 = 0
                sparseResidency8Samples:        VkBool32 = 0
                sparseResidency16Samples:       VkBool32 = 0
                sparseResidencyAliased:         VkBool32 = 0
                variableMultisampleRate:        VkBool32 = 0
                inheritedQueries:               VkBool32 = 0
        pNext:                          VkPhysicalDeviceRayQueryFeaturesKHR = 00000025172DD448:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR (1000348013)
            pNext:                          void* = VkPhysicalDeviceBufferDeviceAddressFeatures
            rayQuery:                       VkBool32 = 1
        pNext:                          VkPhysicalDeviceBufferDeviceAddressFeatures = 00000025172DD420:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES (1000257000)
            pNext:                          void* = VkPhysicalDeviceAccelerationStructureFeaturesKHR
            bufferDeviceAddress:            VkBool32 = 1
            bufferDeviceAddressCaptureReplay: VkBool32 = 0
            bufferDeviceAddressMultiDevice: VkBool32 = 0
        pNext:                          VkPhysicalDeviceAccelerationStructureFeaturesKHR = 00000025172DD3F0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR (1000150013)
            pNext:                          void* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
            accelerationStructure:          VkBool32 = 1
            accelerationStructureCaptureReplay: VkBool32 = 0
            accelerationStructureIndirectBuild: VkBool32 = 0
            accelerationStructureHostCommands: VkBool32 = 0
            descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = 0
        pNext:                          VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = 00000025172DD468:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES (1000325000)
            pNext:                          void* = VkPhysicalDeviceRobustness2FeaturesEXT
            shaderZeroInitializeWorkgroupMemory: VkBool32 = 1
        pNext:                          VkPhysicalDeviceRobustness2FeaturesEXT = 00000025172DD320:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT (1000286000)
            pNext:                          void* = VkPhysicalDeviceImageRobustnessFeatures
            robustBufferAccess2:            VkBool32 = 1
            robustImageAccess2:             VkBool32 = 1
            nullDescriptor:                 VkBool32 = 0
        pNext:                          VkPhysicalDeviceImageRobustnessFeatures = 00000025172DD300:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES (1000335000)
            pNext:                          void* = VkPhysicalDeviceTimelineSemaphoreFeatures
            robustImageAccess:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceTimelineSemaphoreFeatures = 00000025172DD2E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:                          void* = VkPhysicalDeviceImagelessFramebufferFeatures
            timelineSemaphore:              VkBool32 = 1
        pNext:                          VkPhysicalDeviceImagelessFramebufferFeatures = 00000025172DD2C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES (1000108000)
            pNext:                          void* = NULL
            imagelessFramebuffer:           VkBool32 = 1
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDevice:                        VkDevice* = 0000012CF8401FC0

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pImageFormatInfo:               const VkPhysicalDeviceImageFormatInfo2* = 00000025172DC5F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:                          const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                           VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:                          VkImageCreateFlags = 0
        pNext:                          VkPhysicalDeviceExternalImageFormatInfo = 00000025172DC618:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:                          const void* = NULL
            handleType:                     VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties:         VkImageFormatProperties2* = 00000025172DC650:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:                          void* = VkExternalImageFormatProperties
        imageFormatProperties:          VkImageFormatProperties = 00000025172DC660:
            maxExtent:                      VkExtent3D = 00000025172DC660:
                width:                          uint32_t = 32768
                height:                         uint32_t = 32768
                depth:                          uint32_t = 1
            maxMipLevels:                   uint32_t = 16
            maxArrayLayers:                 uint32_t = 2048
            sampleCounts:                   VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxResourceSize:                VkDeviceSize = 1099511627775
        pNext:                          VkExternalImageFormatProperties = 00000025172DC630:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                          void* = NULL
            externalMemoryProperties:       VkExternalMemoryProperties = 00000025172DC640:
                externalMemoryFeatures:         VkExternalMemoryFeatureFlags = 5 (VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT)
                exportFromImportedHandleTypes:  VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
                compatibleHandleTypes:          VkExternalMemoryHandleTypeFlags = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pQueueFamilyPropertyCount:      uint32_t* = 6
    pQueueFamilyProperties:         VkQueueFamilyProperties* = 00000025172DC650
        pQueueFamilyProperties[0]:      VkQueueFamilyProperties = 00000025172DC650:
            queueFlags:                     VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 16
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000025172DC65C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[1]:      VkQueueFamilyProperties = 00000025172DC668:
            queueFlags:                     VkQueueFlags = 12 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 2
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000025172DC674:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[2]:      VkQueueFamilyProperties = 00000025172DC680:
            queueFlags:                     VkQueueFlags = 14 (VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:                     uint32_t = 8
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000025172DC68C:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[3]:      VkQueueFamilyProperties = 00000025172DC698:
            queueFlags:                     VkQueueFlags = 44 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_DECODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000025172DC6A4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[4]:      VkQueueFamilyProperties = 00000025172DC6B0:
            queueFlags:                     VkQueueFlags = 76 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_VIDEO_ENCODE_BIT_KHR)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 32
            minImageTransferGranularity:    VkExtent3D = 00000025172DC6BC:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1
        pQueueFamilyProperties[5]:      VkQueueFamilyProperties = 00000025172DC6C8:
            queueFlags:                     VkQueueFlags = 268 (VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT | VK_QUEUE_OPTICAL_FLOW_BIT_NV)
            queueCount:                     uint32_t = 1
            timestampValidBits:             uint32_t = 64
            minImageTransferGranularity:    VkExtent3D = 00000025172DC6D4:
                width:                          uint32_t = 1
                height:                         uint32_t = 1
                depth:                          uint32_t = 1

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0000012CF83AB540

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    pMemoryProperties:              VkPhysicalDeviceMemoryProperties* = 00000025172CF6A8:
        memoryTypeCount:                uint32_t = 6
        memoryTypes:                    VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000025172CF6AC
            memoryTypes[0]:                 VkMemoryType = 00000025172CF6AC:
                propertyFlags:                  VkMemoryPropertyFlags = 0
                heapIndex:                      uint32_t = 1
            memoryTypes[1]:                 VkMemoryType = 00000025172CF6B4:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[2]:                 VkMemoryType = 00000025172CF6BC:
                propertyFlags:                  VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:                      uint32_t = 0
            memoryTypes[3]:                 VkMemoryType = 00000025172CF6C4:
                propertyFlags:                  VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[4]:                 VkMemoryType = 00000025172CF6CC:
                propertyFlags:                  VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:                      uint32_t = 1
            memoryTypes[5]:                 VkMemoryType = 00000025172CF6D4:
                propertyFlags:                  VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:                      uint32_t = 2
        memoryHeapCount:                uint32_t = 3
        memoryHeaps:                    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000025172CF7B0
            memoryHeaps[0]:                 VkMemoryHeap = 00000025172CF7B0:
                size:                           VkDeviceSize = 8432648192
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:                 VkMemoryHeap = 00000025172CF7C0:
                size:                           VkDeviceSize = 17058267136
                flags:                          VkMemoryHeapFlags = 0
            memoryHeaps[2]:                 VkMemoryHeap = 00000025172CF7D0:
                size:                           VkDeviceSize = 224395264
                flags:                          VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    queueFamilyIndex:               uint32_t = 0
    queueIndex:                     uint32_t = 0
    pQueue:                         VkQueue* = 0000012CF83AB540

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172D1810:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = FAB64D0000000002

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172D1810:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = FA21A40000000003

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172C6688:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = VkSemaphoreTypeCreateInfo
        flags:                          VkSemaphoreCreateFlags = 0
        pNext:                          VkSemaphoreTypeCreateInfo = 00000025172C6648:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:                          const void* = NULL
            semaphoreType:                  VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:                   uint64_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = F56C9B0000000004

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000025172C6348:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = E7F79A0000000005

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172C62D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 524288
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = F443490000000006

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = F443490000000006
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172C6158:
        size:                           VkDeviceSize = 524288
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000025172C5608:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = VkMemoryAllocateFlagsInfo
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 1
        pNext:                          VkMemoryAllocateFlagsInfo = 00000025172C5668:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)
            pNext:                          const void* = NULL
            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)
            deviceMask:                     uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = CB3EE80000000007

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = F443490000000006
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172C5E60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 17600992033042857990
        pObjectName:                    const char* = "(wgpu internal) zero init buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000025172C6530:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = E7F79A0000000005
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 0000012C82164880
        pCommandBuffers[0]:             VkCommandBuffer = 0000012CF2FF18D0
        pCommandBuffers[1]:             VkCommandBuffer = 0000012C8274AC50
        pCommandBuffers[2]:             VkCommandBuffer = 0000012C8275C7D0
        pCommandBuffers[3]:             VkCommandBuffer = 0000012CF2FF7430
        pCommandBuffers[4]:             VkCommandBuffer = 0000012CF2FFAC40
        pCommandBuffers[5]:             VkCommandBuffer = 0000012CF2FFC440
        pCommandBuffers[6]:             VkCommandBuffer = 0000012CF2FFDC40
        pCommandBuffers[7]:             VkCommandBuffer = 0000012CF7DD6040
        pCommandBuffers[8]:             VkCommandBuffer = 0000012CF7DD84C0
        pCommandBuffers[9]:             VkCommandBuffer = 0000012CF7DD9CC0
        pCommandBuffers[10]:            VkCommandBuffer = 0000012C82790FB0
        pCommandBuffers[11]:            VkCommandBuffer = 0000012C84FB5C20
        pCommandBuffers[12]:            VkCommandBuffer = 0000012C8279B450
        pCommandBuffers[13]:            VkCommandBuffer = 0000012C84FDC0D0
        pCommandBuffers[14]:            VkCommandBuffer = 0000012C84FED8E0
        pCommandBuffers[15]:            VkCommandBuffer = 0000012C85009A20

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172C6110:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 1290721597984
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000025172C6638:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C82647D30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C82647D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    dstBuffer:                      VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]
    dstOffset:                      VkDeviceSize = 0
    size:                           VkDeviceSize = 524288
    data:                           uint32_t = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C82647D30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C82647D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = F443490000000006 [(wgpu internal) zero init buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:                       VkInstance = 0000012CF1767870
    pCreateInfo:                    const VkWin32SurfaceCreateInfoKHR* = 00000025172F93B8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)
        pNext:                          const void* = NULL
        flags:                          VkWin32SurfaceCreateFlagsKHR = 0
        hinstance:                      HINSTANCE = 00007FF6A9A30000
        hwnd:                           HWND = 0000000000420AA6
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSurface:                       VkSurfaceKHR* = EAD9370000000008

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 00000025172F9A98:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 00000025172F9AA0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 00000025172F9AA8:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 00000025172F9AB0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 0000012C85041190
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0000012C8097A5E0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0000012C8097A5E0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0000012C8097A5E8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 0000012C8097A5F0:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 0000012C8097A5F8:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 0000012C8097A600:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 00000025172F96B8:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 00000025172F96C0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 00000025172F96C8:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 00000025172F96D0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 0000012C85041190
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0000012C8097AE50
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0000012C8097AE50:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0000012C8097AE58:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 0000012C8097AE60:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 0000012C8097AE68:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 0000012C8097AE70:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000025172F8FF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000025172F8FE0
            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004
        pValues:                        const uint64_t* = 00000025172F8FE8
            pValues[0]:                     const uint64_t = 0
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 00000025172F84A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = EAD9370000000008
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 00000025172F84CC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = 0000000000000000
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = EE647E0000000009

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = EE647E0000000009
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = EE647E0000000009
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 0000012C8097BA28
        pSwapchainImages[0]:            VkImage = CFEF35000000000A
        pSwapchainImages[1]:            VkImage = EC4BEC000000000B
        pSwapchainImages[2]:            VkImage = E88693000000000C

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = EE647E0000000009
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = EE647E0000000009
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 0000012C850388D0
        pSwapchainImages[0]:            VkImage = CFEF35000000000A
        pSwapchainImages[1]:            VkImage = EC4BEC000000000B
        pSwapchainImages[2]:            VkImage = E88693000000000C

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7EA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = CAD092000000000D

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7D50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 967DD1000000000E

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7D50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = E7E6D0000000000F

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7D50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = D5B26F0000000010

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F6100:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 212764
        usage:                          VkBufferUsageFlags = 655506 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 980F360000000011

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 980F360000000011
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F5F88:
        size:                           VkDeviceSize = 212992
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 980F360000000011
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 524288

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 10957035792043606033
        pObjectName:                    const char* = "Water vertices"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F6100:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 212760
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = DCC8FD0000000012

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = DCC8FD0000000012
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F5F88:
        size:                           VkDeviceSize = 212760
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000025172F55D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = VkMemoryAllocateFlagsInfo
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 3
        pNext:                          VkMemoryAllocateFlagsInfo = 00000025172F5638:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)
            pNext:                          const void* = NULL
            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)
            deviceMask:                     uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = D175B40000000013

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    memory:                         VkDeviceMemory = D175B40000000013
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0000012C86820000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = DCC8FD0000000012
    memory:                         VkDeviceMemory = D175B40000000013
    memoryOffset:                   VkDeviceSize = 8175848

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 15909243860128104466
        pObjectName:                    const char* = "(wgpu internal) initializing unmappable buffer"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C82647D30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C82647D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 0000012C82647D68:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 980F360000000011 [Water vertices]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]
    dstBuffer:                      VkBuffer = 980F360000000011 [Water vertices]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000025172F87E8
        pRegions[0]:                    const VkBufferCopy = 00000025172F87E8:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 212760

Thread 0, Frame 0:
vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)
    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 00000025172F8260:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)
        pNext:                          const void* = NULL
        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)
        flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)
        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)
        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
        geometryCount:                  uint32_t = 1
        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 00000025172F5FA0
            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 00000025172F5FA0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)
                pNext:                          const void* = NULL
                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)
                geometry:                       VkAccelerationStructureGeometryDataKHR = 00000025172F5FB8 (Union):
                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 00000025172F5FB8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                        pNext:                          const void* = NULL
                        vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        vertexData:                     VkDeviceOrHostAddressConstKHR = 00000025172F5FD0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                        vertexStride:                   VkDeviceSize = 0
                        maxVertex:                      uint32_t = 17730
                        indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)
                        indexData:                      VkDeviceOrHostAddressConstKHR = 00000025172F5FE8 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                        transformData:                  VkDeviceOrHostAddressConstKHR = 00000025172F5FF0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 00000025172F5FB8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                        pNext:                          const void* = NULL
                        data:                           VkDeviceOrHostAddressConstKHR = 00000025172F5FC8 (Union):
                            deviceAddress:                  VkDeviceAddress = 1288490188906
                            hostAddress:                    const void* = 0000012C0000006A
                        stride:                         VkDeviceSize = 0
                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 00000025172F5FB8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                        pNext:                          const void* = NULL
                        arrayOfPointers:                VkBool32 = 106
                        data:                           VkDeviceOrHostAddressConstKHR = 00000025172F5FD0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)
        scratchData:                    VkDeviceOrHostAddressKHR = 00000025172F82A8 (Union):
            deviceAddress:                  VkDeviceAddress = 0
            hostAddress:                    void* = NULL
    pMaxPrimitiveCounts:            const uint32_t* = 00000025172F62A8
        pMaxPrimitiveCounts[0]:         const uint32_t = 17730
    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 00000025172F5DB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)
        pNext:                          const void* = NULL
        accelerationStructureSize:      VkDeviceSize = 996992
        updateScratchSize:              VkDeviceSize = 0
        buildScratchSize:               VkDeviceSize = 145664

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F7EB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 996992
        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 9FDE6B0000000014

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 9FDE6B0000000014
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F7D08:
        size:                           VkDeviceSize = 997120
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 9FDE6B0000000014
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 1048576

Thread 0, Frame 0:
vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 00000025172F8128:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)
        pNext:                          const void* = NULL
        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0
        buffer:                         VkBuffer = 9FDE6B0000000014
        offset:                         VkDeviceSize = 0
        size:                           VkDeviceSize = 996992
        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)
        deviceAddress:                  VkDeviceAddress = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pAccelerationStructure:         VkAccelerationStructureKHR* = DD3A8A0000000015

Thread 0, Frame 0:
vkGetAccelerationStructureDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 282656768:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkAccelerationStructureDeviceAddressInfoKHR* = 00000025172F83F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR (1000150002)
        pNext:                          const void* = NULL
        accelerationStructure:          VkAccelerationStructureKHR = DD3A8A0000000015

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F6100:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 2978644
        usage:                          VkBufferUsageFlags = 655506 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = D897D90000000016

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = D897D90000000016
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F5F88:
        size:                           VkDeviceSize = 2978816
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = D897D90000000016
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 4194304

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 15607181627698970646
        pObjectName:                    const char* = "Terrain vertices"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F6100:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 2978640
        usage:                          VkBufferUsageFlags = 3 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 84C0580000000017

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 84C0580000000017
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F5F88:
        size:                           VkDeviceSize = 2978640
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 84C0580000000017
    memory:                         VkDeviceMemory = D175B40000000013
    memoryOffset:                   VkDeviceSize = 5197208

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5C90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 9565742365558177815
        pObjectName:                    const char* = "(wgpu internal) initializing unmappable buffer"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C82647D30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C82647D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 0000012C82647D68:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]
    dstBuffer:                      VkBuffer = D897D90000000016 [Terrain vertices]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000025172F87E8
        pRegions[0]:                    const VkBufferCopy = 00000025172F87E8:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 2978640

Thread 0, Frame 0:
vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)
    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 00000025172F8260:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)
        pNext:                          const void* = NULL
        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)
        flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)
        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)
        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
        geometryCount:                  uint32_t = 1
        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 00000025172F5FA0
            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 00000025172F5FA0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)
                pNext:                          const void* = NULL
                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)
                geometry:                       VkAccelerationStructureGeometryDataKHR = 00000025172F5FB8 (Union):
                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 00000025172F5FB8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                        pNext:                          const void* = NULL
                        vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        vertexData:                     VkDeviceOrHostAddressConstKHR = 00000025172F5FD0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                        vertexStride:                   VkDeviceSize = 0
                        maxVertex:                      uint32_t = 106380
                        indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)
                        indexData:                      VkDeviceOrHostAddressConstKHR = 00000025172F5FE8 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                        transformData:                  VkDeviceOrHostAddressConstKHR = 00000025172F5FF0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 00000025172F5FB8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                        pNext:                          const void* = NULL
                        data:                           VkDeviceOrHostAddressConstKHR = 00000025172F5FC8 (Union):
                            deviceAddress:                  VkDeviceAddress = 1288490188906
                            hostAddress:                    const void* = 0000012C0000006A
                        stride:                         VkDeviceSize = 0
                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 00000025172F5FB8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                        pNext:                          const void* = NULL
                        arrayOfPointers:                VkBool32 = 106
                        data:                           VkDeviceOrHostAddressConstKHR = 00000025172F5FD0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)
        scratchData:                    VkDeviceOrHostAddressKHR = 00000025172F82A8 (Union):
            deviceAddress:                  VkDeviceAddress = 0
            hostAddress:                    void* = NULL
    pMaxPrimitiveCounts:            const uint32_t* = 00000025172F62A8
        pMaxPrimitiveCounts[0]:         const uint32_t = 106380
    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 00000025172F5DB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)
        pNext:                          const void* = NULL
        accelerationStructureSize:      VkDeviceSize = 5974656
        updateScratchSize:              VkDeviceSize = 0
        buildScratchSize:               VkDeviceSize = 865792

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F7EB0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 5974656
        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = D10D270000000018

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = D10D270000000018
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F7D08:
        size:                           VkDeviceSize = 5974784
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000025172F71B8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = VkMemoryAllocateFlagsInfo
        allocationSize:                 VkDeviceSize = 16777216
        memoryTypeIndex:                uint32_t = 1
        pNext:                          VkMemoryAllocateFlagsInfo = 00000025172F7218:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)
            pNext:                          const void* = NULL
            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)
            deviceMask:                     uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = 27D60E0000000019

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = D10D270000000018
    memory:                         VkDeviceMemory = 27D60E0000000019
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 00000025172F8128:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)
        pNext:                          const void* = NULL
        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0
        buffer:                         VkBuffer = D10D270000000018
        offset:                         VkDeviceSize = 0
        size:                           VkDeviceSize = 5974656
        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)
        deviceAddress:                  VkDeviceAddress = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pAccelerationStructure:         VkAccelerationStructureKHR* = 95A125000000001A

Thread 0, Frame 0:
vkGetAccelerationStructureDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 310378496:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkAccelerationStructureDeviceAddressInfoKHR* = 00000025172F83F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR (1000150002)
        pNext:                          const void* = NULL
        accelerationStructure:          VkAccelerationStructureKHR = 95A125000000001A

Thread 0, Frame 0:
vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buildType:                      VkAccelerationStructureBuildTypeKHR = VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR (1)
    pBuildInfo:                     const VkAccelerationStructureBuildGeometryInfoKHR* = 00000025172F8070:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)
        pNext:                          const void* = NULL
        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)
        flags:                          VkBuildAccelerationStructureFlagsKHR = 4 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR)
        mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)
        srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
        dstAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
        geometryCount:                  uint32_t = 1
        pGeometries:                    const VkAccelerationStructureGeometryKHR* = 00000025172F5DB0
            pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 00000025172F5DB0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)
                pNext:                          const void* = NULL
                geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_INSTANCES_KHR (2)
                geometry:                       VkAccelerationStructureGeometryDataKHR = 00000025172F5DC8 (Union):
                    triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 00000025172F5DC8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)
                        pNext:                          const void* = NULL
                        vertexFormat:                   VkFormat = VK_FORMAT_UNDEFINED (0)
                        vertexData:                     VkDeviceOrHostAddressConstKHR = 00000025172F5DE0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                        vertexStride:                   VkDeviceSize = 7305999817851800077
                        maxVertex:                      uint32_t = 1701013878
                        indexType:                      VkIndexType = UNKNOWN (538976314)
                        indexData:                      VkDeviceOrHostAddressConstKHR = 00000025172F5DF8 (Union):
                            deviceAddress:                  VkDeviceAddress = 2314885530818453536
                            hostAddress:                    const void* = 2020202020202020
                        transformData:                  VkDeviceOrHostAddressConstKHR = 00000025172F5E00 (Union):
                            deviceAddress:                  VkDeviceAddress = 2314885530818453536
                            hostAddress:                    const void* = 2020202020202020
                    aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 00000025172F5DC8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)
                        pNext:                          const void* = NULL
                        data:                           VkDeviceOrHostAddressConstKHR = 00000025172F5DD8 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                        stride:                         VkDeviceSize = 0
                    instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 00000025172F5DC8:
                        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)
                        pNext:                          const void* = NULL
                        arrayOfPointers:                VkBool32 = 0
                        data:                           VkDeviceOrHostAddressConstKHR = 00000025172F5DE0 (Union):
                            deviceAddress:                  VkDeviceAddress = 0
                            hostAddress:                    const void* = NULL
                flags:                          VkGeometryFlagsKHR = 0
        scratchData:                    VkDeviceOrHostAddressKHR = 00000025172F80B8 (Union):
            deviceAddress:                  VkDeviceAddress = 0
            hostAddress:                    void* = NULL
    pMaxPrimitiveCounts:            const uint32_t* = 00000025172F60B8
        pMaxPrimitiveCounts[0]:         const uint32_t = 2
    pSizeInfo:                      VkAccelerationStructureBuildSizesInfoKHR* = 00000025172F5BC8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR (1000150020)
        pNext:                          const void* = NULL
        accelerationStructureSize:      VkDeviceSize = 1152
        updateScratchSize:              VkDeviceSize = 0
        buildScratchSize:               VkDeviceSize = 2048

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F7CC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 1152
        usage:                          VkBufferUsageFlags = 1048576 (VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = CB1C7C000000001B

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = CB1C7C000000001B
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F7B18:
        size:                           VkDeviceSize = 1280
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = CB1C7C000000001B
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 786432

Thread 0, Frame 0:
vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkAccelerationStructureCreateInfoKHR* = 00000025172F7F38:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR (1000150017)
        pNext:                          const void* = NULL
        createFlags:                    VkAccelerationStructureCreateFlagsKHR = 0
        buffer:                         VkBuffer = CB1C7C000000001B
        offset:                         VkDeviceSize = 0
        size:                           VkDeviceSize = 1152
        type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)
        deviceAddress:                  VkDeviceAddress = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pAccelerationStructure:         VkAccelerationStructureKHR* = 2CFBA2000000001C

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F7DE0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 655362 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 908683000000001D

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 908683000000001D
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F7C68:
        size:                           VkDeviceSize = 256
        alignment:                      VkDeviceSize = 256
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 908683000000001D
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 788480

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F7970:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 10414155224364089373
        pObjectName:                    const char* = "(wgpu-core) instances_buffer"

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 00000025172F70E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 1
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0000012C85038A70
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0000012C85038A70:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR (1000150000)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = CFCDA0000000001E

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 00000025172F55A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)
        maxSets:                        uint32_t = 64
        poolSizeCount:                  uint32_t = 0
        pPoolSizes:                     const VkDescriptorPoolSize* = 00000025172F5560
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = 2E2941000000001F

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 00000025172F54A8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = 2E2941000000001F
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 00000025172F5548
            pSetLayouts[0]:                 const VkDescriptorSetLayout = CFCDA0000000001E
    pDescriptorSets:                VkDescriptorSet* = 0000012C80EC66D0
        pDescriptorSets[0]:             VkDescriptorSet = AB64DE0000000020

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    descriptorWriteCount:           uint32_t = 1
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0000012C826659B0
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0000012C826659B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = VkWriteDescriptorSetAccelerationStructureKHR
            dstSet:                         VkDescriptorSet = AB64DE0000000020
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR (1000150000)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
        pNext:                          VkWriteDescriptorSetAccelerationStructureKHR = 0000012C8097B180:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR (1000150007)
            pNext:                          const void* = NULL
            accelerationStructureCount:     uint32_t = 1
            pAccelerationStructures:        const VkAccelerationStructureKHR* = 0000012C80EC6630
                pAccelerationStructures[0]:     const VkAccelerationStructureKHR = 2CFBA2000000001C
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF6AB19B698

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkCommandPoolCreateInfo* = 00000025172F7F98:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:                          const void* = NULL
        flags:                          VkCommandPoolCreateFlags = 1 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT)
        queueFamilyIndex:               uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pCommandPool:                   VkCommandPool* = C4F3070000000021

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F64B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 1011456
        usage:                          VkBufferUsageFlags = 131104 (VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 301E6C0000000022

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 301E6C0000000022
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F6338:
        size:                           VkDeviceSize = 1011456
        alignment:                      VkDeviceSize = 16
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkMemoryAllocateInfo* = 00000025172F57E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:                          const void* = VkMemoryAllocateFlagsInfo
        allocationSize:                 VkDeviceSize = 8388608
        memoryTypeIndex:                uint32_t = 3
        pNext:                          VkMemoryAllocateFlagsInfo = 00000025172F5848:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (1000060000)
            pNext:                          const void* = NULL
            flags:                          VkMemoryAllocateFlags = 2 (VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)
            deviceMask:                     uint32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pMemory:                        VkDeviceMemory* = A7C5450000000023

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    memory:                         VkDeviceMemory = A7C5450000000023
    offset:                         VkDeviceSize = 0
    size:                           VkDeviceSize = 8388608
    flags:                          VkMemoryMapFlags = 0
    ppData:                         void** = 0000012C88220000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 301E6C0000000022
    memory:                         VkDeviceMemory = A7C5450000000023
    memoryOffset:                   VkDeviceSize = 0

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F6040:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 3467327510377660450
        pObjectName:                    const char* = "(wgpu) scratch buffer"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F64B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = B991FA0000000024

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = B991FA0000000024
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F6338:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = B991FA0000000024
    memory:                         VkDeviceMemory = A7C5450000000023
    memoryOffset:                   VkDeviceSize = 1048576

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F6040:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 13371743646546657316
        pObjectName:                    const char* = "(wgpu) instance staging buffer"

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkCommandBufferAllocateInfo* = 00000025172F66F0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:                          const void* = NULL
        commandPool:                    VkCommandPool = C4F3070000000021
        level:                          VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:             uint32_t = 16
    pCommandBuffers:                VkCommandBuffer* = 0000012C82162120
        pCommandBuffers[0]:             VkCommandBuffer = 0000012C8524BB60
        pCommandBuffers[1]:             VkCommandBuffer = 0000012C850D2F90
        pCommandBuffers[2]:             VkCommandBuffer = 0000012C850D8FD0
        pCommandBuffers[3]:             VkCommandBuffer = 0000012C850CE760
        pCommandBuffers[4]:             VkCommandBuffer = 0000012C850D77C0
        pCommandBuffers[5]:             VkCommandBuffer = 0000012C850D1780
        pCommandBuffers[6]:             VkCommandBuffer = 0000012C850D47A0
        pCommandBuffers[7]:             VkCommandBuffer = 0000012C850DA7E0
        pCommandBuffers[8]:             VkCommandBuffer = 0000012C850D5FB0
        pCommandBuffers[9]:             VkCommandBuffer = 0000012C850CFF70
        pCommandBuffers[10]:            VkCommandBuffer = 0000012C850DBFF0
        pCommandBuffers[11]:            VkCommandBuffer = 0000012C85077770
        pCommandBuffers[12]:            VkCommandBuffer = 0000012C85072F40
        pCommandBuffers[13]:            VkCommandBuffer = 0000012C8506FF20
        pCommandBuffers[14]:            VkCommandBuffer = 0000012C85071730
        pCommandBuffers[15]:            VkCommandBuffer = 0000012C85074750

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F62D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 1290722035536
        pObjectName:                    const char* = ""

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000025172F67F8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 1
    pMemoryBarriers:                const VkMemoryBarrier* = 00000025172F6878
        pMemoryBarriers[0]:             const VkMemoryBarrier = 00000025172F6878:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 2097152 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR)
            dstAccessMask:                  VkAccessFlags = 4194304 (VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF6AB19B698
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB19B698

Thread 0, Frame 0:
vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 282132480:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkBufferDeviceAddressInfo* = 00000025172F49D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 980F360000000011 [Water vertices]

Thread 0, Frame 0:
vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 329318400:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkBufferDeviceAddressInfo* = 00000025172F65B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

Thread 0, Frame 0:
vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 285802496:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkBufferDeviceAddressInfo* = 00000025172F49D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]

Thread 0, Frame 0:
vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 329318400:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkBufferDeviceAddressInfo* = 00000025172F65B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

Thread 0, Frame 0:
vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    infoCount:                      uint32_t = 2
    pInfos:                         const VkAccelerationStructureBuildGeometryInfoKHR* = 00000025172F5128
        pInfos[0]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 00000025172F5128:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)
            pNext:                          const void* = NULL
            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)
            flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)
            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)
            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
            dstAccelerationStructure:       VkAccelerationStructureKHR = DD3A8A0000000015
            geometryCount:                  uint32_t = 1
            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 00000025172F4DE0
                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 00000025172F4DE0:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)
                    pNext:                          const void* = NULL
                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)
                    geometry:                       VkAccelerationStructureGeometryDataKHR = 00000025172F4DF8 (Union):
                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 00000025172F4DF8:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                            pNext:                          const void* = NULL
                            vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                            vertexData:                     VkDeviceOrHostAddressConstKHR = 00000025172F4E10 (Union):
                                deviceAddress:                  VkDeviceAddress = 282132480
                                hostAddress:                    const void* = 0000000010D10000
                            vertexStride:                   VkDeviceSize = 12
                            maxVertex:                      uint32_t = 17730
                            indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)
                            indexData:                      VkDeviceOrHostAddressConstKHR = 00000025172F4E28 (Union):
                                deviceAddress:                  VkDeviceAddress = 0
                                hostAddress:                    const void* = NULL
                            transformData:                  VkDeviceOrHostAddressConstKHR = 00000025172F4E30 (Union):
                                deviceAddress:                  VkDeviceAddress = 0
                                hostAddress:                    const void* = NULL
                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 00000025172F4DF8:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                            pNext:                          const void* = NULL
                            data:                           VkDeviceOrHostAddressConstKHR = 00000025172F4E08 (Union):
                                deviceAddress:                  VkDeviceAddress = 1288490188906
                                hostAddress:                    const void* = 0000012C0000006A
                            stride:                         VkDeviceSize = 282132480
                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 00000025172F4DF8:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                            pNext:                          const void* = NULL
                            arrayOfPointers:                VkBool32 = 106
                            data:                           VkDeviceOrHostAddressConstKHR = 00000025172F4E10 (Union):
                                deviceAddress:                  VkDeviceAddress = 282132480
                                hostAddress:                    const void* = 0000000010D10000
                    flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)
            scratchData:                    VkDeviceOrHostAddressKHR = 00000025172F5170 (Union):
                deviceAddress:                  VkDeviceAddress = 329318400
                hostAddress:                    void* = 0000000013A10000
        pInfos[1]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 00000025172F5178:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)
            pNext:                          const void* = NULL
            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR (1)
            flags:                          VkBuildAccelerationStructureFlagsKHR = 8 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR)
            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)
            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
            dstAccelerationStructure:       VkAccelerationStructureKHR = 95A125000000001A
            geometryCount:                  uint32_t = 1
            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 00000025172F4E48
                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 00000025172F4E48:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)
                    pNext:                          const void* = NULL
                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_TRIANGLES_KHR (0)
                    geometry:                       VkAccelerationStructureGeometryDataKHR = 00000025172F4E60 (Union):
                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 00000025172F4E60:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                            pNext:                          const void* = NULL
                            vertexFormat:                   VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                            vertexData:                     VkDeviceOrHostAddressConstKHR = 00000025172F4E78 (Union):
                                deviceAddress:                  VkDeviceAddress = 285802496
                                hostAddress:                    const void* = 0000000011090000
                            vertexStride:                   VkDeviceSize = 28
                            maxVertex:                      uint32_t = 106380
                            indexType:                      VkIndexType = VK_INDEX_TYPE_UINT16 (0)
                            indexData:                      VkDeviceOrHostAddressConstKHR = 00000025172F4E90 (Union):
                                deviceAddress:                  VkDeviceAddress = 0
                                hostAddress:                    const void* = NULL
                            transformData:                  VkDeviceOrHostAddressConstKHR = 00000025172F4E98 (Union):
                                deviceAddress:                  VkDeviceAddress = 0
                                hostAddress:                    const void* = NULL
                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 00000025172F4E60:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                            pNext:                          const void* = NULL
                            data:                           VkDeviceOrHostAddressConstKHR = 00000025172F4E70 (Union):
                                deviceAddress:                  VkDeviceAddress = 1288490188906
                                hostAddress:                    const void* = 0000012C0000006A
                            stride:                         VkDeviceSize = 285802496
                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 00000025172F4E60:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR (1000150005)
                            pNext:                          const void* = NULL
                            arrayOfPointers:                VkBool32 = 106
                            data:                           VkDeviceOrHostAddressConstKHR = 00000025172F4E78 (Union):
                                deviceAddress:                  VkDeviceAddress = 285802496
                                hostAddress:                    const void* = 0000000011090000
                    flags:                          VkGeometryFlagsKHR = 1 (VK_GEOMETRY_OPAQUE_BIT_KHR)
            scratchData:                    VkDeviceOrHostAddressKHR = 00000025172F51C0 (Union):
                deviceAddress:                  VkDeviceAddress = 329464064
                hostAddress:                    void* = 0000000013A33900

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C826484B0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C826484B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcStageMask:                   VkPipelineStageFlags = 33556617 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 1
    pMemoryBarriers:                const VkMemoryBarrier* = 00000025172F6878
        pMemoryBarriers[0]:             const VkMemoryBarrier = 00000025172F6878:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF6AB19B698
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB19B698

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C826484B0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C826484B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcBuffer:                      VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]
    dstBuffer:                      VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000025172F65C8
        pRegions[0]:                    const VkBufferCopy = 00000025172F65C8:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 128

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 1
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C826484B0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C826484B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 282396672:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkBufferDeviceAddressInfo* = 00000025172F49D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 908683000000001D [(wgpu-core) instances_buffer]

Thread 0, Frame 0:
vkGetBufferDeviceAddressKHR(device, pInfo) returns VkDeviceAddress 329318400:
    device:                         VkDevice = 0000012CF8401FC0
    pInfo:                          const VkBufferDeviceAddressInfo* = 00000025172F65B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO (1000244001)
        pNext:                          const void* = NULL
        buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]

Thread 0, Frame 0:
vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    infoCount:                      uint32_t = 1
    pInfos:                         const VkAccelerationStructureBuildGeometryInfoKHR* = 00000025172F5128
        pInfos[0]:                      const VkAccelerationStructureBuildGeometryInfoKHR = 00000025172F5128:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR (1000150000)
            pNext:                          const void* = NULL
            type:                           VkAccelerationStructureTypeKHR = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR (0)
            flags:                          VkBuildAccelerationStructureFlagsKHR = 4 (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR)
            mode:                           VkBuildAccelerationStructureModeKHR = VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR (0)
            srcAccelerationStructure:       VkAccelerationStructureKHR = 0000000000000000
            dstAccelerationStructure:       VkAccelerationStructureKHR = 2CFBA2000000001C
            geometryCount:                  uint32_t = 1
            pGeometries:                    const VkAccelerationStructureGeometryKHR* = 00000025172F4DE0
                pGeometries[0]:                 const VkAccelerationStructureGeometryKHR = 00000025172F4DE0:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR (1000150006)
                    pNext:                          const void* = NULL
                    geometryType:                   VkGeometryTypeKHR = VK_GEOMETRY_TYPE_INSTANCES_KHR (2)
                    geometry:                       VkAccelerationStructureGeometryDataKHR = 00000025172F4DF8 (Union):
                        triangles:                      VkAccelerationStructureGeometryTrianglesDataKHR = 00000025172F4DF8:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)
                            pNext:                          const void* = NULL
                            vertexFormat:                   VkFormat = VK_FORMAT_UNDEFINED (0)
                            vertexData:                     VkDeviceOrHostAddressConstKHR = 00000025172F4E10 (Union):
                                deviceAddress:                  VkDeviceAddress = 282396672
                                hostAddress:                    const void* = 0000000010D50800
                            vertexStride:                   VkDeviceSize = 5585680154816
                            maxVertex:                      uint32_t = 388978960
                            indexType:                      VkIndexType = UNKNOWN (37)
                            indexData:                      VkDeviceOrHostAddressConstKHR = 00000025172F4E28 (Union):
                                deviceAddress:                  VkDeviceAddress = 1292566992944
                                hostAddress:                    const void* = 0000012CF2FF1830
                            transformData:                  VkDeviceOrHostAddressConstKHR = 00000025172F4E30 (Union):
                                deviceAddress:                  VkDeviceAddress = 159302768688
                                hostAddress:                    const void* = 00000025172F5830
                        aabbs:                          VkAccelerationStructureGeometryAabbsDataKHR = 00000025172F4DF8:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)
                            pNext:                          const void* = NULL
                            data:                           VkDeviceOrHostAddressConstKHR = 00000025172F4E08 (Union):
                                deviceAddress:                  VkDeviceAddress = 158913789952
                                hostAddress:                    const void* = 0000002500000000
                            stride:                         VkDeviceSize = 282396672
                        instances:                      VkAccelerationStructureGeometryInstancesDataKHR = 00000025172F4DF8:
                            sType:                          VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR (1000150004)
                            pNext:                          const void* = NULL
                            arrayOfPointers:                VkBool32 = 0
                            data:                           VkDeviceOrHostAddressConstKHR = 00000025172F4E10 (Union):
                                deviceAddress:                  VkDeviceAddress = 282396672
                                hostAddress:                    const void* = 0000000010D50800
                    flags:                          VkGeometryFlagsKHR = 0
            scratchData:                    VkDeviceOrHostAddressKHR = 00000025172F5170 (Union):
                deviceAddress:                  VkDeviceAddress = 329318400
                hostAddress:                    void* = 0000000013A10000

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []
    srcStageMask:                   VkPipelineStageFlags = 33554433 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dstStageMask:                   VkPipelineStageFlags = 10376 (VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 1
    pMemoryBarriers:                const VkMemoryBarrier* = 00000025172F6878
        pMemoryBarriers[0]:             const VkMemoryBarrier = 00000025172F6878:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER (46)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4194304 (VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            dstAccessMask:                  VkAccessFlags = 2097152 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR)
    bufferMemoryBarrierCount:       uint32_t = 0
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 00007FF6AB19B698
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB19B698

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C85074750 []

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F4560:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 1290722023216
        pObjectName:                    const char* = "(wgpu internal) Transit"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C85071730 [(wgpu internal) Transit]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000025172F4A88:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C85071730 [(wgpu internal) Transit]
    srcStageMask:                   VkPipelineStageFlags = 4097 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask:                   VkPipelineStageFlags = 33562624 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C826484B0
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C826484B0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 980F360000000011 [Water vertices]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 0000012C826484E8:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 6291456 (VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = D897D90000000016 [Terrain vertices]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C85071730 [(wgpu internal) Transit]

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                          VkQueue = 0000012CF83AB540
    submitCount:                    uint32_t = 1
    pSubmits:                       const VkSubmitInfo* = 00000025172F49C0
        pSubmits[0]:                    const VkSubmitInfo = 00000025172F49C0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:                          const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:             uint32_t = 0
            pWaitSemaphores:                const VkSemaphore* = 0000000000000008
            pWaitDstStageMask:              const VkPipelineStageFlags* = 0000000000000004
            commandBufferCount:             uint32_t = 3
            pCommandBuffers:                const VkCommandBuffer* = 0000012C85038AF0
                pCommandBuffers[0]:             const VkCommandBuffer = 0000012C85009A20 [(wgpu internal) PendingWrites]
                pCommandBuffers[1]:             const VkCommandBuffer = 0000012C85071730 [(wgpu internal) Transit]
                pCommandBuffers[2]:             const VkCommandBuffer = 0000012C85074750 []
            signalSemaphoreCount:           uint32_t = 2
            pSignalSemaphores:              const VkSemaphore* = 00000025172F45F0
                pSignalSemaphores[0]:           const VkSemaphore = FAB64D0000000002
                pSignalSemaphores[1]:           const VkSemaphore = F56C9B0000000004
        pNext:                          VkTimelineSemaphoreSubmitInfo = 00000025172F4890:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:                          const void* = NULL
            waitSemaphoreValueCount:        uint32_t = 0
            pWaitSemaphoreValues:           const uint64_t* = NULL
            signalSemaphoreValueCount:      uint32_t = 2
            pSignalSemaphoreValues:         const uint64_t* = 00000025172F4608
                pSignalSemaphoreValues[0]:      const uint64_t = 18446744073709551615
                pSignalSemaphoreValues[1]:      const uint64_t = 1
    fence:                          VkFence = 0000000000000000

Thread 0, Frame 0:
vkGetSemaphoreCounterValue(device, semaphore, pValue) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = F56C9B0000000004
    pValue:                         uint64_t* = 0

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkDescriptorSetLayoutCreateInfo* = 00000025172F70E8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:                   uint32_t = 3
        pBindings:                      const VkDescriptorSetLayoutBinding* = 0000012C826655A0
            pBindings[0]:                   const VkDescriptorSetLayoutBinding = 0000012C826655A0:
                binding:                        uint32_t = 0
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[1]:                   const VkDescriptorSetLayoutBinding = 0000012C826655B8:
                binding:                        uint32_t = 1
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = UNUSED
            pBindings[2]:                   const VkDescriptorSetLayoutBinding = 0000012C826655D0:
                binding:                        uint32_t = 2
                descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:                uint32_t = 1
                stageFlags:                     VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers:             const VkSampler* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSetLayout:                     VkDescriptorSetLayout* = 3A6CBB0000000025

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F62D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 18 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = A2EB680000000026

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = A2EB680000000026
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F6158:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 64
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = A2EB680000000026
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 789504

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5E60:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 11739591202880618534
        pObjectName:                    const char* = "Water Uniforms"

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F7CA0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = B097C90000000027

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = B097C90000000027
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F7B28:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = B097C90000000027
    memory:                         VkDeviceMemory = D175B40000000013
    memoryOffset:                   VkDeviceSize = 5197080

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F7830:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 12724860273995808807
        pObjectName:                    const char* = "(wgpu internal) Staging"

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F7AC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_COMMAND_BUFFER (6)
        objectHandle:                   uint64_t = 1290721482976
        pObjectName:                    const char* = "(wgpu internal) PendingWrites"

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:                  VkCommandBuffer = 0000012C84FED8E0 [(wgpu internal) PendingWrites]
    pBeginInfo:                     const VkCommandBufferBeginInfo* = 00000025172F7FE8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:                          const void* = NULL
        flags:                          VkCommandBufferUsageFlags = 1 (VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT)
        pInheritanceInfo:               const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C84FED8E0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 16385 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C82647D30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C82647D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = B097C90000000027 [(wgpu internal) Staging]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 0000012C82647D68:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C84FED8E0 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = B097C90000000027 [(wgpu internal) Staging]
    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000025172F7D98
        pRegions[0]:                    const VkBufferCopy = 00000025172F7D98:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 128

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkImageCreateInfo* = 00000025172F55E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:                         VkExtent3D = 00000025172F55FC:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 3FBCD60000000028

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    image:                          VkImage = 3FBCD60000000028
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F5328:
        size:                           VkDeviceSize = 2048000
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    image:                          VkImage = 3FBCD60000000028
    memory:                         VkDeviceMemory = CB3EE80000000007
    memoryOffset:                   VkDeviceSize = 2097152

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5030:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 4592781015499407400
        pObjectName:                    const char* = "Depth Buffer"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000025172F5A68:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 3FBCD60000000028 [Depth Buffer]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 00000025172F5A90:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000025172F5AA0:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000025172F5C70:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = B9181F0000000029

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F5610:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 13337444381318185001
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSamplerCreateInfo* = 00000025172F8100:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:                          const void* = NULL
        flags:                          VkSamplerCreateFlags = 0
        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)
        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)
        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)
        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        mipLodBias:                     float = 0
        anisotropyEnable:               VkBool32 = 0
        maxAnisotropy:                  float = 0
        compareEnable:                  VkBool32 = 0
        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
        minLod:                         float = 0
        maxLod:                         float = 32
        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)
        unnormalizedCoordinates:        VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSampler:                       VkSampler* = BA7514000000002A

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F7CF0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)
        objectHandle:                   uint64_t = 13435667053562298410
        pObjectName:                    const char* = "Depth Sampler"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000025172F75D8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 3FBCD60000000028 [Depth Buffer]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 00000025172F7600:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000025172F7610:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000025172F77E0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 02E2CD000000002B

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkDescriptorPoolCreateInfo* = 00000025172F4EB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:                          const void* = NULL
        flags:                          VkDescriptorPoolCreateFlags = 1 (VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT)
        maxSets:                        uint32_t = 64
        poolSizeCount:                  uint32_t = 3
        pPoolSizes:                     const VkDescriptorPoolSize* = 00000025172F4E70
            pPoolSizes[0]:                  const VkDescriptorPoolSize = 00000025172F4E70:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:                uint32_t = 64
            pPoolSizes[1]:                  const VkDescriptorPoolSize = 00000025172F4E78:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:                uint32_t = 64
            pPoolSizes[2]:                  const VkDescriptorPoolSize = 00000025172F4E80:
                type:                           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:                uint32_t = 64
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pDescriptorPool:                VkDescriptorPool* = B12FB2000000002C

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 00000025172F4DB8:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = B12FB2000000002C
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 00000025172F4E58
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025
    pDescriptorSets:                VkDescriptorSet* = 0000012C80EC66D0
        pDescriptorSets[0]:             VkDescriptorSet = A43473000000002D

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F54E0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)
        objectHandle:                   uint64_t = 11832208564846329901
        pObjectName:                    const char* = "Water Bind Group"

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    descriptorWriteCount:           uint32_t = 3
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0000012C8524B550
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0000012C8524B550:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0000012C85039450
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0000012C85039450:
                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 18446744073709551615
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 0000012C8524B590:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo:                     const VkDescriptorImageInfo* = 0000012C85038FB0
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0000012C85038FB0:
                    sampler:                        VkSampler = 0000000000000000
                    imageView:                      VkImageView = 02E2CD000000002B
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 0000012C8524B5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = A43473000000002D [Water Bind Group]
            dstBinding:                     uint32_t = 2
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo:                     const VkDescriptorImageInfo* = 0000012C850393F0
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0000012C850393F0:
                    sampler:                        VkSampler = BA7514000000002A [Depth Sampler]
                    imageView:                      VkImageView = 0000000000000000
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF6AB19B698

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkPipelineLayoutCreateInfo* = 00000025172F8368:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:                          const void* = NULL
        flags:                          VkPipelineLayoutCreateFlags = 0
        setLayoutCount:                 uint32_t = 2
        pSetLayouts:                    const VkDescriptorSetLayout* = 0000012C853284F0
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025
            pSetLayouts[1]:                 const VkDescriptorSetLayout = CFCDA0000000001E
        pushConstantRangeCount:         uint32_t = 0
        pPushConstantRanges:            const VkPushConstantRange* = 0000000000000004
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelineLayout:                VkPipelineLayout* = 0980B0000000002E

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000025172F1C70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 8464
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = 4B7DF1000000002F

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkShaderModuleCreateInfo* = 00000025172F1C70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:                          const void* = NULL
        flags:                          VkShaderModuleCreateFlags = 0
        codeSize:                       size_t = 11436
        pCode:                          const uint32_t* = SHADER DATA
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pShaderModule:                  VkShaderModule* = A21A4E0000000030

Thread 0, Frame 0:
vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkRenderPassCreateInfo* = 00000025172F1E50:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (38)
        pNext:                          const void* = NULL
        flags:                          VkRenderPassCreateFlags = 0
        attachmentCount:                uint32_t = 1
        pAttachments:                   const VkAttachmentDescription* = 0000012C85046070
            pAttachments[0]:                const VkAttachmentDescription = 0000012C85046070:
                flags:                          VkAttachmentDescriptionFlags = 0
                format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
                samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                loadOp:                         VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:                        VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                stencilLoadOp:                  VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                stencilStoreOp:                 VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                finalLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
        subpassCount:                   uint32_t = 1
        pSubpasses:                     const VkSubpassDescription* = 00000025172F1BB0
            pSubpasses[0]:                  const VkSubpassDescription = 00000025172F1BB0:
                flags:                          VkSubpassDescriptionFlags = 0
                pipelineBindPoint:              VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
                inputAttachmentCount:           uint32_t = 0
                pInputAttachments:              const VkAttachmentReference* = NULL
                colorAttachmentCount:           uint32_t = 1
                pColorAttachments:              const VkAttachmentReference* = 0000012CF1980920
                    pColorAttachments[0]:           const VkAttachmentReference = 0000012CF1980920:
                        attachment:                     uint32_t = 0
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                pResolveAttachments:            const VkAttachmentReference* = 0000012C80EC5C80
                    pResolveAttachments[0]:         const VkAttachmentReference = 0000012C80EC5C80:
                        attachment:                     uint32_t = 4294967295
                        layout:                         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                pDepthStencilAttachment:        const VkAttachmentReference* = NULL
                preserveAttachmentCount:        uint32_t = 0
                pPreserveAttachments:           const uint32_t* = NULL
        dependencyCount:                uint32_t = 0
        pDependencies:                  const VkSubpassDependency* = NULL
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pRenderPass:                    VkRenderPass* = 0EA7170000000031

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 00000025172F3D20
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 00000025172F3D20:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 00000025172F2738
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 00000025172F2738:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = 4B7DF1000000002F
                    pName:                          const char* = "vs_main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 00000025172F2768:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = A21A4E0000000030
                    pName:                          const char* = "fs_main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 00000025172F2860:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 0
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = 0000000000000004
                vertexAttributeDescriptionCount: uint32_t = 0
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = 0000000000000004
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 00000025172F2920:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 00000025172F35E8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = UNUSED
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = UNUSED
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 00000025172F2D80:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 0 (VK_CULL_MODE_NONE)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 00000025172F36E0:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = 00000025172F36D8
                    pSampleMask[0]:                 const VkSampleMask = 4294967295
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 00000025172F3028:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 0
                depthWriteEnable:               VkBool32 = 0
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_NEVER (0)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 00000025172F3050:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 00000025172F306C:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 0
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 00000025172F3AE8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_CLEAR (0)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 0000012C853191A0
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 0000012C853191A0:
                        blendEnable:                    VkBool32 = 0
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 00000025172F3B10
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = 00000025172F3B90:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:              uint32_t = 4
                pDynamicStates:                 const VkDynamicState* = 00000025172F2520
                    pDynamicStates[0]:              const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]:              const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]:              const VkDynamicState = VK_DYNAMIC_STATE_BLEND_CONSTANTS (4)
                    pDynamicStates[3]:              const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:                         VkPipelineLayout = 0980B0000000002E
            renderPass:                     VkRenderPass = 0EA7170000000031
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0000012C80EC5A70
        pPipelines[0]:                  VkPipeline = 4FAC1C0000000032

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    shaderModule:                   VkShaderModule = 4B7DF1000000002F
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    shaderModule:                   VkShaderModule = A21A4E0000000030
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 00000025172F93D8:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 00000025172F93E0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 00000025172F93E8:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 00000025172F93F0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 0000012C85041350
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0000012C85318AE0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0000012C85318AE0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0000012C85318AE8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 0000012C85318AF0:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 0000012C85318AF8:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 0000012C85318B00:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_TIMEOUT (2):
    device:                         VkDevice = 0000012CF8401FC0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000025172F8D10:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000025172F8D00
            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004
        pValues:                        const uint64_t* = 00000025172F8D08
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    commandPool:                    VkCommandPool = C4F3070000000021
    flags:                          VkCommandPoolResetFlags = 0

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = DCC8FD0000000012 [(wgpu internal) initializing unmappable buffer]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 84C0580000000017 [(wgpu internal) initializing unmappable buffer]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = B991FA0000000024 [(wgpu) instance staging buffer]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 301E6C0000000022 [(wgpu) scratch buffer]
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkFreeMemory(device, memory, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    memory:                         VkDeviceMemory = A7C5450000000023
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDeviceWaitIdle(device) returns VkResult VK_ERROR_DEVICE_LOST (-4):
    device:                         VkDevice = 0000012CF8401FC0

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = CAD092000000000D
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = 967DD1000000000E
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = E7E6D0000000000F
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = D5B26F0000000010
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSwapchainCreateInfoKHR* = 00000025172F81C0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:                          const void* = NULL
        flags:                          VkSwapchainCreateFlagsKHR = 0
        surface:                        VkSurfaceKHR = EAD9370000000008
        minImageCount:                  uint32_t = 3
        imageFormat:                    VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
        imageColorSpace:                VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:                    VkExtent2D = 00000025172F81EC:
            width:                          uint32_t = 1424
            height:                         uint32_t = 714
        imageArrayLayers:               uint32_t = 1
        imageUsage:                     VkImageUsageFlags = 17 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:               VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        preTransform:                   VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha:                 VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:                    VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        clipped:                        VkBool32 = 1
        oldSwapchain:                   VkSwapchainKHR = EE647E0000000009
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSwapchain:                     VkSwapchainKHR* = A808D50000000033

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = A808D50000000033
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = A808D50000000033
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 0000012C85319448
        pSwapchainImages[0]:            VkImage = 2B424A0000000034
        pSwapchainImages[1]:            VkImage = 4295AB0000000035
        pSwapchainImages[2]:            VkImage = 9638F80000000036

Thread 0, Frame 0:
vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = EE647E0000000009
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = A808D50000000033
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = NULL

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = A808D50000000033
    pSwapchainImageCount:           uint32_t* = 3
    pSwapchainImages:               VkImage* = 0000012C85040ED0
        pSwapchainImages[0]:            VkImage = 2B424A0000000034
        pSwapchainImages[1]:            VkImage = 4295AB0000000035
        pSwapchainImages[2]:            VkImage = 9638F80000000036

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7BC0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 2723BA0000000037

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7A70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 59F7450000000038

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7A70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 944A2C0000000039

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSemaphoreCreateInfo* = 00000025172F7A70:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreCreateFlags = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSemaphore:                     VkSemaphore* = 210D07000000003A

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkBufferCreateInfo* = 00000025172F8D40:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:                          const void* = NULL
        flags:                          VkBufferCreateFlags = 0
        size:                           VkDeviceSize = 128
        usage:                          VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pBuffer:                        VkBuffer* = 5EB05E000000003B

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 5EB05E000000003B
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F8BC8:
        size:                           VkDeviceSize = 128
        alignment:                      VkDeviceSize = 4
        memoryTypeBits:                 uint32_t = 59

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    buffer:                         VkBuffer = 5EB05E000000003B
    memory:                         VkDeviceMemory = D175B40000000013
    memoryOffset:                   VkDeviceSize = 8388480

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F88D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_BUFFER (9)
        objectHandle:                   uint64_t = 6823056789559312443
        pObjectName:                    const char* = "(wgpu internal) Staging"

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C84FED8E0 [(wgpu internal) PendingWrites]
    srcStageMask:                   VkPipelineStageFlags = 20481 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_HOST_BIT)
    dstStageMask:                   VkPipelineStageFlags = 12288 (VK_PIPELINE_STAGE_TRANSFER_BIT | VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags:                VkDependencyFlags = 0
    memoryBarrierCount:             uint32_t = 0
    pMemoryBarriers:                const VkMemoryBarrier* = 00007FF6AB174088
    bufferMemoryBarrierCount:       uint32_t = 2
    pBufferMemoryBarriers:          const VkBufferMemoryBarrier* = 0000012C82647D30
        pBufferMemoryBarriers[0]:       const VkBufferMemoryBarrier = 0000012C82647D30:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 16384 (VK_ACCESS_HOST_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = 5EB05E000000003B [(wgpu internal) Staging]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
        pBufferMemoryBarriers[1]:       const VkBufferMemoryBarrier = 0000012C82647D68:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:                          const void* = NULL
            srcAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:                  VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            srcQueueFamilyIndex:            uint32_t = 0
            dstQueueFamilyIndex:            uint32_t = 0
            buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]
            offset:                         VkDeviceSize = 0
            size:                           VkDeviceSize = 18446744073709551615
    imageMemoryBarrierCount:        uint32_t = 0
    pImageMemoryBarriers:           const VkImageMemoryBarrier* = 00007FF6AB174088

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:                  VkCommandBuffer = 0000012C84FED8E0 [(wgpu internal) PendingWrites]
    srcBuffer:                      VkBuffer = 5EB05E000000003B [(wgpu internal) Staging]
    dstBuffer:                      VkBuffer = A2EB680000000026 [Water Uniforms]
    regionCount:                    uint32_t = 1
    pRegions:                       const VkBufferCopy* = 00000025172F8E38
        pRegions[0]:                    const VkBufferCopy = 00000025172F8E38:
            srcOffset:                      VkDeviceSize = 0
            dstOffset:                      VkDeviceSize = 0
            size:                           VkDeviceSize = 128

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkImageCreateInfo* = 00000025172F6680:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:                          const void* = NULL
        flags:                          VkImageCreateFlags = 0
        imageType:                      VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:                         VkExtent3D = 00000025172F669C:
            width:                          uint32_t = 1424
            height:                         uint32_t = 714
            depth:                          uint32_t = 1
        mipLevels:                      uint32_t = 1
        arrayLayers:                    uint32_t = 1
        samples:                        VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:                         VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:                          VkImageUsageFlags = 38 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:                    VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:          uint32_t = 0
        pQueueFamilyIndices:            const uint32_t* = UNUSED
        initialLayout:                  VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pImage:                         VkImage* = 9F9B41000000003C

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    image:                          VkImage = 9F9B41000000003C
    pMemoryRequirements:            VkMemoryRequirements* = 00000025172F63C8:
        size:                           VkDeviceSize = 4374528
        alignment:                      VkDeviceSize = 1024
        memoryTypeBits:                 uint32_t = 3

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    image:                          VkImage = 9F9B41000000003C
    memory:                         VkDeviceMemory = 27D60E0000000019
    memoryOffset:                   VkDeviceSize = 8388608

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F60D0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE (10)
        objectHandle:                   uint64_t = 11500857541676499004
        pObjectName:                    const char* = "Depth Buffer"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000025172F6B08:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 9F9B41000000003C [Depth Buffer]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 00000025172F6B30:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000025172F6B40:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000025172F6D10:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 59FFE0000000003D

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F66B0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_IMAGE_VIEW (14)
        objectHandle:                   uint64_t = 6485148279041425469
        pObjectName:                    const char* = "(wgpu internal) clear texture view"

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkSamplerCreateInfo* = 00000025172F91A0:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:                          const void* = NULL
        flags:                          VkSamplerCreateFlags = 0
        magFilter:                      VkFilter = VK_FILTER_NEAREST (0)
        minFilter:                      VkFilter = VK_FILTER_NEAREST (0)
        mipmapMode:                     VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST (0)
        addressModeU:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeV:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeW:                   VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        mipLodBias:                     float = 0
        anisotropyEnable:               VkBool32 = 0
        maxAnisotropy:                  float = 0
        compareEnable:                  VkBool32 = 0
        compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
        minLod:                         float = 0
        maxLod:                         float = 32
        borderColor:                    VkBorderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK (0)
        unnormalizedCoordinates:        VkBool32 = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pSampler:                       VkSampler* = 5C5283000000003E

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F8D90:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_SAMPLER (21)
        objectHandle:                   uint64_t = 6652523635602882622
        pObjectName:                    const char* = "Depth Sampler"

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pCreateInfo:                    const VkImageViewCreateInfo* = 00000025172F8678:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:                          const void* = VkImageViewUsageCreateInfo
        flags:                          VkImageViewCreateFlags = 0
        image:                          VkImage = 9F9B41000000003C [Depth Buffer]
        viewType:                       VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                         VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:                     VkComponentMapping = 00000025172F86A0:
            r:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:                              VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange:               VkImageSubresourceRange = 00000025172F86B0:
            aspectMask:                     VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:                   uint32_t = 0
            levelCount:                     uint32_t = 1
            baseArrayLayer:                 uint32_t = 0
            layerCount:                     uint32_t = 1
        pNext:                          VkImageViewUsageCreateInfo = 00000025172F8880:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (1000117002)
            pNext:                          const void* = NULL
            usage:                          VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pView:                          VkImageView* = 808562000000003F

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pAllocateInfo:                  const VkDescriptorSetAllocateInfo* = 00000025172F5E58:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:                          const void* = NULL
        descriptorPool:                 VkDescriptorPool = B12FB2000000002C
        descriptorSetCount:             uint32_t = 1
        pSetLayouts:                    const VkDescriptorSetLayout* = 00000025172F5EF8
            pSetLayouts[0]:                 const VkDescriptorSetLayout = 3A6CBB0000000025
    pDescriptorSets:                VkDescriptorSet* = 0000012CF1980920
        pDescriptorSets[0]:             VkDescriptorSet = 56C9BD0000000040

Thread 0, Frame 0:
vkSetDebugUtilsObjectNameEXT(device, pNameInfo) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 0000012CF8401FC0
    pNameInfo:                      const VkDebugUtilsObjectNameInfoEXT* = 00000025172F6580:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (1000128000)
        pNext:                          const void* = NULL
        objectType:                     VkObjectType = VK_OBJECT_TYPE_DESCRIPTOR_SET (23)
        objectHandle:                   uint64_t = 6253737365278294080
        pObjectName:                    const char* = "Water Bind Group"

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    descriptorWriteCount:           uint32_t = 3
    pDescriptorWrites:              const VkWriteDescriptorSet* = 0000012C8524B550
        pDescriptorWrites[0]:           const VkWriteDescriptorSet = 0000012C8524B550:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]
            dstBinding:                     uint32_t = 0
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo:                     const VkDescriptorImageInfo* = UNUSED
            pBufferInfo:                    const VkDescriptorBufferInfo* = 0000012C853283B0
                pBufferInfo[0]:                 const VkDescriptorBufferInfo = 0000012C853283B0:
                    buffer:                         VkBuffer = A2EB680000000026 [Water Uniforms]
                    offset:                         VkDeviceSize = 0
                    range:                          VkDeviceSize = 18446744073709551615
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[1]:           const VkWriteDescriptorSet = 0000012C8524B590:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]
            dstBinding:                     uint32_t = 1
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo:                     const VkDescriptorImageInfo* = 0000012C853284F0
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0000012C853284F0:
                    sampler:                        VkSampler = 0000000000000000
                    imageView:                      VkImageView = 808562000000003F
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL (4)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
        pDescriptorWrites[2]:           const VkWriteDescriptorSet = 0000012C8524B5D0:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:                          const void* = NULL
            dstSet:                         VkDescriptorSet = 56C9BD0000000040 [Water Bind Group]
            dstBinding:                     uint32_t = 2
            dstArrayElement:                uint32_t = 0
            descriptorCount:                uint32_t = 1
            descriptorType:                 VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo:                     const VkDescriptorImageInfo* = 0000012C85328410
                pImageInfo[0]:                  const VkDescriptorImageInfo = 0000012C85328410:
                    sampler:                        VkSampler = 5C5283000000003E [Depth Sampler]
                    imageView:                      VkImageView = 0000000000000000
                    imageLayout:                    VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo:                    const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView:               const VkBufferView* = UNUSED
    descriptorCopyCount:            uint32_t = 0
    pDescriptorCopies:              const VkCopyDescriptorSet* = 00007FF6AB19B698

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    queueFamilyIndex:               uint32_t = 0
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSupported:                     VkBool32* = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceCapabilities:           VkSurfaceCapabilitiesKHR* = 00000025172F93D8:
        minImageCount:                  uint32_t = 2
        maxImageCount:                  uint32_t = 8
        currentExtent:                  VkExtent2D = 00000025172F93E0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        minImageExtent:                 VkExtent2D = 00000025172F93E8:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageExtent:                 VkExtent2D = 00000025172F93F0:
            width:                          uint32_t = 800
            height:                         uint32_t = 600
        maxImageArrayLayers:            uint32_t = 1
        supportedTransforms:            VkSurfaceTransformFlagsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        currentTransform:               VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        supportedCompositeAlpha:        VkCompositeAlphaFlagsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        supportedUsageFlags:            VkImageUsageFlags = 159 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pPresentModeCount:              uint32_t* = 4
    pPresentModes:                  VkPresentModeKHR* = 0000012C85328410
        pPresentModes[0]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_KHR (2)
        pPresentModes[1]:               VkPresentModeKHR = VK_PRESENT_MODE_FIFO_RELAXED_KHR (3)
        pPresentModes[2]:               VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        pPresentModes[3]:               VkPresentModeKHR = VK_PRESENT_MODE_IMMEDIATE_KHR (0)

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice:                 VkPhysicalDevice = 0000012CF2B92C50
    surface:                        VkSurfaceKHR = EAD9370000000008
    pSurfaceFormatCount:            uint32_t* = 5
    pSurfaceFormats:                VkSurfaceFormatKHR* = 0000012C853190B0
        pSurfaceFormats[0]:             VkSurfaceFormatKHR = 0000012C853190B0:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]:             VkSurfaceFormatKHR = 0000012C853190B8:
            format:                         VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]:             VkSurfaceFormatKHR = 0000012C853190C0:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]:             VkSurfaceFormatKHR = 0000012C853190C8:
            format:                         VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]:             VkSurfaceFormatKHR = 0000012C853190D0:
            format:                         VkFormat = VK_FORMAT_A2B10G10R10_UNORM_PACK32 (64)
            colorSpace:                     VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_ERROR_DEVICE_LOST (-4):
    device:                         VkDevice = 0000012CF8401FC0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000025172F8D10:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000025172F8D00
            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004
        pValues:                        const uint64_t* = 00000025172F8D08
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkWaitSemaphores(device, pWaitInfo, timeout) returns VkResult VK_ERROR_DEVICE_LOST (-4):
    device:                         VkDevice = 0000012CF8401FC0
    pWaitInfo:                      const VkSemaphoreWaitInfo* = 00000025172F7370:
        sType:                          VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:                          const void* = NULL
        flags:                          VkSemaphoreWaitFlags = 0
        semaphoreCount:                 uint32_t = 1
        pSemaphores:                    const VkSemaphore* = 00000025172F7360
            pSemaphores[0]:                 const VkSemaphore = F56C9B0000000004
        pValues:                        const uint64_t* = 00000025172F7368
            pValues[0]:                     const uint64_t = 1
    timeout:                        uint64_t = 5000000000

Thread 0, Frame 0:
vkDeviceWaitIdle(device) returns VkResult VK_ERROR_DEVICE_LOST (-4):
    device:                         VkDevice = 0000012CF8401FC0

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = 2723BA0000000037
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = 59F7450000000038
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = 944A2C0000000039
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySemaphore(device, semaphore, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    semaphore:                      VkSemaphore = 210D07000000003A
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySwapchainKHR(device, swapchain, pAllocator) returns void:
    device:                         VkDevice = 0000012CF8401FC0
    swapchain:                      VkSwapchainKHR = A808D50000000033
    pAllocator:                     const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroySurfaceKHR(instance, surface, pAllocator) returns void:
    instance:                       VkInstance = 0000012CF1767870
    surface:                        VkSurfaceKHR = EAD9370000000008
    pAllocator:                     const VkAllocationCallbacks* = NULL

